# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class DnsZone(pulumi.CustomResource):
    comment: pulumi.Output[str]
    """
    — (Required) A descriptive comment.  
    """
    contract: pulumi.Output[str]
    """
    — (Required) The contract ID. 
    """
    group: pulumi.Output[str]
    """
    — (Required) The currently selected group ID.   
    """
    masters: pulumi.Output[list]
    """
    — (Required) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.  
    """
    sign_and_serve: pulumi.Output[bool]
    """
    — (Required) Whether DNSSEC Sign&Serve is enabled.  
    """
    type: pulumi.Output[str]
    """
    — (Required) Whether the zone is primary or secondary.  
    """
    zone: pulumi.Output[str]
    """
    — (Required) Domain zone, encapsulating any nested subdomains.  
    """
    def __init__(__self__, resource_name, opts=None, comment=None, contract=None, group=None, masters=None, sign_and_serve=None, type=None, zone=None, __props__=None, __name__=None, __opts__=None):
        """
        The `EdgeDNS.DnsZone` provides the resource for configuring a dns zone to integrate easily with your existing DNS infrastructure to provide a secure, high performance, highly available and scalable solution for DNS hosting.



        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: — (Required) A descriptive comment.  
        :param pulumi.Input[str] contract: — (Required) The contract ID. 
        :param pulumi.Input[str] group: — (Required) The currently selected group ID.   
        :param pulumi.Input[list] masters: — (Required) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.  
        :param pulumi.Input[bool] sign_and_serve: — (Required) Whether DNSSEC Sign&Serve is enabled.  
        :param pulumi.Input[str] type: — (Required) Whether the zone is primary or secondary.  
        :param pulumi.Input[str] zone: — (Required) Domain zone, encapsulating any nested subdomains.  
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['comment'] = comment
            if contract is None:
                raise TypeError("Missing required property 'contract'")
            __props__['contract'] = contract
            if group is None:
                raise TypeError("Missing required property 'group'")
            __props__['group'] = group
            __props__['masters'] = masters
            if sign_and_serve is None:
                raise TypeError("Missing required property 'sign_and_serve'")
            __props__['sign_and_serve'] = sign_and_serve
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            if zone is None:
                raise TypeError("Missing required property 'zone'")
            __props__['zone'] = zone
        super(DnsZone, __self__).__init__(
            'akamai:EdgeDNS/dnsZone:DnsZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, comment=None, contract=None, group=None, masters=None, sign_and_serve=None, type=None, zone=None):
        """
        Get an existing DnsZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: — (Required) A descriptive comment.  
        :param pulumi.Input[str] contract: — (Required) The contract ID. 
        :param pulumi.Input[str] group: — (Required) The currently selected group ID.   
        :param pulumi.Input[list] masters: — (Required) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.  
        :param pulumi.Input[bool] sign_and_serve: — (Required) Whether DNSSEC Sign&Serve is enabled.  
        :param pulumi.Input[str] type: — (Required) Whether the zone is primary or secondary.  
        :param pulumi.Input[str] zone: — (Required) Domain zone, encapsulating any nested subdomains.  
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["comment"] = comment
        __props__["contract"] = contract
        __props__["group"] = group
        __props__["masters"] = masters
        __props__["sign_and_serve"] = sign_and_serve
        __props__["type"] = type
        __props__["zone"] = zone
        return DnsZone(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

