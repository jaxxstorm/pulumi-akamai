// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.akamai.outputs.DatastreamConfigFrequency;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamConfig {
    /**
     * @return A delimiter that you want to use to separate data set fields in the log lines. Currently, `SPACE` is the only available delimiter. This field is required for the `STRUCTURED` log file `format`.
     * 
     */
    private @Nullable String delimiter;
    /**
     * @return The format in which you want to receive log files, either `STRUCTURED` or `JSON`. When `delimiter` is present in the request, `STRUCTURED` is the mandatory format.
     * 
     */
    private String format;
    /**
     * @return How often you want to collect logs from each uploader and send them to a destination.
     * 
     */
    private DatastreamConfigFrequency frequency;
    /**
     * @return The prefix of the log file that you want to send to a destination. It’s a string of at most 200 characters. If unspecified, defaults to `ak`.
     * 
     */
    private @Nullable String uploadFilePrefix;
    /**
     * @return The suffix of the log file that you want to send to a destination. It’s a static string of at most 10 characters. If unspecified, defaults to `ds`.
     * 
     */
    private @Nullable String uploadFileSuffix;

    private DatastreamConfig() {}
    /**
     * @return A delimiter that you want to use to separate data set fields in the log lines. Currently, `SPACE` is the only available delimiter. This field is required for the `STRUCTURED` log file `format`.
     * 
     */
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    /**
     * @return The format in which you want to receive log files, either `STRUCTURED` or `JSON`. When `delimiter` is present in the request, `STRUCTURED` is the mandatory format.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return How often you want to collect logs from each uploader and send them to a destination.
     * 
     */
    public DatastreamConfigFrequency frequency() {
        return this.frequency;
    }
    /**
     * @return The prefix of the log file that you want to send to a destination. It’s a string of at most 200 characters. If unspecified, defaults to `ak`.
     * 
     */
    public Optional<String> uploadFilePrefix() {
        return Optional.ofNullable(this.uploadFilePrefix);
    }
    /**
     * @return The suffix of the log file that you want to send to a destination. It’s a static string of at most 10 characters. If unspecified, defaults to `ds`.
     * 
     */
    public Optional<String> uploadFileSuffix() {
        return Optional.ofNullable(this.uploadFileSuffix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String delimiter;
        private String format;
        private DatastreamConfigFrequency frequency;
        private @Nullable String uploadFilePrefix;
        private @Nullable String uploadFileSuffix;
        public Builder() {}
        public Builder(DatastreamConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delimiter = defaults.delimiter;
    	      this.format = defaults.format;
    	      this.frequency = defaults.frequency;
    	      this.uploadFilePrefix = defaults.uploadFilePrefix;
    	      this.uploadFileSuffix = defaults.uploadFileSuffix;
        }

        @CustomType.Setter
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        @CustomType.Setter
        public Builder frequency(DatastreamConfigFrequency frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        @CustomType.Setter
        public Builder uploadFilePrefix(@Nullable String uploadFilePrefix) {
            this.uploadFilePrefix = uploadFilePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder uploadFileSuffix(@Nullable String uploadFileSuffix) {
            this.uploadFileSuffix = uploadFileSuffix;
            return this;
        }
        public DatastreamConfig build() {
            final var o = new DatastreamConfig();
            o.delimiter = delimiter;
            o.format = format;
            o.frequency = frequency;
            o.uploadFilePrefix = uploadFilePrefix;
            o.uploadFileSuffix = uploadFileSuffix;
            return o;
        }
    }
}
