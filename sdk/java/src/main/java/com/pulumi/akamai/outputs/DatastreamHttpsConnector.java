// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatastreamHttpsConnector {
    /**
     * @return Either `NONE` for no authentication, or `BASIC`. For basic authentication, provide the `user_name` and `password` you set in your custom HTTPS endpoint.
     * 
     */
    private String authenticationType;
    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    private @Nullable Boolean compressLogs;
    private @Nullable Integer connectorId;
    /**
     * @return The name of the connector.
     * 
     */
    private String connectorName;
    /**
     * @return **Secret**. Enter the password you set in your custom HTTPS endpoint for authentication.
     * 
     */
    private @Nullable String password;
    /**
     * @return Enter the secure URL where you want to send and store your logs.
     * 
     */
    private String url;
    /**
     * @return **Secret**. Enter the valid username you set in your custom HTTPS endpoint for authentication.
     * 
     */
    private @Nullable String userName;

    private DatastreamHttpsConnector() {}
    /**
     * @return Either `NONE` for no authentication, or `BASIC`. For basic authentication, provide the `user_name` and `password` you set in your custom HTTPS endpoint.
     * 
     */
    public String authenticationType() {
        return this.authenticationType;
    }
    /**
     * @return Enables GZIP compression for a log file sent to a destination. If unspecified, this defaults to `true`.
     * 
     */
    public Optional<Boolean> compressLogs() {
        return Optional.ofNullable(this.compressLogs);
    }
    public Optional<Integer> connectorId() {
        return Optional.ofNullable(this.connectorId);
    }
    /**
     * @return The name of the connector.
     * 
     */
    public String connectorName() {
        return this.connectorName;
    }
    /**
     * @return **Secret**. Enter the password you set in your custom HTTPS endpoint for authentication.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Enter the secure URL where you want to send and store your logs.
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return **Secret**. Enter the valid username you set in your custom HTTPS endpoint for authentication.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatastreamHttpsConnector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationType;
        private @Nullable Boolean compressLogs;
        private @Nullable Integer connectorId;
        private String connectorName;
        private @Nullable String password;
        private String url;
        private @Nullable String userName;
        public Builder() {}
        public Builder(DatastreamHttpsConnector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.compressLogs = defaults.compressLogs;
    	      this.connectorId = defaults.connectorId;
    	      this.connectorName = defaults.connectorName;
    	      this.password = defaults.password;
    	      this.url = defaults.url;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder authenticationType(String authenticationType) {
            this.authenticationType = Objects.requireNonNull(authenticationType);
            return this;
        }
        @CustomType.Setter
        public Builder compressLogs(@Nullable Boolean compressLogs) {
            this.compressLogs = compressLogs;
            return this;
        }
        @CustomType.Setter
        public Builder connectorId(@Nullable Integer connectorId) {
            this.connectorId = connectorId;
            return this;
        }
        @CustomType.Setter
        public Builder connectorName(String connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }
        public DatastreamHttpsConnector build() {
            final var o = new DatastreamHttpsConnector();
            o.authenticationType = authenticationType;
            o.compressLogs = compressLogs;
            o.connectorId = connectorId;
            o.connectorName = connectorName;
            o.password = password;
            o.url = url;
            o.userName = userName;
            return o;
        }
    }
}
