// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class AppSecMalwarePolicyActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSecMalwarePolicyActionArgs Empty = new AppSecMalwarePolicyActionArgs();

    /**
     * . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * - **none**. Take no action.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * - **none**. Take no action.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * . Unique identifier of the security configuration associated with the malware policy action being modified.
     * 
     */
    @Import(name="configId", required=true)
    private Output<Integer> configId;

    /**
     * @return . Unique identifier of the security configuration associated with the malware policy action being modified.
     * 
     */
    public Output<Integer> configId() {
        return this.configId;
    }

    /**
     * . Unique identifier of the malware policy whose action is being modified.
     * 
     */
    @Import(name="malwarePolicyId", required=true)
    private Output<Integer> malwarePolicyId;

    /**
     * @return . Unique identifier of the malware policy whose action is being modified.
     * 
     */
    public Output<Integer> malwarePolicyId() {
        return this.malwarePolicyId;
    }

    /**
     * . Unique identifier of the security policy associated with the malware policy whose action is being modified.
     * 
     */
    @Import(name="securityPolicyId", required=true)
    private Output<String> securityPolicyId;

    /**
     * @return . Unique identifier of the security policy associated with the malware policy whose action is being modified.
     * 
     */
    public Output<String> securityPolicyId() {
        return this.securityPolicyId;
    }

    /**
     * . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * 
     */
    @Import(name="unscannedAction", required=true)
    private Output<String> unscannedAction;

    /**
     * @return . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * 
     */
    public Output<String> unscannedAction() {
        return this.unscannedAction;
    }

    private AppSecMalwarePolicyActionArgs() {}

    private AppSecMalwarePolicyActionArgs(AppSecMalwarePolicyActionArgs $) {
        this.action = $.action;
        this.configId = $.configId;
        this.malwarePolicyId = $.malwarePolicyId;
        this.securityPolicyId = $.securityPolicyId;
        this.unscannedAction = $.unscannedAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecMalwarePolicyActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecMalwarePolicyActionArgs $;

        public Builder() {
            $ = new AppSecMalwarePolicyActionArgs();
        }

        public Builder(AppSecMalwarePolicyActionArgs defaults) {
            $ = new AppSecMalwarePolicyActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * - **none**. Take no action.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * - **none**. Take no action.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the malware policy action being modified.
         * 
         * @return builder
         * 
         */
        public Builder configId(Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the malware policy action being modified.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param malwarePolicyId . Unique identifier of the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(Output<Integer> malwarePolicyId) {
            $.malwarePolicyId = malwarePolicyId;
            return this;
        }

        /**
         * @param malwarePolicyId . Unique identifier of the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(Integer malwarePolicyId) {
            return malwarePolicyId(Output.of(malwarePolicyId));
        }

        /**
         * @param securityPolicyId . Unique identifier of the security policy associated with the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId . Unique identifier of the security policy associated with the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param unscannedAction . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(Output<String> unscannedAction) {
            $.unscannedAction = unscannedAction;
            return this;
        }

        /**
         * @param unscannedAction . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(String unscannedAction) {
            return unscannedAction(Output.of(unscannedAction));
        }

        public AppSecMalwarePolicyActionArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.configId = Objects.requireNonNull($.configId, "expected parameter 'configId' to be non-null");
            $.malwarePolicyId = Objects.requireNonNull($.malwarePolicyId, "expected parameter 'malwarePolicyId' to be non-null");
            $.securityPolicyId = Objects.requireNonNull($.securityPolicyId, "expected parameter 'securityPolicyId' to be non-null");
            $.unscannedAction = Objects.requireNonNull($.unscannedAction, "expected parameter 'unscannedAction' to be non-null");
            return $;
        }
    }

}
