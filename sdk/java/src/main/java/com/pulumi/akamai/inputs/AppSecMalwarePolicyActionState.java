// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.akamai.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSecMalwarePolicyActionState extends com.pulumi.resources.ResourceArgs {

    public static final AppSecMalwarePolicyActionState Empty = new AppSecMalwarePolicyActionState();

    /**
     * . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * - **none**. Take no action.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * - **none**. Take no action.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * . Unique identifier of the security configuration associated with the malware policy action being modified.
     * 
     */
    @Import(name="configId")
    private @Nullable Output<Integer> configId;

    /**
     * @return . Unique identifier of the security configuration associated with the malware policy action being modified.
     * 
     */
    public Optional<Output<Integer>> configId() {
        return Optional.ofNullable(this.configId);
    }

    /**
     * . Unique identifier of the malware policy whose action is being modified.
     * 
     */
    @Import(name="malwarePolicyId")
    private @Nullable Output<Integer> malwarePolicyId;

    /**
     * @return . Unique identifier of the malware policy whose action is being modified.
     * 
     */
    public Optional<Output<Integer>> malwarePolicyId() {
        return Optional.ofNullable(this.malwarePolicyId);
    }

    /**
     * . Unique identifier of the security policy associated with the malware policy whose action is being modified.
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return . Unique identifier of the security policy associated with the malware policy whose action is being modified.
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    /**
     * . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * 
     */
    @Import(name="unscannedAction")
    private @Nullable Output<String> unscannedAction;

    /**
     * @return . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
     * - **alert**. Record the event.
     * - **deny**. Block the request.
     * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
     * 
     */
    public Optional<Output<String>> unscannedAction() {
        return Optional.ofNullable(this.unscannedAction);
    }

    private AppSecMalwarePolicyActionState() {}

    private AppSecMalwarePolicyActionState(AppSecMalwarePolicyActionState $) {
        this.action = $.action;
        this.configId = $.configId;
        this.malwarePolicyId = $.malwarePolicyId;
        this.securityPolicyId = $.securityPolicyId;
        this.unscannedAction = $.unscannedAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSecMalwarePolicyActionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSecMalwarePolicyActionState $;

        public Builder() {
            $ = new AppSecMalwarePolicyActionState();
        }

        public Builder(AppSecMalwarePolicyActionState defaults) {
            $ = new AppSecMalwarePolicyActionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * - **none**. Take no action.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action . Action to be taken for requests scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * - **none**. Take no action.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the malware policy action being modified.
         * 
         * @return builder
         * 
         */
        public Builder configId(@Nullable Output<Integer> configId) {
            $.configId = configId;
            return this;
        }

        /**
         * @param configId . Unique identifier of the security configuration associated with the malware policy action being modified.
         * 
         * @return builder
         * 
         */
        public Builder configId(Integer configId) {
            return configId(Output.of(configId));
        }

        /**
         * @param malwarePolicyId . Unique identifier of the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(@Nullable Output<Integer> malwarePolicyId) {
            $.malwarePolicyId = malwarePolicyId;
            return this;
        }

        /**
         * @param malwarePolicyId . Unique identifier of the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder malwarePolicyId(Integer malwarePolicyId) {
            return malwarePolicyId(Output.of(malwarePolicyId));
        }

        /**
         * @param securityPolicyId . Unique identifier of the security policy associated with the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId . Unique identifier of the security policy associated with the malware policy whose action is being modified.
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param unscannedAction . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(@Nullable Output<String> unscannedAction) {
            $.unscannedAction = unscannedAction;
            return this;
        }

        /**
         * @param unscannedAction . Action to be taken for requests not scanned according to the given malware policy. Allowed actions are:
         * - **alert**. Record the event.
         * - **deny**. Block the request.
         * - **deny_custom{custom_deny_id}**. Take the action specified by the custom deny.
         * 
         * @return builder
         * 
         */
        public Builder unscannedAction(String unscannedAction) {
            return unscannedAction(Output.of(unscannedAction));
        }

        public AppSecMalwarePolicyActionState build() {
            return $;
        }
    }

}
