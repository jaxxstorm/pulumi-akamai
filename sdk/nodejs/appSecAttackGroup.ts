// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.AppSecAttackGroup` resource to create or modify an attack group's action, conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * import * from "fs";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: _var.security_configuration,
 * });
 * const attackGroup = new akamai.AppSecAttackGroup("attackGroup", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     securityPolicyId: _var.security_policy_id,
 *     attackGroup: _var.attack_group,
 *     attackGroupAction: _var.attack_group_action,
 *     conditionException: fs.readFileSync(`${path.module}/condition_exception.json`),
 * });
 * ```
 */
export class AppSecAttackGroup extends pulumi.CustomResource {
    /**
     * Get an existing AppSecAttackGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecAttackGroupState, opts?: pulumi.CustomResourceOptions): AppSecAttackGroup {
        return new AppSecAttackGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecAttackGroup:AppSecAttackGroup';

    /**
     * Returns true if the given object is an instance of AppSecAttackGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecAttackGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecAttackGroup.__pulumiType;
    }

    /**
     * The attack group to use.
     */
    public readonly attackGroup!: pulumi.Output<string>;
    /**
     * The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
     */
    public readonly attackGroupAction!: pulumi.Output<string>;
    /**
     * The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
     */
    public readonly conditionException!: pulumi.Output<string | undefined>;
    /**
     * The ID of the security configuration to use.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * The ID of the security policy to use.
     */
    public readonly securityPolicyId!: pulumi.Output<string>;

    /**
     * Create a AppSecAttackGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecAttackGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecAttackGroupArgs | AppSecAttackGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecAttackGroupState | undefined;
            inputs["attackGroup"] = state ? state.attackGroup : undefined;
            inputs["attackGroupAction"] = state ? state.attackGroupAction : undefined;
            inputs["conditionException"] = state ? state.conditionException : undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
        } else {
            const args = argsOrState as AppSecAttackGroupArgs | undefined;
            if ((!args || args.attackGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attackGroup'");
            }
            if ((!args || args.attackGroupAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attackGroupAction'");
            }
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.securityPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyId'");
            }
            inputs["attackGroup"] = args ? args.attackGroup : undefined;
            inputs["attackGroupAction"] = args ? args.attackGroupAction : undefined;
            inputs["conditionException"] = args ? args.conditionException : undefined;
            inputs["configId"] = args ? args.configId : undefined;
            inputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppSecAttackGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecAttackGroup resources.
 */
export interface AppSecAttackGroupState {
    /**
     * The attack group to use.
     */
    attackGroup?: pulumi.Input<string>;
    /**
     * The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
     */
    attackGroupAction?: pulumi.Input<string>;
    /**
     * The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
     */
    conditionException?: pulumi.Input<string>;
    /**
     * The ID of the security configuration to use.
     */
    configId?: pulumi.Input<number>;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecAttackGroup resource.
 */
export interface AppSecAttackGroupArgs {
    /**
     * The attack group to use.
     */
    attackGroup: pulumi.Input<string>;
    /**
     * The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
     */
    attackGroupAction: pulumi.Input<string>;
    /**
     * The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
     */
    conditionException?: pulumi.Input<string>;
    /**
     * The ID of the security configuration to use.
     */
    configId: pulumi.Input<number>;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId: pulumi.Input<string>;
}
