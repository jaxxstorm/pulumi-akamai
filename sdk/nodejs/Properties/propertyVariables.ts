// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The `akamai.Properties.PropertyVariables` allows you to implement dynamic functionality. You can perform conditional logic based on the variableâ€™s value, and catch any unforeseen errors that execute on the edge at runtime.
 * 
 * Typical uses for variables include:
 * 
 * * Simplify configurations by reducing the number of rules and behaviors.
 * * Improve self serviceability by replacing or extending advanced metadata.
 * * Automate redirects, forward path rewrites, HTTP header and cookie manipulation.
 * * Move origin functionality to the edge.
 * 
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * 
 * const origin = new akamai.Properties.PropertyVariables("origin", {
 *     variables: [{
 *         variables: [{
 *             description: "Origin Hostname",
 *             hidden: true,
 *             name: "PMUSER_ORIGIN",
 *             sensitive: true,
 *             value: "origin.example.org",
 *         }],
 *     }],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-akamai/blob/master/website/docs/r/property_variables.html.markdown.
 */
export class PropertyVariables extends pulumi.CustomResource {
    /**
     * Get an existing PropertyVariables resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PropertyVariablesState, opts?: pulumi.CustomResourceOptions): PropertyVariables {
        return new PropertyVariables(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:Properties/propertyVariables:PropertyVariables';

    /**
     * Returns true if the given object is an instance of PropertyVariables.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PropertyVariables {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PropertyVariables.__pulumiType;
    }

    /**
     * JSON variables representation
     */
    public /*out*/ readonly json!: pulumi.Output<string>;
    public readonly variables!: pulumi.Output<outputs.Properties.PropertyVariablesVariable[] | undefined>;

    /**
     * Create a PropertyVariables resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PropertyVariablesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PropertyVariablesArgs | PropertyVariablesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as PropertyVariablesState | undefined;
            inputs["json"] = state ? state.json : undefined;
            inputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as PropertyVariablesArgs | undefined;
            inputs["variables"] = args ? args.variables : undefined;
            inputs["json"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(PropertyVariables.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PropertyVariables resources.
 */
export interface PropertyVariablesState {
    /**
     * JSON variables representation
     */
    readonly json?: pulumi.Input<string>;
    readonly variables?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyVariablesVariable>[]>;
}

/**
 * The set of arguments for constructing a PropertyVariables resource.
 */
export interface PropertyVariablesArgs {
    readonly variables?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyVariablesVariable>[]>;
}
