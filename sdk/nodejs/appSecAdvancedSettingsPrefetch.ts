// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `resourceAkamaiAppsecAdvancedSettingsPrefetch` resource allows you to enable inspection of internal requests (those between your origin and Akamaiâ€™s servers) for file types that you specify. You can also apply rate controls to prefetch requests. This operation applies at the configuration level.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: _var.security_configuration,
 * });
 * const prefetch = new akamai.AppSecAdvancedSettingsPrefetch("prefetch", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     version: configuration.then(configuration => configuration.latestVersion),
 *     enableAppLayer: false,
 *     allExtensions: true,
 *     enableRateControls: false,
 *     extensions: _var.extensions,
 * });
 * ```
 */
export class AppSecAdvancedSettingsPrefetch extends pulumi.CustomResource {
    /**
     * Get an existing AppSecAdvancedSettingsPrefetch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecAdvancedSettingsPrefetchState, opts?: pulumi.CustomResourceOptions): AppSecAdvancedSettingsPrefetch {
        return new AppSecAdvancedSettingsPrefetch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch';

    /**
     * Returns true if the given object is an instance of AppSecAdvancedSettingsPrefetch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecAdvancedSettingsPrefetch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecAdvancedSettingsPrefetch.__pulumiType;
    }

    /**
     * Whether to enable prefetch requests for all extensions.
     */
    public readonly allExtensions!: pulumi.Output<boolean>;
    /**
     * The ID of the security configuration to use.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * Whether to enable prefetch requests.
     */
    public readonly enableAppLayer!: pulumi.Output<boolean>;
    /**
     * Whether to enable prefetch requests for rate controls.
     */
    public readonly enableRateControls!: pulumi.Output<boolean>;
    /**
     * The specific extensions for which to enable prefetch requests. If `allExtensions` is True, `extensions` must be an empty list.
     */
    public readonly extensions!: pulumi.Output<string[]>;
    /**
     * The version number of the security configuration to use.
     */
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a AppSecAdvancedSettingsPrefetch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecAdvancedSettingsPrefetchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecAdvancedSettingsPrefetchArgs | AppSecAdvancedSettingsPrefetchState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecAdvancedSettingsPrefetchState | undefined;
            inputs["allExtensions"] = state ? state.allExtensions : undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["enableAppLayer"] = state ? state.enableAppLayer : undefined;
            inputs["enableRateControls"] = state ? state.enableRateControls : undefined;
            inputs["extensions"] = state ? state.extensions : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AppSecAdvancedSettingsPrefetchArgs | undefined;
            if ((!args || args.allExtensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allExtensions'");
            }
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.enableAppLayer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableAppLayer'");
            }
            if ((!args || args.enableRateControls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableRateControls'");
            }
            if ((!args || args.extensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensions'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            inputs["allExtensions"] = args ? args.allExtensions : undefined;
            inputs["configId"] = args ? args.configId : undefined;
            inputs["enableAppLayer"] = args ? args.enableAppLayer : undefined;
            inputs["enableRateControls"] = args ? args.enableRateControls : undefined;
            inputs["extensions"] = args ? args.extensions : undefined;
            inputs["version"] = args ? args.version : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppSecAdvancedSettingsPrefetch.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecAdvancedSettingsPrefetch resources.
 */
export interface AppSecAdvancedSettingsPrefetchState {
    /**
     * Whether to enable prefetch requests for all extensions.
     */
    readonly allExtensions?: pulumi.Input<boolean>;
    /**
     * The ID of the security configuration to use.
     */
    readonly configId?: pulumi.Input<number>;
    /**
     * Whether to enable prefetch requests.
     */
    readonly enableAppLayer?: pulumi.Input<boolean>;
    /**
     * Whether to enable prefetch requests for rate controls.
     */
    readonly enableRateControls?: pulumi.Input<boolean>;
    /**
     * The specific extensions for which to enable prefetch requests. If `allExtensions` is True, `extensions` must be an empty list.
     */
    readonly extensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version number of the security configuration to use.
     */
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppSecAdvancedSettingsPrefetch resource.
 */
export interface AppSecAdvancedSettingsPrefetchArgs {
    /**
     * Whether to enable prefetch requests for all extensions.
     */
    readonly allExtensions: pulumi.Input<boolean>;
    /**
     * The ID of the security configuration to use.
     */
    readonly configId: pulumi.Input<number>;
    /**
     * Whether to enable prefetch requests.
     */
    readonly enableAppLayer: pulumi.Input<boolean>;
    /**
     * Whether to enable prefetch requests for rate controls.
     */
    readonly enableRateControls: pulumi.Input<boolean>;
    /**
     * The specific extensions for which to enable prefetch requests. If `allExtensions` is True, `extensions` must be an empty list.
     */
    readonly extensions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version number of the security configuration to use.
     */
    readonly version: pulumi.Input<number>;
}
