// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * The `akamai.EdgeDNS.DnsRecord` provides the resource for configuring a dns record to integrate easily with your existing DNS infrastructure to provide a secure, high performance, highly available and scalable solution for DNS hosting.
 * 
 * ## Example Usage
 * 
 * 
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 * 
 * // A record
 * const origin = new akamai.EdgeDNS.DnsRecord("origin", {
 *     active: true,
 *     recordtype: "A",
 *     targets: ["192.0.2.42"],
 *     ttl: 30,
 *     zone: "origin.org",
 * });
 * // CNAME record
 * const www = new akamai.EdgeDNS.DnsRecord("www", {
 *     active: true,
 *     recordtype: "CNAME",
 *     targets: "origin.example.org.edgesuite.net",
 *     ttl: 600,
 *     zone: "example.com",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-akamai/blob/master/website/docs/r/dns_record.html.markdown.
 */
export class DnsRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsRecordState, opts?: pulumi.CustomResourceOptions): DnsRecord {
        return new DnsRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:EdgeDNS/dnsRecord:DnsRecord';

    /**
     * Returns true if the given object is an instance of DnsRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsRecord.__pulumiType;
    }

    /**
     * — (Required,Boolean) Whether the record is active.  
     */
    public readonly active!: pulumi.Output<boolean>;
    public readonly algorithm!: pulumi.Output<number | undefined>;
    public readonly digest!: pulumi.Output<string | undefined>;
    public readonly digestType!: pulumi.Output<number | undefined>;
    public readonly expiration!: pulumi.Output<string | undefined>;
    public readonly fingerprint!: pulumi.Output<string | undefined>;
    public readonly fingerprintType!: pulumi.Output<number | undefined>;
    public readonly flags!: pulumi.Output<number | undefined>;
    public readonly flagsnaptr!: pulumi.Output<string | undefined>;
    public readonly hardware!: pulumi.Output<string | undefined>;
    public readonly inception!: pulumi.Output<string | undefined>;
    public readonly iterations!: pulumi.Output<number | undefined>;
    public readonly key!: pulumi.Output<string | undefined>;
    public readonly keytag!: pulumi.Output<number | undefined>;
    public readonly labels!: pulumi.Output<number | undefined>;
    public readonly mailbox!: pulumi.Output<string | undefined>;
    /**
     * — (Required) The name of the record. The name is an owner name, that is, the name of the node to which this resource record pertains.  
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nextHashedOwnerName!: pulumi.Output<string | undefined>;
    public readonly order!: pulumi.Output<number | undefined>;
    public readonly originalTtl!: pulumi.Output<number | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly preference!: pulumi.Output<number | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly priorityIncrement!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly recordtype!: pulumi.Output<string>;
    public readonly regexp!: pulumi.Output<string | undefined>;
    public readonly replacement!: pulumi.Output<string | undefined>;
    public readonly salt!: pulumi.Output<string | undefined>;
    public readonly service!: pulumi.Output<string | undefined>;
    public readonly signature!: pulumi.Output<string | undefined>;
    public readonly signer!: pulumi.Output<string | undefined>;
    public readonly software!: pulumi.Output<string | undefined>;
    public readonly subtype!: pulumi.Output<number | undefined>;
    /**
     * — (Required) A domain name that specifies the canonical or primary name for the owner. The owner name is an alias.  
     */
    public readonly targets!: pulumi.Output<string[] | undefined>;
    /**
     * — (Required,Boolean) The TTL is a 32-bit signed integer that specifies the time interval that the resource record may be cached before the source of the information should be consulted again. Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached. Zero values can also be used for extremely volatile data.  
     */
    public readonly ttl!: pulumi.Output<number>;
    public readonly txt!: pulumi.Output<string | undefined>;
    public readonly typeBitmaps!: pulumi.Output<string | undefined>;
    public readonly typeCovered!: pulumi.Output<string | undefined>;
    public readonly weight!: pulumi.Output<number | undefined>;
    /**
     * — (Required) Domain zone, encapsulating any nested subdomains.  
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a DnsRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsRecordArgs | DnsRecordState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DnsRecordState | undefined;
            inputs["active"] = state ? state.active : undefined;
            inputs["algorithm"] = state ? state.algorithm : undefined;
            inputs["digest"] = state ? state.digest : undefined;
            inputs["digestType"] = state ? state.digestType : undefined;
            inputs["expiration"] = state ? state.expiration : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["fingerprintType"] = state ? state.fingerprintType : undefined;
            inputs["flags"] = state ? state.flags : undefined;
            inputs["flagsnaptr"] = state ? state.flagsnaptr : undefined;
            inputs["hardware"] = state ? state.hardware : undefined;
            inputs["inception"] = state ? state.inception : undefined;
            inputs["iterations"] = state ? state.iterations : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["keytag"] = state ? state.keytag : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["mailbox"] = state ? state.mailbox : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nextHashedOwnerName"] = state ? state.nextHashedOwnerName : undefined;
            inputs["order"] = state ? state.order : undefined;
            inputs["originalTtl"] = state ? state.originalTtl : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["preference"] = state ? state.preference : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["priorityIncrement"] = state ? state.priorityIncrement : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["recordtype"] = state ? state.recordtype : undefined;
            inputs["regexp"] = state ? state.regexp : undefined;
            inputs["replacement"] = state ? state.replacement : undefined;
            inputs["salt"] = state ? state.salt : undefined;
            inputs["service"] = state ? state.service : undefined;
            inputs["signature"] = state ? state.signature : undefined;
            inputs["signer"] = state ? state.signer : undefined;
            inputs["software"] = state ? state.software : undefined;
            inputs["subtype"] = state ? state.subtype : undefined;
            inputs["targets"] = state ? state.targets : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["txt"] = state ? state.txt : undefined;
            inputs["typeBitmaps"] = state ? state.typeBitmaps : undefined;
            inputs["typeCovered"] = state ? state.typeCovered : undefined;
            inputs["weight"] = state ? state.weight : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DnsRecordArgs | undefined;
            if (!args || args.active === undefined) {
                throw new Error("Missing required property 'active'");
            }
            if (!args || args.recordtype === undefined) {
                throw new Error("Missing required property 'recordtype'");
            }
            if (!args || args.ttl === undefined) {
                throw new Error("Missing required property 'ttl'");
            }
            if (!args || args.zone === undefined) {
                throw new Error("Missing required property 'zone'");
            }
            inputs["active"] = args ? args.active : undefined;
            inputs["algorithm"] = args ? args.algorithm : undefined;
            inputs["digest"] = args ? args.digest : undefined;
            inputs["digestType"] = args ? args.digestType : undefined;
            inputs["expiration"] = args ? args.expiration : undefined;
            inputs["fingerprint"] = args ? args.fingerprint : undefined;
            inputs["fingerprintType"] = args ? args.fingerprintType : undefined;
            inputs["flags"] = args ? args.flags : undefined;
            inputs["flagsnaptr"] = args ? args.flagsnaptr : undefined;
            inputs["hardware"] = args ? args.hardware : undefined;
            inputs["inception"] = args ? args.inception : undefined;
            inputs["iterations"] = args ? args.iterations : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["keytag"] = args ? args.keytag : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["mailbox"] = args ? args.mailbox : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nextHashedOwnerName"] = args ? args.nextHashedOwnerName : undefined;
            inputs["order"] = args ? args.order : undefined;
            inputs["originalTtl"] = args ? args.originalTtl : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["preference"] = args ? args.preference : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["priorityIncrement"] = args ? args.priorityIncrement : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["recordtype"] = args ? args.recordtype : undefined;
            inputs["regexp"] = args ? args.regexp : undefined;
            inputs["replacement"] = args ? args.replacement : undefined;
            inputs["salt"] = args ? args.salt : undefined;
            inputs["service"] = args ? args.service : undefined;
            inputs["signature"] = args ? args.signature : undefined;
            inputs["signer"] = args ? args.signer : undefined;
            inputs["software"] = args ? args.software : undefined;
            inputs["subtype"] = args ? args.subtype : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["txt"] = args ? args.txt : undefined;
            inputs["typeBitmaps"] = args ? args.typeBitmaps : undefined;
            inputs["typeCovered"] = args ? args.typeCovered : undefined;
            inputs["weight"] = args ? args.weight : undefined;
            inputs["zone"] = args ? args.zone : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DnsRecord.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsRecord resources.
 */
export interface DnsRecordState {
    /**
     * — (Required,Boolean) Whether the record is active.  
     */
    readonly active?: pulumi.Input<boolean>;
    readonly algorithm?: pulumi.Input<number>;
    readonly digest?: pulumi.Input<string>;
    readonly digestType?: pulumi.Input<number>;
    readonly expiration?: pulumi.Input<string>;
    readonly fingerprint?: pulumi.Input<string>;
    readonly fingerprintType?: pulumi.Input<number>;
    readonly flags?: pulumi.Input<number>;
    readonly flagsnaptr?: pulumi.Input<string>;
    readonly hardware?: pulumi.Input<string>;
    readonly inception?: pulumi.Input<string>;
    readonly iterations?: pulumi.Input<number>;
    readonly key?: pulumi.Input<string>;
    readonly keytag?: pulumi.Input<number>;
    readonly labels?: pulumi.Input<number>;
    readonly mailbox?: pulumi.Input<string>;
    /**
     * — (Required) The name of the record. The name is an owner name, that is, the name of the node to which this resource record pertains.  
     */
    readonly name?: pulumi.Input<string>;
    readonly nextHashedOwnerName?: pulumi.Input<string>;
    readonly order?: pulumi.Input<number>;
    readonly originalTtl?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly preference?: pulumi.Input<number>;
    readonly priority?: pulumi.Input<number>;
    readonly priorityIncrement?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<number>;
    readonly recordtype?: pulumi.Input<string>;
    readonly regexp?: pulumi.Input<string>;
    readonly replacement?: pulumi.Input<string>;
    readonly salt?: pulumi.Input<string>;
    readonly service?: pulumi.Input<string>;
    readonly signature?: pulumi.Input<string>;
    readonly signer?: pulumi.Input<string>;
    readonly software?: pulumi.Input<string>;
    readonly subtype?: pulumi.Input<number>;
    /**
     * — (Required) A domain name that specifies the canonical or primary name for the owner. The owner name is an alias.  
     */
    readonly targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * — (Required,Boolean) The TTL is a 32-bit signed integer that specifies the time interval that the resource record may be cached before the source of the information should be consulted again. Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached. Zero values can also be used for extremely volatile data.  
     */
    readonly ttl?: pulumi.Input<number>;
    readonly txt?: pulumi.Input<string>;
    readonly typeBitmaps?: pulumi.Input<string>;
    readonly typeCovered?: pulumi.Input<string>;
    readonly weight?: pulumi.Input<number>;
    /**
     * — (Required) Domain zone, encapsulating any nested subdomains.  
     */
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsRecord resource.
 */
export interface DnsRecordArgs {
    /**
     * — (Required,Boolean) Whether the record is active.  
     */
    readonly active: pulumi.Input<boolean>;
    readonly algorithm?: pulumi.Input<number>;
    readonly digest?: pulumi.Input<string>;
    readonly digestType?: pulumi.Input<number>;
    readonly expiration?: pulumi.Input<string>;
    readonly fingerprint?: pulumi.Input<string>;
    readonly fingerprintType?: pulumi.Input<number>;
    readonly flags?: pulumi.Input<number>;
    readonly flagsnaptr?: pulumi.Input<string>;
    readonly hardware?: pulumi.Input<string>;
    readonly inception?: pulumi.Input<string>;
    readonly iterations?: pulumi.Input<number>;
    readonly key?: pulumi.Input<string>;
    readonly keytag?: pulumi.Input<number>;
    readonly labels?: pulumi.Input<number>;
    readonly mailbox?: pulumi.Input<string>;
    /**
     * — (Required) The name of the record. The name is an owner name, that is, the name of the node to which this resource record pertains.  
     */
    readonly name?: pulumi.Input<string>;
    readonly nextHashedOwnerName?: pulumi.Input<string>;
    readonly order?: pulumi.Input<number>;
    readonly originalTtl?: pulumi.Input<number>;
    readonly port?: pulumi.Input<number>;
    readonly preference?: pulumi.Input<number>;
    readonly priority?: pulumi.Input<number>;
    readonly priorityIncrement?: pulumi.Input<number>;
    readonly protocol?: pulumi.Input<number>;
    readonly recordtype: pulumi.Input<string>;
    readonly regexp?: pulumi.Input<string>;
    readonly replacement?: pulumi.Input<string>;
    readonly salt?: pulumi.Input<string>;
    readonly service?: pulumi.Input<string>;
    readonly signature?: pulumi.Input<string>;
    readonly signer?: pulumi.Input<string>;
    readonly software?: pulumi.Input<string>;
    readonly subtype?: pulumi.Input<number>;
    /**
     * — (Required) A domain name that specifies the canonical or primary name for the owner. The owner name is an alias.  
     */
    readonly targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * — (Required,Boolean) The TTL is a 32-bit signed integer that specifies the time interval that the resource record may be cached before the source of the information should be consulted again. Zero values are interpreted to mean that the RR can only be used for the transaction in progress, and should not be cached. Zero values can also be used for extremely volatile data.  
     */
    readonly ttl: pulumi.Input<number>;
    readonly txt?: pulumi.Input<string>;
    readonly typeBitmaps?: pulumi.Input<string>;
    readonly typeCovered?: pulumi.Input<string>;
    readonly weight?: pulumi.Input<number>;
    /**
     * — (Required) Domain zone, encapsulating any nested subdomains.  
     */
    readonly zone: pulumi.Input<string>;
}
