// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `resourceAkamaiAppsecConfiguration` resource allows you to create a new WAP or KSD security configuration. KSD security configurations start out empty, and WAP configurations are created with preset values. The contract you pass in the request body determines which product you use. You can edit the default settings included in the WAP configuration, but youâ€™ll need to run additional operations in this API to select specific protections for KSD. Your KSD configuration needs match targets and protection settings before it can be activated.
 */
export class AppSecConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AppSecConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecConfigurationState, opts?: pulumi.CustomResourceOptions): AppSecConfiguration {
        return new AppSecConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecConfiguration:AppSecConfiguration';

    /**
     * Returns true if the given object is an instance of AppSecConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecConfiguration.__pulumiType;
    }

    /**
     * (Required) The ID of the security configuration.
     */
    public /*out*/ readonly configId!: pulumi.Output<number>;
    /**
     * The contract ID of the configuration.
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * The config ID of the security configuration to clone from.
     */
    public readonly createFromConfigId!: pulumi.Output<number | undefined>;
    /**
     * The version number of the security configuration to clone from.
     */
    public readonly createFromVersion!: pulumi.Output<number | undefined>;
    /**
     * A description of the configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The group ID of the configuration.
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * The list of hostnames protected by this security configuration.
     */
    public readonly hostNames!: pulumi.Output<string[]>;
    /**
     * The name to be assigned to the configuration.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AppSecConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecConfigurationArgs | AppSecConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppSecConfigurationState | undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["contractId"] = state ? state.contractId : undefined;
            inputs["createFromConfigId"] = state ? state.createFromConfigId : undefined;
            inputs["createFromVersion"] = state ? state.createFromVersion : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
            inputs["hostNames"] = state ? state.hostNames : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AppSecConfigurationArgs | undefined;
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.hostNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostNames'");
            }
            inputs["contractId"] = args ? args.contractId : undefined;
            inputs["createFromConfigId"] = args ? args.createFromConfigId : undefined;
            inputs["createFromVersion"] = args ? args.createFromVersion : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["groupId"] = args ? args.groupId : undefined;
            inputs["hostNames"] = args ? args.hostNames : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["configId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(AppSecConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecConfiguration resources.
 */
export interface AppSecConfigurationState {
    /**
     * (Required) The ID of the security configuration.
     */
    configId?: pulumi.Input<number>;
    /**
     * The contract ID of the configuration.
     */
    contractId?: pulumi.Input<string>;
    /**
     * The config ID of the security configuration to clone from.
     */
    createFromConfigId?: pulumi.Input<number>;
    /**
     * The version number of the security configuration to clone from.
     */
    createFromVersion?: pulumi.Input<number>;
    /**
     * A description of the configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * The group ID of the configuration.
     */
    groupId?: pulumi.Input<number>;
    /**
     * The list of hostnames protected by this security configuration.
     */
    hostNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name to be assigned to the configuration.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppSecConfiguration resource.
 */
export interface AppSecConfigurationArgs {
    /**
     * The contract ID of the configuration.
     */
    contractId: pulumi.Input<string>;
    /**
     * The config ID of the security configuration to clone from.
     */
    createFromConfigId?: pulumi.Input<number>;
    /**
     * The version number of the security configuration to clone from.
     */
    createFromVersion?: pulumi.Input<number>;
    /**
     * A description of the configuration.
     */
    description: pulumi.Input<string>;
    /**
     * The group ID of the configuration.
     */
    groupId: pulumi.Input<number>;
    /**
     * The list of hostnames protected by this security configuration.
     */
    hostNames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name to be assigned to the configuration.
     */
    name?: pulumi.Input<string>;
}
