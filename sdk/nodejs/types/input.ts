// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";

export interface ProviderDn {
    accessToken?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    clientToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    maxBody?: pulumi.Input<number>;
}

export interface ProviderGtm {
    accessToken?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    clientToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    maxBody?: pulumi.Input<number>;
}

export interface ProviderProperty {
    accessToken?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    clientToken?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    maxBody?: pulumi.Input<number>;
}

export namespace Properties {
    export interface GetPropertyRulesRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: inputs.Properties.GetPropertyRulesRuleBehavior[];
        criteriaMatch?: string;
        /**
         * — (Optional) Whether the property is a secure (Enhanced TLS) property or not (top-level only).
         */
        isSecure?: boolean;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: inputs.Properties.GetPropertyRulesRuleRule[];
        variables?: inputs.Properties.GetPropertyRulesRuleVariable[];
    }

    export interface GetPropertyRulesRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: inputs.Properties.GetPropertyRulesRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: inputs.Properties.GetPropertyRulesRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: inputs.Properties.GetPropertyRulesRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: inputs.Properties.GetPropertyRulesRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: inputs.Properties.GetPropertyRulesRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: inputs.Properties.GetPropertyRulesRuleRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: inputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleVariable {
        description?: string;
        hidden: boolean;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        sensitive: boolean;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
    }

    export interface PropertyOrigin {
        /**
         * — (Optional) The hostname uses for the cache key. (default: `ORIGIN_HOSTNAME`).
         */
        cacheKeyHostname?: pulumi.Input<string>;
        /**
         * — (Optional, boolean) Whether origin supports gzip compression (default: `false`).
         */
        compress?: pulumi.Input<boolean>;
        /**
         * — (Optional, boolean) Whether the X-True-Client-IP header should be sent to origin (default: `false`).
         */
        enableTrueClientIp?: pulumi.Input<boolean>;
        /**
         * — (Optional) The value for the Hostname header sent to origin. (default: `ORIGIN_HOSTNAME`).
         */
        forwardHostname?: pulumi.Input<string>;
        /**
         * — (Required) The origin hostname.
         */
        hostname: pulumi.Input<string>;
        /**
         * — (Optional) The origin port to connect to (default: 80).
         */
        port?: pulumi.Input<number>;
    }

    export interface PropertyRulesRule {
        behaviors?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleBehavior>[]>;
        criteriaMatch?: pulumi.Input<string>;
        isSecure?: pulumi.Input<boolean>;
        rules?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRule>[]>;
        variables?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleVariable>[]>;
    }

    export interface PropertyRulesRuleBehavior {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleBehaviorOption>[]>;
    }

    export interface PropertyRulesRuleBehaviorOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRule {
        behaviors?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleBehavior>[]>;
        comment?: pulumi.Input<string>;
        criterias?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleCriteria>[]>;
        criteriaMatch?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        rules?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRule>[]>;
    }

    export interface PropertyRulesRuleRuleBehavior {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleBehaviorOption>[]>;
    }

    export interface PropertyRulesRuleRuleBehaviorOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleCriteria {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleCriteriaOption>[]>;
    }

    export interface PropertyRulesRuleRuleCriteriaOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRule {
        behaviors?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleBehavior>[]>;
        comment?: pulumi.Input<string>;
        criterias?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleCriteria>[]>;
        criteriaMatch?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        rules?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRule>[]>;
    }

    export interface PropertyRulesRuleRuleRuleBehavior {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleBehaviorOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleBehaviorOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRuleCriteria {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleCriteriaOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleCriteriaOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRule {
        behaviors?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleBehavior>[]>;
        comment?: pulumi.Input<string>;
        criterias?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleCriteria>[]>;
        criteriaMatch?: pulumi.Input<string>;
        name: pulumi.Input<string>;
        rules?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleRule>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleBehavior {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleBehaviorOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleBehaviorOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleCriteria {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleCriteriaOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleCriteriaOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleRule {
        behaviors?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleRuleBehavior>[]>;
        comment?: pulumi.Input<string>;
        criterias?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleRuleCriteria>[]>;
        criteriaMatch?: pulumi.Input<string>;
        name: pulumi.Input<string>;
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleBehavior {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleRuleBehaviorOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleBehaviorOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleCriteria {
        name: pulumi.Input<string>;
        options?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyRulesRuleRuleRuleRuleRuleCriteriaOption>[]>;
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleCriteriaOption {
        key: pulumi.Input<string>;
        value?: pulumi.Input<string>;
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PropertyRulesRuleVariable {
        description?: pulumi.Input<string>;
        hidden: pulumi.Input<boolean>;
        name: pulumi.Input<string>;
        sensitive: pulumi.Input<boolean>;
        value?: pulumi.Input<string>;
    }

    export interface PropertyVariablesVariable {
        variables?: pulumi.Input<pulumi.Input<inputs.Properties.PropertyVariablesVariableVariable>[]>;
    }

    export interface PropertyVariablesVariableVariable {
        /**
         * — (Optional) A human-readable description
         */
        description?: pulumi.Input<string>;
        /**
         * — (Optional) Whether to hide the variable when debugging requests
         */
        hidden: pulumi.Input<boolean>;
        /**
         * — (Required) The name of the variable.
         */
        name: pulumi.Input<string>;
        /**
         * — (Optional) Whether to obscure the value when debugging requests
         */
        sensitive: pulumi.Input<boolean>;
        /**
         * — (Required) The default value to assign to the variable
         */
        value?: pulumi.Input<string>;
    }
}

export namespace TrafficManagement {
    export interface GtmASmapAssignment {
        /**
         * — (List)
         */
        asNumbers: pulumi.Input<pulumi.Input<number>[]>;
        datacenterId: pulumi.Input<number>;
        nickname: pulumi.Input<string>;
    }

    export interface GtmASmapDefaultDatacenter {
        datacenterId: pulumi.Input<number>;
        nickname?: pulumi.Input<string>;
    }

    export interface GtmCidrmapAssignment {
        /**
         * — (List)
         */
        blocks?: pulumi.Input<pulumi.Input<string>[]>;
        datacenterId: pulumi.Input<number>;
        nickname: pulumi.Input<string>;
    }

    export interface GtmCidrmapDefaultDatacenter {
        datacenterId: pulumi.Input<number>;
        nickname?: pulumi.Input<string>;
    }

    export interface GtmDatacenterDefaultLoadObject {
        loadObject?: pulumi.Input<string>;
        loadObjectPort?: pulumi.Input<number>;
        /**
         * — (List)
         * * `city`
         * * `cloneOf`
         */
        loadServers?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GtmGeomapAssignment {
        /**
         * — (List)
         */
        countries?: pulumi.Input<pulumi.Input<string>[]>;
        datacenterId: pulumi.Input<number>;
        nickname: pulumi.Input<string>;
    }

    export interface GtmGeomapDefaultDatacenter {
        datacenterId: pulumi.Input<number>;
        nickname?: pulumi.Input<string>;
    }

    export interface GtmPropertyLivenessTest {
        /**
         * — (Boolean)
         */
        answersRequired?: pulumi.Input<boolean>;
        /**
         * — (Boolean)
         * * `errorPenalty`
         */
        disableNonstandardPortWarning?: pulumi.Input<boolean>;
        /**
         * — (Boolean)
         */
        disabled?: pulumi.Input<boolean>;
        errorPenalty?: pulumi.Input<number>;
        /**
         * — (Boolean)
         */
        httpError3xx?: pulumi.Input<boolean>;
        /**
         * — (Boolean)
         */
        httpError4xx?: pulumi.Input<boolean>;
        /**
         * — (Boolean)
         */
        httpError5xx?: pulumi.Input<boolean>;
        /**
         * — (multiple allowed)
         * `name`
         * `value`
         */
        httpHeaders?: pulumi.Input<pulumi.Input<inputs.TrafficManagement.GtmPropertyLivenessTestHttpHeader>[]>;
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name: pulumi.Input<string>;
        /**
         * — (Boolean)
         */
        peerCertificateVerification?: pulumi.Input<boolean>;
        /**
         * — (Boolean)
         * * `requestString`
         * * `resourceType`
         * * `responseString`
         * * `sslClientCertificate`
         * * `sslClientPrivateKey`
         * * `testObject`
         * * `testObjectPassword`
         * * `testObjectPort`
         * * `testObjectUsername`
         * * `timeoutPenalty`
         */
        recursionRequested?: pulumi.Input<boolean>;
        requestString?: pulumi.Input<string>;
        resourceType?: pulumi.Input<string>;
        responseString?: pulumi.Input<string>;
        sslClientCertificate?: pulumi.Input<string>;
        sslClientPrivateKey?: pulumi.Input<string>;
        testInterval: pulumi.Input<number>;
        testObject: pulumi.Input<string>;
        testObjectPassword?: pulumi.Input<string>;
        testObjectPort?: pulumi.Input<number>;
        testObjectProtocol: pulumi.Input<string>;
        testObjectUsername?: pulumi.Input<string>;
        testTimeout: pulumi.Input<number>;
        timeoutPenalty?: pulumi.Input<number>;
    }

    export interface GtmPropertyLivenessTestHttpHeader {
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name?: pulumi.Input<string>;
        value?: pulumi.Input<string>;
    }

    export interface GtmPropertyStaticRrSet {
        /**
         * — (List)
         */
        rdatas?: pulumi.Input<pulumi.Input<string>[]>;
        ttl?: pulumi.Input<number>;
        /**
         * — Property type  
         * * `scoreAggregationType`
         */
        type?: pulumi.Input<string>;
    }

    export interface GtmPropertyTrafficTarget {
        datacenterId?: pulumi.Input<number>;
        /**
         * — (Boolean)
         * * `weight`
         */
        enabled?: pulumi.Input<boolean>;
        handoutCname?: pulumi.Input<string>;
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name?: pulumi.Input<string>;
        /**
         * — (List)
         */
        servers?: pulumi.Input<pulumi.Input<string>[]>;
        weight?: pulumi.Input<number>;
    }

    export interface GtmResourceResourceInstance {
        datacenterId: pulumi.Input<number>;
        loadObject?: pulumi.Input<string>;
        loadObjectPort?: pulumi.Input<number>;
        /**
         * — (List)
         */
        loadServers?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * — (Boolean)
         * * `hostHeader`
         * * `leastSquaresDecay`
         * * `upperBound`
         * * `description`
         * * `leaderString`
         * * `constrainedProperty`
         * * `loadImbalancePercent`
         * * `maxUMultiplicativeIncrement`
         * * `decayRate`
         */
        useDefaultLoadObject?: pulumi.Input<boolean>;
    }
}
