// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface CpsDvEnrollmentAdminContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface CpsDvEnrollmentCsr {
    city: string;
    countryCode: string;
    organization: string;
    organizationalUnit: string;
    state: string;
}

export interface CpsDvEnrollmentDnsChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentHttpChallenge {
    domain: string;
    fullPath: string;
    responseBody: string;
}

export interface CpsDvEnrollmentNetworkConfiguration {
    clientMutualAuthentication?: outputs.CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication;
    cloneDnsNames?: boolean;
    disallowedTlsVersions?: string[];
    geography: string;
    mustHaveCiphers?: string;
    ocspStapling?: string;
    preferredCiphers?: string;
    quicEnabled?: boolean;
}

export interface CpsDvEnrollmentNetworkConfigurationClientMutualAuthentication {
    ocspEnabled?: boolean;
    sendCaListToClient?: boolean;
    setId?: string;
}

export interface CpsDvEnrollmentOrganization {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    name: string;
    phone: string;
    postalCode: string;
    region: string;
}

export interface CpsDvEnrollmentTechContact {
    addressLineOne: string;
    addressLineTwo?: string;
    city: string;
    countryCode: string;
    email: string;
    firstName: string;
    lastName: string;
    organization: string;
    phone: string;
    postalCode: string;
    region: string;
    title?: string;
}

export interface DnsZoneTsigKey {
    algorithm: string;
    name: string;
    secret: string;
}

export interface GetContractsContract {
    contractId: string;
    contractTypeName: string;
}

export interface GetGroupsGroup {
    contractIds: string[];
    groupId: string;
    groupName: string;
    parentGroupId: string;
}

export interface GetPropertiesProperty {
    contractId: string;
    groupId: string;
    latestVersion: number;
    note: string;
    productId: string;
    productionVersion: number;
    propertyId: string;
    propertyName: string;
    ruleFormat: string;
    stagingVersion: number;
}

export interface GetPropertyHostnamesHostname {
    certProvisioningType: string;
    certStatuses: outputs.GetPropertyHostnamesHostnameCertStatus[];
    cnameFrom: string;
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface GetPropertyHostnamesHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface GetPropertyProductsProduct {
    productId: string;
    productName: string;
}

export interface GetPropertyRulesTemplateVariable {
    name: string;
    type?: string;
    value: string;
}

export interface GtmAsmapAssignment {
    asNumbers: number[];
    datacenterId: number;
    nickname: string;
}

export interface GtmAsmapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmCidrmapAssignment {
    blocks?: string[];
    datacenterId: number;
    nickname: string;
}

export interface GtmCidrmapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmDatacenterDefaultLoadObject {
    loadObject?: string;
    loadObjectPort?: number;
    loadServers?: string[];
}

export interface GtmGeomapAssignment {
    countries?: string[];
    datacenterId: number;
    nickname: string;
}

export interface GtmGeomapDefaultDatacenter {
    datacenterId: number;
    nickname?: string;
}

export interface GtmPropertyLivenessTest {
    answersRequired?: boolean;
    disableNonstandardPortWarning?: boolean;
    disabled?: boolean;
    errorPenalty?: number;
    httpError3xx?: boolean;
    httpError4xx?: boolean;
    httpError5xx?: boolean;
    httpHeaders?: outputs.GtmPropertyLivenessTestHttpHeader[];
    name: string;
    peerCertificateVerification?: boolean;
    recursionRequested?: boolean;
    requestString?: string;
    resourceType?: string;
    responseString?: string;
    sslClientCertificate?: string;
    sslClientPrivateKey?: string;
    testInterval: number;
    testObject: string;
    testObjectPassword?: string;
    testObjectPort?: number;
    testObjectProtocol: string;
    testObjectUsername?: string;
    testTimeout: number;
    timeoutPenalty?: number;
}

export interface GtmPropertyLivenessTestHttpHeader {
    name?: string;
    value?: string;
}

export interface GtmPropertyStaticRrSet {
    rdatas?: string[];
    ttl?: number;
    type?: string;
}

export interface GtmPropertyTrafficTarget {
    datacenterId?: number;
    enabled?: boolean;
    handoutCname?: string;
    name?: string;
    servers?: string[];
    weight?: number;
}

export interface GtmResourceResourceInstance {
    datacenterId: number;
    loadObject?: string;
    loadObjectPort?: number;
    loadServers?: string[];
    useDefaultLoadObject?: boolean;
}

export interface PropertyActivationRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyActivationRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyHostname {
    certProvisioningType: string;
    certStatuses: outputs.PropertyHostnameCertStatus[];
    cnameFrom: string;
    cnameTo: string;
    cnameType: string;
    edgeHostnameId: string;
}

export interface PropertyHostnameCertStatus {
    hostname: string;
    productionStatus: string;
    stagingStatus: string;
    target: string;
}

export interface PropertyOrigin {
    cacheKeyHostname?: string;
    compress?: boolean;
    enableTrueClientIp?: boolean;
    forwardHostname?: string;
    hostname?: string;
    port?: number;
}

export interface PropertyRuleError {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyRuleWarning {
    behaviorName?: string;
    detail?: string;
    errorLocation?: string;
    instance?: string;
    statusCode?: number;
    title?: string;
    type?: string;
}

export interface PropertyVariablesVariable {
    variables?: outputs.PropertyVariablesVariableVariable[];
}

export interface PropertyVariablesVariableVariable {
    description?: string;
    hidden: boolean;
    name: string;
    sensitive: boolean;
    value?: string;
}

export namespace config {
    export interface Appsecs {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Config {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Dns {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Gtm {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Networks {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

    export interface Property {
        accessToken?: string;
        accountKey?: string;
        clientSecret?: string;
        clientToken?: string;
        host?: string;
        maxBody?: number;
    }

}

export namespace edgedns {
    export interface DnsZoneTsigKey {
        algorithm: string;
        name: string;
        secret: string;
    }

}

export namespace properties {
    export interface PropertyActivationRuleError {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyActivationRuleWarning {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyHostname {
        certProvisioningType: string;
        certStatuses: outputs.properties.PropertyHostnameCertStatus[];
        cnameFrom: string;
        cnameTo: string;
        cnameType: string;
        edgeHostnameId: string;
    }

    export interface PropertyHostnameCertStatus {
        hostname: string;
        productionStatus: string;
        stagingStatus: string;
        target: string;
    }

    export interface PropertyOrigin {
        cacheKeyHostname?: string;
        compress?: boolean;
        enableTrueClientIp?: boolean;
        forwardHostname?: string;
        hostname?: string;
        port?: number;
    }

    export interface PropertyRuleError {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyRuleWarning {
        behaviorName?: string;
        detail?: string;
        errorLocation?: string;
        instance?: string;
        statusCode?: number;
        title?: string;
        type?: string;
    }

    export interface PropertyVariablesVariable {
        variables?: outputs.properties.PropertyVariablesVariableVariable[];
    }

    export interface PropertyVariablesVariableVariable {
        description?: string;
        hidden: boolean;
        name: string;
        sensitive: boolean;
        value?: string;
    }

}

export namespace trafficmanagement {
    export interface GtmASmapAssignment {
        asNumbers: number[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmASmapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmCidrmapAssignment {
        blocks?: string[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmCidrmapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmDatacenterDefaultLoadObject {
        loadObject?: string;
        loadObjectPort?: number;
        loadServers?: string[];
    }

    export interface GtmGeomapAssignment {
        countries?: string[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmGeomapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmPropertyLivenessTest {
        answersRequired?: boolean;
        disableNonstandardPortWarning?: boolean;
        disabled?: boolean;
        errorPenalty?: number;
        httpError3xx?: boolean;
        httpError4xx?: boolean;
        httpError5xx?: boolean;
        httpHeaders?: outputs.trafficmanagement.GtmPropertyLivenessTestHttpHeader[];
        name: string;
        peerCertificateVerification?: boolean;
        recursionRequested?: boolean;
        requestString?: string;
        resourceType?: string;
        responseString?: string;
        sslClientCertificate?: string;
        sslClientPrivateKey?: string;
        testInterval: number;
        testObject: string;
        testObjectPassword?: string;
        testObjectPort?: number;
        testObjectProtocol: string;
        testObjectUsername?: string;
        testTimeout: number;
        timeoutPenalty?: number;
    }

    export interface GtmPropertyLivenessTestHttpHeader {
        name?: string;
        value?: string;
    }

    export interface GtmPropertyStaticRrSet {
        rdatas?: string[];
        ttl?: number;
        type?: string;
    }

    export interface GtmPropertyTrafficTarget {
        datacenterId?: number;
        enabled?: boolean;
        handoutCname?: string;
        name?: string;
        servers?: string[];
        weight?: number;
    }

    export interface GtmResourceResourceInstance {
        datacenterId: number;
        loadObject?: string;
        loadObjectPort?: number;
        loadServers?: string[];
        useDefaultLoadObject?: boolean;
    }

}
