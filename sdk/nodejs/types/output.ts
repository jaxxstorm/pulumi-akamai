// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";


export namespace Properties {
    export interface GetPropertyRulesRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: outputs.Properties.GetPropertyRulesRuleBehavior[];
        criteriaMatch?: string;
        /**
         * — (Optional) Whether the property is a secure (Enhanced TLS) property or not (top-level only).
         */
        isSecure?: boolean;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: outputs.Properties.GetPropertyRulesRuleRule[];
        variables?: outputs.Properties.GetPropertyRulesRuleVariable[];
    }

    export interface GetPropertyRulesRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: outputs.Properties.GetPropertyRulesRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: outputs.Properties.GetPropertyRulesRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: outputs.Properties.GetPropertyRulesRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: outputs.Properties.GetPropertyRulesRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: outputs.Properties.GetPropertyRulesRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: outputs.Properties.GetPropertyRulesRuleRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) Child rules (may be nested five levels deep).
         */
        rules?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleRule[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRule {
        /**
         * — (Optional) One or more behaviors to apply to requests that match.
         */
        behaviors?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleBehavior[];
        comment?: string;
        /**
         * — (Optional) One or more criteria to match requests on.
         */
        criterias?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleBehavior {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleBehaviorOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleBehaviorOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleCriteria {
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        /**
         * — (Optional) One or more options for the behavior.
         */
        options?: outputs.Properties.GetPropertyRulesRuleRuleRuleRuleRuleCriteriaOption[];
    }

    export interface GetPropertyRulesRuleRuleRuleRuleRuleCriteriaOption {
        /**
         * — (Required) The option name.
         */
        key: string;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
        /**
         * — (Optional) An array of values for the option.
         */
        values?: string[];
    }

    export interface GetPropertyRulesRuleVariable {
        description?: string;
        hidden: boolean;
        /**
         * — (Required) The name of the behavior.
         */
        name: string;
        sensitive: boolean;
        /**
         * — (Optional) A single value for the option.
         */
        value?: string;
    }

    export interface PropertyOrigin {
        /**
         * — (Optional) The hostname uses for the cache key. (default: `ORIGIN_HOSTNAME`).
         */
        cacheKeyHostname?: string;
        /**
         * — (Optional, boolean) Whether origin supports gzip compression (default: `false`).
         */
        compress?: boolean;
        /**
         * — (Optional, boolean) Whether the X-True-Client-IP header should be sent to origin (default: `false`).
         */
        enableTrueClientIp?: boolean;
        /**
         * — (Optional) The value for the Hostname header sent to origin. (default: `ORIGIN_HOSTNAME`).
         */
        forwardHostname?: string;
        /**
         * — (Required) The origin hostname.
         */
        hostname: string;
        /**
         * — (Optional) The origin port to connect to (default: 80).
         */
        port?: number;
    }

    export interface PropertyRulesRule {
        behaviors?: outputs.Properties.PropertyRulesRuleBehavior[];
        criteriaMatch?: string;
        isSecure?: boolean;
        rules?: outputs.Properties.PropertyRulesRuleRule[];
        variables?: outputs.Properties.PropertyRulesRuleVariable[];
    }

    export interface PropertyRulesRuleBehavior {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleBehaviorOption[];
    }

    export interface PropertyRulesRuleBehaviorOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRule {
        behaviors?: outputs.Properties.PropertyRulesRuleRuleBehavior[];
        comment?: string;
        criterias?: outputs.Properties.PropertyRulesRuleRuleCriteria[];
        criteriaMatch?: string;
        name: string;
        rules?: outputs.Properties.PropertyRulesRuleRuleRule[];
    }

    export interface PropertyRulesRuleRuleBehavior {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleBehaviorOption[];
    }

    export interface PropertyRulesRuleRuleBehaviorOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleCriteria {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleCriteriaOption[];
    }

    export interface PropertyRulesRuleRuleCriteriaOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRule {
        behaviors?: outputs.Properties.PropertyRulesRuleRuleRuleBehavior[];
        comment?: string;
        criterias?: outputs.Properties.PropertyRulesRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        name: string;
        rules?: outputs.Properties.PropertyRulesRuleRuleRuleRule[];
    }

    export interface PropertyRulesRuleRuleRuleBehavior {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleBehaviorOption[];
    }

    export interface PropertyRulesRuleRuleRuleBehaviorOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRuleCriteria {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleCriteriaOption[];
    }

    export interface PropertyRulesRuleRuleRuleCriteriaOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRuleRule {
        behaviors?: outputs.Properties.PropertyRulesRuleRuleRuleRuleBehavior[];
        comment?: string;
        criterias?: outputs.Properties.PropertyRulesRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        name: string;
        rules?: outputs.Properties.PropertyRulesRuleRuleRuleRuleRule[];
    }

    export interface PropertyRulesRuleRuleRuleRuleBehavior {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleRuleBehaviorOption[];
    }

    export interface PropertyRulesRuleRuleRuleRuleBehaviorOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRuleRuleCriteria {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleRuleCriteriaOption[];
    }

    export interface PropertyRulesRuleRuleRuleRuleCriteriaOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRuleRuleRule {
        behaviors?: outputs.Properties.PropertyRulesRuleRuleRuleRuleRuleBehavior[];
        comment?: string;
        criterias?: outputs.Properties.PropertyRulesRuleRuleRuleRuleRuleCriteria[];
        criteriaMatch?: string;
        name: string;
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleBehavior {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleRuleRuleBehaviorOption[];
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleBehaviorOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleCriteria {
        name: string;
        options?: outputs.Properties.PropertyRulesRuleRuleRuleRuleRuleCriteriaOption[];
    }

    export interface PropertyRulesRuleRuleRuleRuleRuleCriteriaOption {
        key: string;
        value?: string;
        values?: string[];
    }

    export interface PropertyRulesRuleVariable {
        description?: string;
        hidden: boolean;
        name: string;
        sensitive: boolean;
        value?: string;
    }

    export interface PropertyVariablesVariable {
        variables?: outputs.Properties.PropertyVariablesVariableVariable[];
    }

    export interface PropertyVariablesVariableVariable {
        /**
         * — (Optional) A human-readable description
         */
        description?: string;
        /**
         * — (Optional) Whether to hide the variable when debugging requests
         */
        hidden: boolean;
        /**
         * — (Required) The name of the variable.
         */
        name: string;
        /**
         * — (Optional) Whether to obscure the value when debugging requests
         */
        sensitive: boolean;
        /**
         * — (Required) The default value to assign to the variable
         */
        value?: string;
    }
}

export namespace TrafficManagement {
    export interface GtmASmapAssignment {
        /**
         * — (List)
         */
        asNumbers: number[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmASmapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmCidrmapAssignment {
        /**
         * — (List)
         */
        blocks?: string[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmCidrmapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmDatacenterDefaultLoadObject {
        loadObject?: string;
        loadObjectPort?: number;
        /**
         * — (List)
         * * `city`
         * * `cloneOf`
         */
        loadServers?: string[];
    }

    export interface GtmGeomapAssignment {
        /**
         * — (List)
         */
        countries?: string[];
        datacenterId: number;
        nickname: string;
    }

    export interface GtmGeomapDefaultDatacenter {
        datacenterId: number;
        nickname?: string;
    }

    export interface GtmPropertyLivenessTest {
        /**
         * — (Boolean)
         */
        answersRequired?: boolean;
        /**
         * — (Boolean)
         * * `errorPenalty`
         */
        disableNonstandardPortWarning?: boolean;
        /**
         * — (Boolean)
         */
        disabled?: boolean;
        errorPenalty?: number;
        /**
         * — (Boolean)
         */
        httpError3xx?: boolean;
        /**
         * — (Boolean)
         */
        httpError4xx?: boolean;
        /**
         * — (Boolean)
         */
        httpError5xx?: boolean;
        /**
         * — (multiple allowed)
         * `name`
         * `value`
         */
        httpHeaders?: outputs.TrafficManagement.GtmPropertyLivenessTestHttpHeader[];
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name: string;
        /**
         * — (Boolean)
         */
        peerCertificateVerification?: boolean;
        /**
         * — (Boolean)
         * * `requestString`
         * * `resourceType`
         * * `responseString`
         * * `sslClientCertificate`
         * * `sslClientPrivateKey`
         * * `testObject`
         * * `testObjectPassword`
         * * `testObjectPort`
         * * `testObjectUsername`
         * * `timeoutPenalty`
         */
        recursionRequested?: boolean;
        requestString?: string;
        resourceType?: string;
        responseString?: string;
        sslClientCertificate?: string;
        sslClientPrivateKey?: string;
        testInterval: number;
        testObject: string;
        testObjectPassword?: string;
        testObjectPort?: number;
        testObjectProtocol: string;
        testObjectUsername?: string;
        testTimeout: number;
        timeoutPenalty?: number;
    }

    export interface GtmPropertyLivenessTestHttpHeader {
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name?: string;
        value?: string;
    }

    export interface GtmPropertyStaticRrSet {
        /**
         * — (List)
         */
        rdatas?: string[];
        ttl?: number;
        /**
         * — Property type  
         * * `scoreAggregationType`
         */
        type?: string;
    }

    export interface GtmPropertyTrafficTarget {
        datacenterId?: number;
        /**
         * — (Boolean)
         * * `weight`
         */
        enabled?: boolean;
        handoutCname?: string;
        /**
         * — Liveness test name
         * * `testInterval`
         * * `testObjectProtocol`
         * * `testTimeout`
         */
        name?: string;
        /**
         * — (List)
         */
        servers?: string[];
        weight?: number;
    }

    export interface GtmResourceResourceInstance {
        datacenterId: number;
        loadObject?: string;
        loadObjectPort?: number;
        /**
         * — (List)
         */
        loadServers?: string[];
        /**
         * — (Boolean)
         * * `hostHeader`
         * * `leastSquaresDecay`
         * * `upperBound`
         * * `description`
         * * `leaderString`
         * * `constrainedProperty`
         * * `loadImbalancePercent`
         * * `maxUMultiplicativeIncrement`
         * * `decayRate`
         */
        useDefaultLoadObject?: boolean;
    }
}
