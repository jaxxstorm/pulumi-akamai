// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use the `akamai.GtmProperty` resource provides the resource for creating, configuring and importing a GTM property, a set of IP addresses or CNAMEs that GTM provides in response to DNS queries based on a set of rules.
 *
 * > **Note** Import requires an ID with this format: `existingDomainName`:`existingPropertyName`.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const demoProperty = new akamai.GtmProperty("demo_property", {
 *     domain: "demo_domain.akadns.net",
 *     handoutLimit: 5,
 *     handoutMode: "normal",
 *     scoreAggregationType: "median",
 *     trafficTargets: [{
 *         datacenterId: 3131,
 *     }],
 *     type: "weighted-round-robin",
 * });
 * ```
 * ## Argument reference
 *
 * This resource supports these arguments:
 *
 * * `domain` - (Required) DNS name for the GTM Domain set that includes this Property.
 * * `name` - (Required) DNS name for a collection of IP address or CNAME responses. The value, together with the GTM domainName, forms the Property’s hostname.
 * * `type` - (Required) Specifies the load balancing behavior for the property. Either failover, geographic, cidrmapping, weighted-round-robin, weighted-hashed, weighted-round-robin-load-feedback, qtr, or performance.
 * * `scoreAggregationType` - (Required) Specifies how GTM aggregates liveness test scores across different tests, when multiple tests are configured.
 * * `handoutLimit` - (Required) Indicates the limit for the number of live IPs handed out to a DNS request.
 * * `handoutMode` - (Required) Specifies how IPs are returned when more than one IP is alive and available.
 * * `trafficTarget` - (Required) Contains information about where to direct data center traffic. You can have multiple `trafficTarget` arguments. If used, requires these arguments:
 *   * `datacenterId` - (Required) A unique identifier for an existing data center in the domain.
 *   * `enabled` - (Required) A boolean indicating whether the traffic target is used. You can also omit the traffic target, which has the same result as the false value.
 *   * `weight` - (Required) Specifies the traffic weight for the target.
 *   * `servers` - (Required) (List) Identifies the IP address or the hostnames of the servers.
 *   * `name` - (Required) An alternative label for the traffic target.
 *   * `handoutCname` - (Required) Specifies an optional data center for the property. Used when there are no servers configured for the property.
 * * `livenessTest` - (Optional) Contains information about the liveness tests, which are run periodically to determine whether your servers respond to requests. You can have multiple `livenessTest` arguments. If used, requires these arguments:
 *   * `name` - (Optional) A descriptive name for the liveness test.
 *   * `testInterval` - (Optional) Indicates the interval at which the liveness test is run, in seconds. Requires a minimum of 10 seconds.
 *   * `testObjectProtocol` - (Optional) Specifies the test protocol. Possible values include `DNS`, `HTTP`, `HTTPS`, `FTP`, `POP`, `POPS`, `SMTP`, `SMTPS`, `TCP`, or `TCPS`.
 *   * `testTimeout` - (Optional) Specifies the duration of the liveness test before it fails. The range is from 0.001 to 60 seconds.
 *   * `answersRequired` - (Optional) If `testObjectProtocol` is DNS, enter a boolean value if an answer is needed for the DNS query to be successful.
 *   * `disabled` - (Optional) A boolean indicating whether the liveness test is disabled. When disabled, GTM stops running the test, effectively treating it as if it no longer exists.
 *   * `disableNonstandardPortWarning` - (Optional) A boolean that if set to `true`, disables warnings when non-standard ports are used.
 *   * `errorPenalty` - (Optional) Specifies the score that’s reported if the liveness test encounters an error other than timeout, such as connection refused, and 404.
 *   * `httpHeader` - (Optional) Contains HTTP headers to send if the `testObjectProtocol` is `http` or `https`. You can have multiple `httpHeader` entries. Requires these arguments:
 *     * `name` - Name of HTTP header.
 *     * `value` - Value of HTTP header.
 *   * `httpError3xx` - (Optional) A boolean that if set to `true`, treats a 3xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
 *   * `httpError4xx` - (Optional) A boolean that if set to `true`, treats a 4xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
 *   * `httpError5xx` - (Optional) A boolean that if set to `true`, treats a 5xx HTTP response as a failure if the `testObjectProtocol` is `http`, `https`, or `ftp`.
 *   * `peerCertificateVerification` - (Optional) A boolean that if set to `true`, validates the origin certificate. Applies only to tests with `testObjectProtocol` of https.
 *   * `recursionRequested` - (Optional) A boolean indicating whether the `testObjectProtocol` is DNS. The DNS query is recursive.
 *   * `requestString` - (Optional) Specifies a request string.
 *   * `resourceType` - (Optional) Specifies the query type, if `testObjectProtocol` is DNS.
 *   * `responseString` - (Optional) Specifies a response string.
 *   * `sslClientCertificate` - (Optional) Indicates a Base64-encoded certificate. SSL client certificates are available for livenessTests that use secure protocols.
 *   * `sslClientPrivateKey` - (Optional) Indicates a Base64-encoded private key. The private key used to generate or request a certificate for livenessTests can’t have a passphrase nor be used for any other purpose.
 *   * `testObject` - (Optional) Specifies the static text that acts as a stand-in for the data that you’re sending on the network.
 *   * `testObjectPassword` - (Optional) Specifies the test object’s password. It is required if testObjectProtocol is ftp.
 *   * `testObjectPort` - (Optional) Specifies the port number for the testObject.
 *   * `testObjectUsername` - (Optional) A descriptive name for the testObject.
 *   * `timeoutPenalty`- (Optional) Specifies the score to be reported if the liveness test times out.
 * * `waitOnComplete` - (Optional) A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
 * * `failoverDelay` - (Optional) Specifies the failover delay in seconds.
 * * `failbackDelay` - (Optional) Specifies the failback delay in seconds.
 * * `ipv6` - (Optional) A boolean that indicates the type of IP address handed out by a GTM property.
 * * `stickinessBonusPercentage` - (Optional) Specifies a percentage used to configure data center affinity.
 * * `stickinessBonusConstant` - (Optional) Specifies a constant used to configure data center affinity.
 * * `healthThreshold` - (Optional) Configures a cutoff value that is computed from the median scores.
 * * `useComputedTargets` - (Optional) For load-feedback domains only, a boolean that indicates whether you want GTM to automatically compute target load.
 * * `backupIp` - Specifies a backup IP. When GTM declares that all of the targets are down, the backupIP is handed out.
 * * `balanceByDownloadScore` - (Optional) A boolean that indicates whether download score based load balancing is enabled.
 * * `unreachableThreshold` - (Optional) For performance domains, this specifies a penalty value that’s added to liveness test scores when data centers have an aggregated loss fraction higher than this value.
 * * `healthMultiplier` - (Optional) Configures a cutoff value that is computed from the median scores.
 * * `dynamicTtl` - (Optional) Indicates the TTL in seconds for records that might change dynamically based on liveness and load balancing such as A and AAAA records, and CNAMEs.
 * * `maxUnreachablePenalty` - (Optional) For performance domains, this specifies a penalty value that’s added to liveness test scores when data centers show an aggregated loss fraction higher than the penalty value.
 * * `mapName` - (Optional) A descriptive label for a GeographicMap or a CidrMap that’s required if the property is either geographic or cidrmapping, in which case mapName needs to reference either an existing GeographicMap or CidrMap in the same domain.
 * * `loadImbalancePercentage` - (Optional) Indicates the percent of load imbalance factor (LIF) for the property.
 * * `healthMax` - (Optional) Defines the absolute limit beyond which IPs are declared unhealthy.
 * * `cname` - (Optional) Indicates the fully qualified name aliased to a particular property.
 * * `comments` - (Optional) A descriptive note about changes to the domain. The maximum is 4000 characters.
 * * `ghostDemandReporting` - (Optional) Use load estimates from Akamai Ghost utilization messages.
 * * `minLiveFraction` - (Optional) Specifies what fraction of the servers need to respond to requests so GTM considers the data center up and able to receive traffic.
 * * `staticRrSet` - (Optional) Contains static record sets. You can have multiple `staticRrSet` entries. Requires these arguments:
 *   * `type` - (Optional) The record type.
 *   * `ttl` - (Optional) The number of seconds that this record should live in a resolver’s cache before being refetched.
 *   * `rdata` - (Optional) (List) An array of data strings, representing multiple records within a set.
 *
 * ## Attribute reference
 *
 * This resource returns these computed attributes in the state file:
 *
 * * `weightedHashBitsForIpv4`
 * * `weightedHashBitsForIpv6`
 *
 * ## Schema reference
 *
 * You can download the GTM Property backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#property) page.
 */
export class GtmProperty extends pulumi.CustomResource {
    /**
     * Get an existing GtmProperty resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmPropertyState, opts?: pulumi.CustomResourceOptions): GtmProperty {
        return new GtmProperty(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmProperty:GtmProperty';

    /**
     * Returns true if the given object is an instance of GtmProperty.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmProperty {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmProperty.__pulumiType;
    }

    public readonly backupCname!: pulumi.Output<string | undefined>;
    public readonly backupIp!: pulumi.Output<string | undefined>;
    public readonly balanceByDownloadScore!: pulumi.Output<boolean | undefined>;
    public readonly cname!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string>;
    public readonly dynamicTtl!: pulumi.Output<number | undefined>;
    public readonly failbackDelay!: pulumi.Output<number | undefined>;
    public readonly failoverDelay!: pulumi.Output<number | undefined>;
    public readonly ghostDemandReporting!: pulumi.Output<boolean | undefined>;
    public readonly handoutLimit!: pulumi.Output<number>;
    public readonly handoutMode!: pulumi.Output<string>;
    public readonly healthMax!: pulumi.Output<number | undefined>;
    public readonly healthMultiplier!: pulumi.Output<number | undefined>;
    public readonly healthThreshold!: pulumi.Output<number | undefined>;
    public readonly ipv6!: pulumi.Output<boolean | undefined>;
    public readonly livenessTests!: pulumi.Output<outputs.GtmPropertyLivenessTest[] | undefined>;
    public readonly loadImbalancePercentage!: pulumi.Output<number | undefined>;
    public readonly mapName!: pulumi.Output<string | undefined>;
    public readonly maxUnreachablePenalty!: pulumi.Output<number | undefined>;
    public readonly minLiveFraction!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scoreAggregationType!: pulumi.Output<string>;
    public readonly staticRrSets!: pulumi.Output<outputs.GtmPropertyStaticRrSet[] | undefined>;
    public readonly staticTtl!: pulumi.Output<number | undefined>;
    public readonly stickinessBonusConstant!: pulumi.Output<number | undefined>;
    public readonly stickinessBonusPercentage!: pulumi.Output<number | undefined>;
    public readonly trafficTargets!: pulumi.Output<outputs.GtmPropertyTrafficTarget[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly unreachableThreshold!: pulumi.Output<number | undefined>;
    public readonly useComputedTargets!: pulumi.Output<boolean | undefined>;
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly weightedHashBitsForIpv4!: pulumi.Output<number>;
    public /*out*/ readonly weightedHashBitsForIpv6!: pulumi.Output<number>;

    /**
     * Create a GtmProperty resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmPropertyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmPropertyArgs | GtmPropertyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GtmPropertyState | undefined;
            inputs["backupCname"] = state ? state.backupCname : undefined;
            inputs["backupIp"] = state ? state.backupIp : undefined;
            inputs["balanceByDownloadScore"] = state ? state.balanceByDownloadScore : undefined;
            inputs["cname"] = state ? state.cname : undefined;
            inputs["comments"] = state ? state.comments : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["dynamicTtl"] = state ? state.dynamicTtl : undefined;
            inputs["failbackDelay"] = state ? state.failbackDelay : undefined;
            inputs["failoverDelay"] = state ? state.failoverDelay : undefined;
            inputs["ghostDemandReporting"] = state ? state.ghostDemandReporting : undefined;
            inputs["handoutLimit"] = state ? state.handoutLimit : undefined;
            inputs["handoutMode"] = state ? state.handoutMode : undefined;
            inputs["healthMax"] = state ? state.healthMax : undefined;
            inputs["healthMultiplier"] = state ? state.healthMultiplier : undefined;
            inputs["healthThreshold"] = state ? state.healthThreshold : undefined;
            inputs["ipv6"] = state ? state.ipv6 : undefined;
            inputs["livenessTests"] = state ? state.livenessTests : undefined;
            inputs["loadImbalancePercentage"] = state ? state.loadImbalancePercentage : undefined;
            inputs["mapName"] = state ? state.mapName : undefined;
            inputs["maxUnreachablePenalty"] = state ? state.maxUnreachablePenalty : undefined;
            inputs["minLiveFraction"] = state ? state.minLiveFraction : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["scoreAggregationType"] = state ? state.scoreAggregationType : undefined;
            inputs["staticRrSets"] = state ? state.staticRrSets : undefined;
            inputs["staticTtl"] = state ? state.staticTtl : undefined;
            inputs["stickinessBonusConstant"] = state ? state.stickinessBonusConstant : undefined;
            inputs["stickinessBonusPercentage"] = state ? state.stickinessBonusPercentage : undefined;
            inputs["trafficTargets"] = state ? state.trafficTargets : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["unreachableThreshold"] = state ? state.unreachableThreshold : undefined;
            inputs["useComputedTargets"] = state ? state.useComputedTargets : undefined;
            inputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
            inputs["weightedHashBitsForIpv4"] = state ? state.weightedHashBitsForIpv4 : undefined;
            inputs["weightedHashBitsForIpv6"] = state ? state.weightedHashBitsForIpv6 : undefined;
        } else {
            const args = argsOrState as GtmPropertyArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.handoutLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handoutLimit'");
            }
            if ((!args || args.handoutMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handoutMode'");
            }
            if ((!args || args.scoreAggregationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scoreAggregationType'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["backupCname"] = args ? args.backupCname : undefined;
            inputs["backupIp"] = args ? args.backupIp : undefined;
            inputs["balanceByDownloadScore"] = args ? args.balanceByDownloadScore : undefined;
            inputs["cname"] = args ? args.cname : undefined;
            inputs["comments"] = args ? args.comments : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["dynamicTtl"] = args ? args.dynamicTtl : undefined;
            inputs["failbackDelay"] = args ? args.failbackDelay : undefined;
            inputs["failoverDelay"] = args ? args.failoverDelay : undefined;
            inputs["ghostDemandReporting"] = args ? args.ghostDemandReporting : undefined;
            inputs["handoutLimit"] = args ? args.handoutLimit : undefined;
            inputs["handoutMode"] = args ? args.handoutMode : undefined;
            inputs["healthMax"] = args ? args.healthMax : undefined;
            inputs["healthMultiplier"] = args ? args.healthMultiplier : undefined;
            inputs["healthThreshold"] = args ? args.healthThreshold : undefined;
            inputs["ipv6"] = args ? args.ipv6 : undefined;
            inputs["livenessTests"] = args ? args.livenessTests : undefined;
            inputs["loadImbalancePercentage"] = args ? args.loadImbalancePercentage : undefined;
            inputs["mapName"] = args ? args.mapName : undefined;
            inputs["maxUnreachablePenalty"] = args ? args.maxUnreachablePenalty : undefined;
            inputs["minLiveFraction"] = args ? args.minLiveFraction : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["scoreAggregationType"] = args ? args.scoreAggregationType : undefined;
            inputs["staticRrSets"] = args ? args.staticRrSets : undefined;
            inputs["staticTtl"] = args ? args.staticTtl : undefined;
            inputs["stickinessBonusConstant"] = args ? args.stickinessBonusConstant : undefined;
            inputs["stickinessBonusPercentage"] = args ? args.stickinessBonusPercentage : undefined;
            inputs["trafficTargets"] = args ? args.trafficTargets : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["unreachableThreshold"] = args ? args.unreachableThreshold : undefined;
            inputs["useComputedTargets"] = args ? args.useComputedTargets : undefined;
            inputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
            inputs["weightedHashBitsForIpv4"] = undefined /*out*/;
            inputs["weightedHashBitsForIpv6"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmProperty:GtmProperty" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(GtmProperty.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmProperty resources.
 */
export interface GtmPropertyState {
    readonly backupCname?: pulumi.Input<string>;
    readonly backupIp?: pulumi.Input<string>;
    readonly balanceByDownloadScore?: pulumi.Input<boolean>;
    readonly cname?: pulumi.Input<string>;
    readonly comments?: pulumi.Input<string>;
    readonly domain?: pulumi.Input<string>;
    readonly dynamicTtl?: pulumi.Input<number>;
    readonly failbackDelay?: pulumi.Input<number>;
    readonly failoverDelay?: pulumi.Input<number>;
    readonly ghostDemandReporting?: pulumi.Input<boolean>;
    readonly handoutLimit?: pulumi.Input<number>;
    readonly handoutMode?: pulumi.Input<string>;
    readonly healthMax?: pulumi.Input<number>;
    readonly healthMultiplier?: pulumi.Input<number>;
    readonly healthThreshold?: pulumi.Input<number>;
    readonly ipv6?: pulumi.Input<boolean>;
    readonly livenessTests?: pulumi.Input<pulumi.Input<inputs.GtmPropertyLivenessTest>[]>;
    readonly loadImbalancePercentage?: pulumi.Input<number>;
    readonly mapName?: pulumi.Input<string>;
    readonly maxUnreachablePenalty?: pulumi.Input<number>;
    readonly minLiveFraction?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly scoreAggregationType?: pulumi.Input<string>;
    readonly staticRrSets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyStaticRrSet>[]>;
    readonly staticTtl?: pulumi.Input<number>;
    readonly stickinessBonusConstant?: pulumi.Input<number>;
    readonly stickinessBonusPercentage?: pulumi.Input<number>;
    readonly trafficTargets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyTrafficTarget>[]>;
    readonly type?: pulumi.Input<string>;
    readonly unreachableThreshold?: pulumi.Input<number>;
    readonly useComputedTargets?: pulumi.Input<boolean>;
    readonly waitOnComplete?: pulumi.Input<boolean>;
    readonly weightedHashBitsForIpv4?: pulumi.Input<number>;
    readonly weightedHashBitsForIpv6?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GtmProperty resource.
 */
export interface GtmPropertyArgs {
    readonly backupCname?: pulumi.Input<string>;
    readonly backupIp?: pulumi.Input<string>;
    readonly balanceByDownloadScore?: pulumi.Input<boolean>;
    readonly cname?: pulumi.Input<string>;
    readonly comments?: pulumi.Input<string>;
    readonly domain: pulumi.Input<string>;
    readonly dynamicTtl?: pulumi.Input<number>;
    readonly failbackDelay?: pulumi.Input<number>;
    readonly failoverDelay?: pulumi.Input<number>;
    readonly ghostDemandReporting?: pulumi.Input<boolean>;
    readonly handoutLimit: pulumi.Input<number>;
    readonly handoutMode: pulumi.Input<string>;
    readonly healthMax?: pulumi.Input<number>;
    readonly healthMultiplier?: pulumi.Input<number>;
    readonly healthThreshold?: pulumi.Input<number>;
    readonly ipv6?: pulumi.Input<boolean>;
    readonly livenessTests?: pulumi.Input<pulumi.Input<inputs.GtmPropertyLivenessTest>[]>;
    readonly loadImbalancePercentage?: pulumi.Input<number>;
    readonly mapName?: pulumi.Input<string>;
    readonly maxUnreachablePenalty?: pulumi.Input<number>;
    readonly minLiveFraction?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly scoreAggregationType: pulumi.Input<string>;
    readonly staticRrSets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyStaticRrSet>[]>;
    readonly staticTtl?: pulumi.Input<number>;
    readonly stickinessBonusConstant?: pulumi.Input<number>;
    readonly stickinessBonusPercentage?: pulumi.Input<number>;
    readonly trafficTargets?: pulumi.Input<pulumi.Input<inputs.GtmPropertyTrafficTarget>[]>;
    readonly type: pulumi.Input<string>;
    readonly unreachableThreshold?: pulumi.Input<number>;
    readonly useComputedTargets?: pulumi.Input<boolean>;
    readonly waitOnComplete?: pulumi.Input<boolean>;
}
