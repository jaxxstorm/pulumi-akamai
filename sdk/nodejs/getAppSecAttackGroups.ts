// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the `akamai.getAppSecAttackGroups` data source to list the action and condition-exception information for an attack
 * group or groups.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: _var.security_configuration,
 * });
 * const attackGroup = configuration.then(configuration => akamai.getAppSecAttackGroups({
 *     configId: configuration.configId,
 *     securityPolicyId: _var.security_policy_id,
 *     attackGroup: _var.attack_group,
 * }));
 * export const attackGroupAction = akamai_appsec_attack_groups.attack_group.attack_group_action;
 * export const conditionException = akamai_appsec_attack_groups.attack_group.condition_exception;
 * export const json = akamai_appsec_attack_groups.attack_group.json;
 * export const outputText = akamai_appsec_attack_groups.attack_group.output_text;
 * ```
 */
export function getAppSecAttackGroups(args: GetAppSecAttackGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecAttackGroupsResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("akamai:index/getAppSecAttackGroups:getAppSecAttackGroups", {
        "attackGroup": args.attackGroup,
        "configId": args.configId,
        "securityPolicyId": args.securityPolicyId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecAttackGroups.
 */
export interface GetAppSecAttackGroupsArgs {
    /**
     * The ID of the attack group to use.
     */
    attackGroup?: string;
    /**
     * The ID of the security configuration to use.
     */
    configId: number;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId: string;
}

/**
 * A collection of values returned by getAppSecAttackGroups.
 */
export interface GetAppSecAttackGroupsResult {
    readonly attackGroup?: string;
    /**
     * The attack group's action, either `alert`, `deny`, or `none`.
     */
    readonly attackGroupAction: string;
    /**
     * The attack group's conditions and exceptions.
     */
    readonly conditionException: string;
    readonly configId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A JSON-formatted list of the action and condition-exception information for the specified attack
     * group. This output is only generated if an attack group is specified.
     */
    readonly json: string;
    /**
     * A tabular display showing, for the specified attack group or groups, the attack group's action and
     * boolean values indicating whether conditions and exceptions are present.
     */
    readonly outputText: string;
    readonly securityPolicyId: string;
}

export function getAppSecAttackGroupsOutput(args: GetAppSecAttackGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSecAttackGroupsResult> {
    return pulumi.output(args).apply(a => getAppSecAttackGroups(a, opts))
}

/**
 * A collection of arguments for invoking getAppSecAttackGroups.
 */
export interface GetAppSecAttackGroupsOutputArgs {
    /**
     * The ID of the attack group to use.
     */
    attackGroup?: pulumi.Input<string>;
    /**
     * The ID of the security configuration to use.
     */
    configId: pulumi.Input<number>;
    /**
     * The ID of the security policy to use.
     */
    securityPolicyId: pulumi.Input<string>;
}
