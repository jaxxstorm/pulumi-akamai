// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `akamai.GtmAsmap` provides the resource for creating, configuring and importing a gtm AS Map to integrate easily with your existing GTM infrastructure to provide a secure, high performance, highly available and scalable solution for Global Traffic Management. Note: Import requires an ID of the format: `existingDomainName`:`existingMapName`
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const demoAsmap = new akamai.GtmAsmap("demo_asmap", {
 *     defaultDatacenter: {
 *         datacenterId: 5400,
 *         nickname: "All Other AS numbers",
 *     },
 *     domain: "demo_domain.akadns.net",
 * });
 * ```
 */
export class GtmAsmap extends pulumi.CustomResource {
    /**
     * Get an existing GtmAsmap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmAsmapState, opts?: pulumi.CustomResourceOptions): GtmAsmap {
        return new GtmAsmap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/gtmAsmap:GtmAsmap';

    /**
     * Returns true if the given object is an instance of GtmAsmap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmAsmap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmAsmap.__pulumiType;
    }

    /**
     * * `datacenterId`
     * * `nickname`
     */
    public readonly assignments!: pulumi.Output<outputs.GtmAsmapAssignment[] | undefined>;
    public readonly defaultDatacenter!: pulumi.Output<outputs.GtmAsmapDefaultDatacenter>;
    /**
     * Domain name
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Resource name
     * * `defaultDatacenter`
     * * `datacenterId`
     * * `nickname`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Wait for transaction to complete
     */
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmAsmap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GtmAsmapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GtmAsmapArgs | GtmAsmapState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GtmAsmapState | undefined;
            inputs["assignments"] = state ? state.assignments : undefined;
            inputs["defaultDatacenter"] = state ? state.defaultDatacenter : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
        } else {
            const args = argsOrState as GtmAsmapArgs | undefined;
            if ((!args || args.defaultDatacenter === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'defaultDatacenter'");
            }
            if ((!args || args.domain === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'domain'");
            }
            inputs["assignments"] = args ? args.assignments : undefined;
            inputs["defaultDatacenter"] = args ? args.defaultDatacenter : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "akamai:trafficmanagement/gtmASmap:GtmASmap" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(GtmAsmap.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmAsmap resources.
 */
export interface GtmAsmapState {
    /**
     * * `datacenterId`
     * * `nickname`
     */
    readonly assignments?: pulumi.Input<pulumi.Input<inputs.GtmAsmapAssignment>[]>;
    readonly defaultDatacenter?: pulumi.Input<inputs.GtmAsmapDefaultDatacenter>;
    /**
     * Domain name
     */
    readonly domain?: pulumi.Input<string>;
    /**
     * Resource name
     * * `defaultDatacenter`
     * * `datacenterId`
     * * `nickname`
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Wait for transaction to complete
     */
    readonly waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmAsmap resource.
 */
export interface GtmAsmapArgs {
    /**
     * * `datacenterId`
     * * `nickname`
     */
    readonly assignments?: pulumi.Input<pulumi.Input<inputs.GtmAsmapAssignment>[]>;
    readonly defaultDatacenter: pulumi.Input<inputs.GtmAsmapDefaultDatacenter>;
    /**
     * Domain name
     */
    readonly domain: pulumi.Input<string>;
    /**
     * Resource name
     * * `defaultDatacenter`
     * * `datacenterId`
     * * `nickname`
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Wait for transaction to complete
     */
    readonly waitOnComplete?: pulumi.Input<boolean>;
}
