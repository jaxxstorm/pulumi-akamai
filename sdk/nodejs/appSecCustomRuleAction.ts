// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `akamai.AppSecCustomRuleAction` resource allows you to associate an action to a custom rule.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Akamai Tools",
 * });
 * const createCustomRuleAction = new akamai.AppSecCustomRuleAction("createCustomRuleAction", {
 *     configId: configuration.then(configuration => configuration.configId),
 *     version: configuration.then(configuration => configuration.latestVersion),
 *     policyId: "crAP_75829",
 *     customRuleId: 12345,
 *     customRuleAction: "alert",
 * });
 * export const customRuleId = createCustomRuleAction.customRuleId;
 * ```
 */
export class AppSecCustomRuleAction extends pulumi.CustomResource {
    /**
     * Get an existing AppSecCustomRuleAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppSecCustomRuleActionState, opts?: pulumi.CustomResourceOptions): AppSecCustomRuleAction {
        return new AppSecCustomRuleAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appSecCustomRuleAction:AppSecCustomRuleAction';

    /**
     * Returns true if the given object is an instance of AppSecCustomRuleAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppSecCustomRuleAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppSecCustomRuleAction.__pulumiType;
    }

    /**
     * The ID of the security configuration to use.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * The action to be taken when the custom rule is invoked. Must be one of the following:
     * * alert
     * * deny
     * * none
     */
    public readonly customRuleAction!: pulumi.Output<string>;
    /**
     * The ID of the custom rule.
     */
    public readonly customRuleId!: pulumi.Output<number>;
    /**
     * The
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The version number of the security configuration to use.
     */
    public readonly version!: pulumi.Output<number>;

    /**
     * Create a AppSecCustomRuleAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppSecCustomRuleActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppSecCustomRuleActionArgs | AppSecCustomRuleActionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AppSecCustomRuleActionState | undefined;
            inputs["configId"] = state ? state.configId : undefined;
            inputs["customRuleAction"] = state ? state.customRuleAction : undefined;
            inputs["customRuleId"] = state ? state.customRuleId : undefined;
            inputs["policyId"] = state ? state.policyId : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AppSecCustomRuleActionArgs | undefined;
            if ((!args || args.configId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.customRuleAction === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'customRuleAction'");
            }
            if ((!args || args.customRuleId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'customRuleId'");
            }
            if ((!args || args.policyId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.version === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'version'");
            }
            inputs["configId"] = args ? args.configId : undefined;
            inputs["customRuleAction"] = args ? args.customRuleAction : undefined;
            inputs["customRuleId"] = args ? args.customRuleId : undefined;
            inputs["policyId"] = args ? args.policyId : undefined;
            inputs["version"] = args ? args.version : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AppSecCustomRuleAction.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppSecCustomRuleAction resources.
 */
export interface AppSecCustomRuleActionState {
    /**
     * The ID of the security configuration to use.
     */
    readonly configId?: pulumi.Input<number>;
    /**
     * The action to be taken when the custom rule is invoked. Must be one of the following:
     * * alert
     * * deny
     * * none
     */
    readonly customRuleAction?: pulumi.Input<string>;
    /**
     * The ID of the custom rule.
     */
    readonly customRuleId?: pulumi.Input<number>;
    /**
     * The
     */
    readonly policyId?: pulumi.Input<string>;
    /**
     * The version number of the security configuration to use.
     */
    readonly version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppSecCustomRuleAction resource.
 */
export interface AppSecCustomRuleActionArgs {
    /**
     * The ID of the security configuration to use.
     */
    readonly configId: pulumi.Input<number>;
    /**
     * The action to be taken when the custom rule is invoked. Must be one of the following:
     * * alert
     * * deny
     * * none
     */
    readonly customRuleAction: pulumi.Input<string>;
    /**
     * The ID of the custom rule.
     */
    readonly customRuleId: pulumi.Input<number>;
    /**
     * The
     */
    readonly policyId: pulumi.Input<string>;
    /**
     * The version number of the security configuration to use.
     */
    readonly version: pulumi.Input<number>;
}
