// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Use the `akamai.getAppSecSecurityPolicy` data source to retrieve information about the security policies associated with a specific security configuration version, or about a specific security policy.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as akamai from "@pulumi/akamai";
 *
 * const configuration = akamai.getAppSecConfiguration({
 *     name: "Akamai Tools",
 * });
 * const securityPolicies = Promise.all([configuration, configuration]).then(([configuration, configuration1]) => akamai.getAppSecSecurityPolicy({
 *     configId: configuration.configId,
 *     version: configuration1.latestVersion,
 * }));
 * export const securityPoliciesList = securityPolicies.then(securityPolicies => securityPolicies.policyLists);
 * export const securityPoliciesText = securityPolicies.then(securityPolicies => securityPolicies.outputText);
 * const specificSecurityPolicy = Promise.all([configuration, configuration]).then(([configuration, configuration1]) => akamai.getAppSecSecurityPolicy({
 *     configId: configuration.configId,
 *     version: configuration1.latestVersion,
 *     name: "APIs",
 * }));
 * export const specificSecurityPolicyId = specificSecurityPolicy.then(specificSecurityPolicy => specificSecurityPolicy.policyId);
 * ```
 */
export function getAppSecSecurityPolicy(args: GetAppSecSecurityPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSecSecurityPolicyResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("akamai:index/getAppSecSecurityPolicy:getAppSecSecurityPolicy", {
        "configId": args.configId,
        "name": args.name,
        "version": args.version,
    }, opts);
}

/**
 * A collection of arguments for invoking getAppSecSecurityPolicy.
 */
export interface GetAppSecSecurityPolicyArgs {
    /**
     * The ID of the security configuration to use.
     */
    readonly configId: number;
    /**
     * The name of the security policy to use. If not supplied, information about all security policies is returned.
     */
    readonly name?: string;
    /**
     * The version number of the security configuration to use.
     */
    readonly version: number;
}

/**
 * A collection of values returned by getAppSecSecurityPolicy.
 */
export interface GetAppSecSecurityPolicyResult {
    readonly configId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    /**
     * A tabular display showing the ID and name of all security policies.
     */
    readonly outputText: string;
    /**
     * The ID of the security policy. Included only if `name` was specified.
     */
    readonly policyId: string;
    /**
     * A list of the IDs of all security policies.
     */
    readonly policyLists: string[];
    readonly version: number;
}
