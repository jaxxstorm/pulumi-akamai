// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * @deprecated akamai.trafficmanagement.GtmDatacenter has been deprecated in favor of akamai.GtmDatacenter
 */
export class GtmDatacenter extends pulumi.CustomResource {
    /**
     * Get an existing GtmDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GtmDatacenterState, opts?: pulumi.CustomResourceOptions): GtmDatacenter {
        pulumi.log.warn("GtmDatacenter is deprecated: akamai.trafficmanagement.GtmDatacenter has been deprecated in favor of akamai.GtmDatacenter")
        return new GtmDatacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:trafficmanagement/gtmDatacenter:GtmDatacenter';

    /**
     * Returns true if the given object is an instance of GtmDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GtmDatacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GtmDatacenter.__pulumiType;
    }

    public readonly city!: pulumi.Output<string | undefined>;
    public readonly cloneOf!: pulumi.Output<number | undefined>;
    public readonly cloudServerHostHeaderOverride!: pulumi.Output<boolean | undefined>;
    public readonly cloudServerTargeting!: pulumi.Output<boolean | undefined>;
    public readonly continent!: pulumi.Output<string | undefined>;
    public readonly country!: pulumi.Output<string | undefined>;
    public /*out*/ readonly datacenterId!: pulumi.Output<number>;
    public readonly defaultLoadObject!: pulumi.Output<outputs.trafficmanagement.GtmDatacenterDefaultLoadObject | undefined>;
    public readonly domain!: pulumi.Output<string>;
    public readonly latitude!: pulumi.Output<number | undefined>;
    public readonly longitude!: pulumi.Output<number | undefined>;
    public readonly nickname!: pulumi.Output<string | undefined>;
    public /*out*/ readonly pingInterval!: pulumi.Output<number>;
    public /*out*/ readonly pingPacketSize!: pulumi.Output<number>;
    public /*out*/ readonly scorePenalty!: pulumi.Output<number>;
    public /*out*/ readonly servermonitorLivenessCount!: pulumi.Output<number>;
    public /*out*/ readonly servermonitorLoadCount!: pulumi.Output<number>;
    public /*out*/ readonly servermonitorPool!: pulumi.Output<string>;
    public readonly stateOrProvince!: pulumi.Output<string | undefined>;
    public /*out*/ readonly virtual!: pulumi.Output<boolean>;
    public readonly waitOnComplete!: pulumi.Output<boolean | undefined>;

    /**
     * Create a GtmDatacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated akamai.trafficmanagement.GtmDatacenter has been deprecated in favor of akamai.GtmDatacenter */
    constructor(name: string, args: GtmDatacenterArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated akamai.trafficmanagement.GtmDatacenter has been deprecated in favor of akamai.GtmDatacenter */
    constructor(name: string, argsOrState?: GtmDatacenterArgs | GtmDatacenterState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("GtmDatacenter is deprecated: akamai.trafficmanagement.GtmDatacenter has been deprecated in favor of akamai.GtmDatacenter")
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as GtmDatacenterState | undefined;
            inputs["city"] = state ? state.city : undefined;
            inputs["cloneOf"] = state ? state.cloneOf : undefined;
            inputs["cloudServerHostHeaderOverride"] = state ? state.cloudServerHostHeaderOverride : undefined;
            inputs["cloudServerTargeting"] = state ? state.cloudServerTargeting : undefined;
            inputs["continent"] = state ? state.continent : undefined;
            inputs["country"] = state ? state.country : undefined;
            inputs["datacenterId"] = state ? state.datacenterId : undefined;
            inputs["defaultLoadObject"] = state ? state.defaultLoadObject : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["latitude"] = state ? state.latitude : undefined;
            inputs["longitude"] = state ? state.longitude : undefined;
            inputs["nickname"] = state ? state.nickname : undefined;
            inputs["pingInterval"] = state ? state.pingInterval : undefined;
            inputs["pingPacketSize"] = state ? state.pingPacketSize : undefined;
            inputs["scorePenalty"] = state ? state.scorePenalty : undefined;
            inputs["servermonitorLivenessCount"] = state ? state.servermonitorLivenessCount : undefined;
            inputs["servermonitorLoadCount"] = state ? state.servermonitorLoadCount : undefined;
            inputs["servermonitorPool"] = state ? state.servermonitorPool : undefined;
            inputs["stateOrProvince"] = state ? state.stateOrProvince : undefined;
            inputs["virtual"] = state ? state.virtual : undefined;
            inputs["waitOnComplete"] = state ? state.waitOnComplete : undefined;
        } else {
            const args = argsOrState as GtmDatacenterArgs | undefined;
            if ((!args || args.domain === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'domain'");
            }
            inputs["city"] = args ? args.city : undefined;
            inputs["cloneOf"] = args ? args.cloneOf : undefined;
            inputs["cloudServerHostHeaderOverride"] = args ? args.cloudServerHostHeaderOverride : undefined;
            inputs["cloudServerTargeting"] = args ? args.cloudServerTargeting : undefined;
            inputs["continent"] = args ? args.continent : undefined;
            inputs["country"] = args ? args.country : undefined;
            inputs["defaultLoadObject"] = args ? args.defaultLoadObject : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["latitude"] = args ? args.latitude : undefined;
            inputs["longitude"] = args ? args.longitude : undefined;
            inputs["nickname"] = args ? args.nickname : undefined;
            inputs["stateOrProvince"] = args ? args.stateOrProvince : undefined;
            inputs["waitOnComplete"] = args ? args.waitOnComplete : undefined;
            inputs["datacenterId"] = undefined /*out*/;
            inputs["pingInterval"] = undefined /*out*/;
            inputs["pingPacketSize"] = undefined /*out*/;
            inputs["scorePenalty"] = undefined /*out*/;
            inputs["servermonitorLivenessCount"] = undefined /*out*/;
            inputs["servermonitorLoadCount"] = undefined /*out*/;
            inputs["servermonitorPool"] = undefined /*out*/;
            inputs["virtual"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(GtmDatacenter.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GtmDatacenter resources.
 */
export interface GtmDatacenterState {
    readonly city?: pulumi.Input<string>;
    readonly cloneOf?: pulumi.Input<number>;
    readonly cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    readonly cloudServerTargeting?: pulumi.Input<boolean>;
    readonly continent?: pulumi.Input<string>;
    readonly country?: pulumi.Input<string>;
    readonly datacenterId?: pulumi.Input<number>;
    readonly defaultLoadObject?: pulumi.Input<inputs.trafficmanagement.GtmDatacenterDefaultLoadObject>;
    readonly domain?: pulumi.Input<string>;
    readonly latitude?: pulumi.Input<number>;
    readonly longitude?: pulumi.Input<number>;
    readonly nickname?: pulumi.Input<string>;
    readonly pingInterval?: pulumi.Input<number>;
    readonly pingPacketSize?: pulumi.Input<number>;
    readonly scorePenalty?: pulumi.Input<number>;
    readonly servermonitorLivenessCount?: pulumi.Input<number>;
    readonly servermonitorLoadCount?: pulumi.Input<number>;
    readonly servermonitorPool?: pulumi.Input<string>;
    readonly stateOrProvince?: pulumi.Input<string>;
    readonly virtual?: pulumi.Input<boolean>;
    readonly waitOnComplete?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GtmDatacenter resource.
 */
export interface GtmDatacenterArgs {
    readonly city?: pulumi.Input<string>;
    readonly cloneOf?: pulumi.Input<number>;
    readonly cloudServerHostHeaderOverride?: pulumi.Input<boolean>;
    readonly cloudServerTargeting?: pulumi.Input<boolean>;
    readonly continent?: pulumi.Input<string>;
    readonly country?: pulumi.Input<string>;
    readonly defaultLoadObject?: pulumi.Input<inputs.trafficmanagement.GtmDatacenterDefaultLoadObject>;
    readonly domain: pulumi.Input<string>;
    readonly latitude?: pulumi.Input<number>;
    readonly longitude?: pulumi.Input<number>;
    readonly nickname?: pulumi.Input<string>;
    readonly stateOrProvince?: pulumi.Input<string>;
    readonly waitOnComplete?: pulumi.Input<boolean>;
}
