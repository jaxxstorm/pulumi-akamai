// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GtmCidrmap` provides the resource for creating, configuring and importing a gtm Cidr Map to integrate easily with your existing GTM infrastructure to provide a secure, high performance, highly available and scalable solution for Global Traffic Management. Note: Import requires an ID of the format: `existingDomainName`:`existingMapName`
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewGtmCidrmap(ctx, "demoCidrmap", &akamai.GtmCidrmapArgs{
// 			DefaultDatacenter: &akamai.GtmCidrmapDefaultDatacenterArgs{
// 				DatacenterId: pulumi.Int(5400),
// 				Nickname:     pulumi.String("All Other CIDR Blocks"),
// 			},
// 			Domain: pulumi.String("demo_domain.akadns.net"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type GtmCidrmap struct {
	pulumi.CustomResourceState

	// * `datacenterId`
	// * `nickname`
	Assignments       GtmCidrmapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmCidrmapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Resource name
	// * `defaultDatacenter`
	// * `datacenterId`
	// * `nickname`
	Name pulumi.StringOutput `pulumi:"name"`
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrOutput `pulumi:"waitOnComplete"`
}

// NewGtmCidrmap registers a new resource with the given unique name, arguments, and options.
func NewGtmCidrmap(ctx *pulumi.Context,
	name string, args *GtmCidrmapArgs, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmCidrmap:GtmCidrmap"),
		},
	})
	opts = append(opts, aliases)
	var resource GtmCidrmap
	err := ctx.RegisterResource("akamai:index/gtmCidrmap:GtmCidrmap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmCidrmap gets an existing GtmCidrmap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmCidrmap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmCidrmapState, opts ...pulumi.ResourceOption) (*GtmCidrmap, error) {
	var resource GtmCidrmap
	err := ctx.ReadResource("akamai:index/gtmCidrmap:GtmCidrmap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmCidrmap resources.
type gtmCidrmapState struct {
	// * `datacenterId`
	// * `nickname`
	Assignments       []GtmCidrmapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	// Domain name
	Domain *string `pulumi:"domain"`
	// Resource name
	// * `defaultDatacenter`
	// * `datacenterId`
	// * `nickname`
	Name *string `pulumi:"name"`
	// Wait for transaction to complete
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

type GtmCidrmapState struct {
	// * `datacenterId`
	// * `nickname`
	Assignments       GtmCidrmapAssignmentArrayInput
	DefaultDatacenter GtmCidrmapDefaultDatacenterPtrInput
	// Domain name
	Domain pulumi.StringPtrInput
	// Resource name
	// * `defaultDatacenter`
	// * `datacenterId`
	// * `nickname`
	Name pulumi.StringPtrInput
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmCidrmapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapState)(nil)).Elem()
}

type gtmCidrmapArgs struct {
	// * `datacenterId`
	// * `nickname`
	Assignments       []GtmCidrmapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmCidrmapDefaultDatacenter `pulumi:"defaultDatacenter"`
	// Domain name
	Domain string `pulumi:"domain"`
	// Resource name
	// * `defaultDatacenter`
	// * `datacenterId`
	// * `nickname`
	Name *string `pulumi:"name"`
	// Wait for transaction to complete
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmCidrmap resource.
type GtmCidrmapArgs struct {
	// * `datacenterId`
	// * `nickname`
	Assignments       GtmCidrmapAssignmentArrayInput
	DefaultDatacenter GtmCidrmapDefaultDatacenterInput
	// Domain name
	Domain pulumi.StringInput
	// Resource name
	// * `defaultDatacenter`
	// * `datacenterId`
	// * `nickname`
	Name pulumi.StringPtrInput
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmCidrmapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmCidrmapArgs)(nil)).Elem()
}

type GtmCidrmapInput interface {
	pulumi.Input

	ToGtmCidrmapOutput() GtmCidrmapOutput
	ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput
}

func (*GtmCidrmap) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmCidrmap)(nil))
}

func (i *GtmCidrmap) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return i.ToGtmCidrmapOutputWithContext(context.Background())
}

func (i *GtmCidrmap) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapOutput)
}

func (i *GtmCidrmap) ToGtmCidrmapPtrOutput() GtmCidrmapPtrOutput {
	return i.ToGtmCidrmapPtrOutputWithContext(context.Background())
}

func (i *GtmCidrmap) ToGtmCidrmapPtrOutputWithContext(ctx context.Context) GtmCidrmapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapPtrOutput)
}

type GtmCidrmapPtrInput interface {
	pulumi.Input

	ToGtmCidrmapPtrOutput() GtmCidrmapPtrOutput
	ToGtmCidrmapPtrOutputWithContext(ctx context.Context) GtmCidrmapPtrOutput
}

type gtmCidrmapPtrType GtmCidrmapArgs

func (*gtmCidrmapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil))
}

func (i *gtmCidrmapPtrType) ToGtmCidrmapPtrOutput() GtmCidrmapPtrOutput {
	return i.ToGtmCidrmapPtrOutputWithContext(context.Background())
}

func (i *gtmCidrmapPtrType) ToGtmCidrmapPtrOutputWithContext(ctx context.Context) GtmCidrmapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapPtrOutput)
}

// GtmCidrmapArrayInput is an input type that accepts GtmCidrmapArray and GtmCidrmapArrayOutput values.
// You can construct a concrete instance of `GtmCidrmapArrayInput` via:
//
//          GtmCidrmapArray{ GtmCidrmapArgs{...} }
type GtmCidrmapArrayInput interface {
	pulumi.Input

	ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput
	ToGtmCidrmapArrayOutputWithContext(context.Context) GtmCidrmapArrayOutput
}

type GtmCidrmapArray []GtmCidrmapInput

func (GtmCidrmapArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GtmCidrmap)(nil))
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return i.ToGtmCidrmapArrayOutputWithContext(context.Background())
}

func (i GtmCidrmapArray) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapArrayOutput)
}

// GtmCidrmapMapInput is an input type that accepts GtmCidrmapMap and GtmCidrmapMapOutput values.
// You can construct a concrete instance of `GtmCidrmapMapInput` via:
//
//          GtmCidrmapMap{ "key": GtmCidrmapArgs{...} }
type GtmCidrmapMapInput interface {
	pulumi.Input

	ToGtmCidrmapMapOutput() GtmCidrmapMapOutput
	ToGtmCidrmapMapOutputWithContext(context.Context) GtmCidrmapMapOutput
}

type GtmCidrmapMap map[string]GtmCidrmapInput

func (GtmCidrmapMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GtmCidrmap)(nil))
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return i.ToGtmCidrmapMapOutputWithContext(context.Background())
}

func (i GtmCidrmapMap) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmCidrmapMapOutput)
}

type GtmCidrmapOutput struct {
	*pulumi.OutputState
}

func (GtmCidrmapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmCidrmap)(nil))
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutput() GtmCidrmapOutput {
	return o
}

func (o GtmCidrmapOutput) ToGtmCidrmapOutputWithContext(ctx context.Context) GtmCidrmapOutput {
	return o
}

func (o GtmCidrmapOutput) ToGtmCidrmapPtrOutput() GtmCidrmapPtrOutput {
	return o.ToGtmCidrmapPtrOutputWithContext(context.Background())
}

func (o GtmCidrmapOutput) ToGtmCidrmapPtrOutputWithContext(ctx context.Context) GtmCidrmapPtrOutput {
	return o.ApplyT(func(v GtmCidrmap) *GtmCidrmap {
		return &v
	}).(GtmCidrmapPtrOutput)
}

type GtmCidrmapPtrOutput struct {
	*pulumi.OutputState
}

func (GtmCidrmapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmCidrmap)(nil))
}

func (o GtmCidrmapPtrOutput) ToGtmCidrmapPtrOutput() GtmCidrmapPtrOutput {
	return o
}

func (o GtmCidrmapPtrOutput) ToGtmCidrmapPtrOutputWithContext(ctx context.Context) GtmCidrmapPtrOutput {
	return o
}

type GtmCidrmapArrayOutput struct{ *pulumi.OutputState }

func (GtmCidrmapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GtmCidrmap)(nil))
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutput() GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) ToGtmCidrmapArrayOutputWithContext(ctx context.Context) GtmCidrmapArrayOutput {
	return o
}

func (o GtmCidrmapArrayOutput) Index(i pulumi.IntInput) GtmCidrmapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GtmCidrmap {
		return vs[0].([]GtmCidrmap)[vs[1].(int)]
	}).(GtmCidrmapOutput)
}

type GtmCidrmapMapOutput struct{ *pulumi.OutputState }

func (GtmCidrmapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GtmCidrmap)(nil))
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutput() GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) ToGtmCidrmapMapOutputWithContext(ctx context.Context) GtmCidrmapMapOutput {
	return o
}

func (o GtmCidrmapMapOutput) MapIndex(k pulumi.StringInput) GtmCidrmapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GtmCidrmap {
		return vs[0].(map[string]GtmCidrmap)[vs[1].(string)]
	}).(GtmCidrmapOutput)
}

func init() {
	pulumi.RegisterOutputType(GtmCidrmapOutput{})
	pulumi.RegisterOutputType(GtmCidrmapPtrOutput{})
	pulumi.RegisterOutputType(GtmCidrmapArrayOutput{})
	pulumi.RegisterOutputType(GtmCidrmapMapOutput{})
}
