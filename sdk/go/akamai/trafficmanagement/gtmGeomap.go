// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package trafficmanagement

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deprecated: akamai.trafficmanagement.GtmGeomap has been deprecated in favor of akamai.GtmGeomap
type GtmGeomap struct {
	pulumi.CustomResourceState

	Assignments       GtmGeomapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	Domain            pulumi.StringOutput              `pulumi:"domain"`
	Name              pulumi.StringOutput              `pulumi:"name"`
	WaitOnComplete    pulumi.BoolPtrOutput             `pulumi:"waitOnComplete"`
}

// NewGtmGeomap registers a new resource with the given unique name, arguments, and options.
func NewGtmGeomap(ctx *pulumi.Context,
	name string, args *GtmGeomapArgs, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	var resource GtmGeomap
	err := ctx.RegisterResource("akamai:trafficmanagement/gtmGeomap:GtmGeomap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmGeomap gets an existing GtmGeomap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmGeomap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmGeomapState, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	var resource GtmGeomap
	err := ctx.ReadResource("akamai:trafficmanagement/gtmGeomap:GtmGeomap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmGeomap resources.
type gtmGeomapState struct {
	Assignments       []GtmGeomapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            *string                     `pulumi:"domain"`
	Name              *string                     `pulumi:"name"`
	WaitOnComplete    *bool                       `pulumi:"waitOnComplete"`
}

type GtmGeomapState struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterPtrInput
	Domain            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapState)(nil)).Elem()
}

type gtmGeomapArgs struct {
	Assignments       []GtmGeomapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            string                     `pulumi:"domain"`
	Name              *string                    `pulumi:"name"`
	WaitOnComplete    *bool                      `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmGeomap resource.
type GtmGeomapArgs struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterInput
	Domain            pulumi.StringInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapArgs)(nil)).Elem()
}

type GtmGeomapInput interface {
	pulumi.Input

	ToGtmGeomapOutput() GtmGeomapOutput
	ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput
}

func (*GtmGeomap) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmGeomap)(nil))
}

func (i *GtmGeomap) ToGtmGeomapOutput() GtmGeomapOutput {
	return i.ToGtmGeomapOutputWithContext(context.Background())
}

func (i *GtmGeomap) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapOutput)
}

type GtmGeomapOutput struct {
	*pulumi.OutputState
}

func (GtmGeomapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmGeomap)(nil))
}

func (o GtmGeomapOutput) ToGtmGeomapOutput() GtmGeomapOutput {
	return o
}

func (o GtmGeomapOutput) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(GtmGeomapOutput{})
}
