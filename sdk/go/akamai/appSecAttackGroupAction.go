// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecAttackGroupAction` resource to update what action should be taken when an attack groupâ€™s rule triggers.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Security_configuration
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.NewAppSecAttackGroupAction(ctx, "attackGroupAction", &akamai.AppSecAttackGroupActionArgs{
// 			ConfigId:          pulumi.Int(configuration.ConfigId),
// 			Version:           pulumi.Int(configuration.LatestVersion),
// 			SecurityPolicyId:  pulumi.Any(_var.Security_policy_id),
// 			AttackGroup:       pulumi.Any(_var.Attack_group),
// 			AttackGroupAction: pulumi.Any(_var.Action),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AppSecAttackGroupAction struct {
	pulumi.CustomResourceState

	// The ID of the attack group to use.
	AttackGroup pulumi.StringOutput `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringOutput `pulumi:"attackGroupAction"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAppSecAttackGroupAction registers a new resource with the given unique name, arguments, and options.
func NewAppSecAttackGroupAction(ctx *pulumi.Context,
	name string, args *AppSecAttackGroupActionArgs, opts ...pulumi.ResourceOption) (*AppSecAttackGroupAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackGroup == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroup'")
	}
	if args.AttackGroupAction == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroupAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource AppSecAttackGroupAction
	err := ctx.RegisterResource("akamai:index/appSecAttackGroupAction:AppSecAttackGroupAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecAttackGroupAction gets an existing AppSecAttackGroupAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecAttackGroupAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecAttackGroupActionState, opts ...pulumi.ResourceOption) (*AppSecAttackGroupAction, error) {
	var resource AppSecAttackGroupAction
	err := ctx.ReadResource("akamai:index/appSecAttackGroupAction:AppSecAttackGroupAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecAttackGroupAction resources.
type appSecAttackGroupActionState struct {
	// The ID of the attack group to use.
	AttackGroup *string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction *string `pulumi:"attackGroupAction"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version *int `pulumi:"version"`
}

type AppSecAttackGroupActionState struct {
	// The ID of the attack group to use.
	AttackGroup pulumi.StringPtrInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
	// The version number of the security configuration to use.
	Version pulumi.IntPtrInput
}

func (AppSecAttackGroupActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupActionState)(nil)).Elem()
}

type appSecAttackGroupActionArgs struct {
	// The ID of the attack group to use.
	AttackGroup string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction string `pulumi:"attackGroupAction"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a AppSecAttackGroupAction resource.
type AppSecAttackGroupActionArgs struct {
	// The ID of the attack group to use.
	AttackGroup pulumi.StringInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
	// The version number of the security configuration to use.
	Version pulumi.IntInput
}

func (AppSecAttackGroupActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupActionArgs)(nil)).Elem()
}

type AppSecAttackGroupActionInput interface {
	pulumi.Input

	ToAppSecAttackGroupActionOutput() AppSecAttackGroupActionOutput
	ToAppSecAttackGroupActionOutputWithContext(ctx context.Context) AppSecAttackGroupActionOutput
}

func (*AppSecAttackGroupAction) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecAttackGroupAction)(nil))
}

func (i *AppSecAttackGroupAction) ToAppSecAttackGroupActionOutput() AppSecAttackGroupActionOutput {
	return i.ToAppSecAttackGroupActionOutputWithContext(context.Background())
}

func (i *AppSecAttackGroupAction) ToAppSecAttackGroupActionOutputWithContext(ctx context.Context) AppSecAttackGroupActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupActionOutput)
}

func (i *AppSecAttackGroupAction) ToAppSecAttackGroupActionPtrOutput() AppSecAttackGroupActionPtrOutput {
	return i.ToAppSecAttackGroupActionPtrOutputWithContext(context.Background())
}

func (i *AppSecAttackGroupAction) ToAppSecAttackGroupActionPtrOutputWithContext(ctx context.Context) AppSecAttackGroupActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupActionPtrOutput)
}

type AppSecAttackGroupActionPtrInput interface {
	pulumi.Input

	ToAppSecAttackGroupActionPtrOutput() AppSecAttackGroupActionPtrOutput
	ToAppSecAttackGroupActionPtrOutputWithContext(ctx context.Context) AppSecAttackGroupActionPtrOutput
}

type appSecAttackGroupActionPtrType AppSecAttackGroupActionArgs

func (*appSecAttackGroupActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroupAction)(nil))
}

func (i *appSecAttackGroupActionPtrType) ToAppSecAttackGroupActionPtrOutput() AppSecAttackGroupActionPtrOutput {
	return i.ToAppSecAttackGroupActionPtrOutputWithContext(context.Background())
}

func (i *appSecAttackGroupActionPtrType) ToAppSecAttackGroupActionPtrOutputWithContext(ctx context.Context) AppSecAttackGroupActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupActionPtrOutput)
}

// AppSecAttackGroupActionArrayInput is an input type that accepts AppSecAttackGroupActionArray and AppSecAttackGroupActionArrayOutput values.
// You can construct a concrete instance of `AppSecAttackGroupActionArrayInput` via:
//
//          AppSecAttackGroupActionArray{ AppSecAttackGroupActionArgs{...} }
type AppSecAttackGroupActionArrayInput interface {
	pulumi.Input

	ToAppSecAttackGroupActionArrayOutput() AppSecAttackGroupActionArrayOutput
	ToAppSecAttackGroupActionArrayOutputWithContext(context.Context) AppSecAttackGroupActionArrayOutput
}

type AppSecAttackGroupActionArray []AppSecAttackGroupActionInput

func (AppSecAttackGroupActionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecAttackGroupAction)(nil))
}

func (i AppSecAttackGroupActionArray) ToAppSecAttackGroupActionArrayOutput() AppSecAttackGroupActionArrayOutput {
	return i.ToAppSecAttackGroupActionArrayOutputWithContext(context.Background())
}

func (i AppSecAttackGroupActionArray) ToAppSecAttackGroupActionArrayOutputWithContext(ctx context.Context) AppSecAttackGroupActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupActionArrayOutput)
}

// AppSecAttackGroupActionMapInput is an input type that accepts AppSecAttackGroupActionMap and AppSecAttackGroupActionMapOutput values.
// You can construct a concrete instance of `AppSecAttackGroupActionMapInput` via:
//
//          AppSecAttackGroupActionMap{ "key": AppSecAttackGroupActionArgs{...} }
type AppSecAttackGroupActionMapInput interface {
	pulumi.Input

	ToAppSecAttackGroupActionMapOutput() AppSecAttackGroupActionMapOutput
	ToAppSecAttackGroupActionMapOutputWithContext(context.Context) AppSecAttackGroupActionMapOutput
}

type AppSecAttackGroupActionMap map[string]AppSecAttackGroupActionInput

func (AppSecAttackGroupActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecAttackGroupAction)(nil))
}

func (i AppSecAttackGroupActionMap) ToAppSecAttackGroupActionMapOutput() AppSecAttackGroupActionMapOutput {
	return i.ToAppSecAttackGroupActionMapOutputWithContext(context.Background())
}

func (i AppSecAttackGroupActionMap) ToAppSecAttackGroupActionMapOutputWithContext(ctx context.Context) AppSecAttackGroupActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupActionMapOutput)
}

type AppSecAttackGroupActionOutput struct {
	*pulumi.OutputState
}

func (AppSecAttackGroupActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecAttackGroupAction)(nil))
}

func (o AppSecAttackGroupActionOutput) ToAppSecAttackGroupActionOutput() AppSecAttackGroupActionOutput {
	return o
}

func (o AppSecAttackGroupActionOutput) ToAppSecAttackGroupActionOutputWithContext(ctx context.Context) AppSecAttackGroupActionOutput {
	return o
}

func (o AppSecAttackGroupActionOutput) ToAppSecAttackGroupActionPtrOutput() AppSecAttackGroupActionPtrOutput {
	return o.ToAppSecAttackGroupActionPtrOutputWithContext(context.Background())
}

func (o AppSecAttackGroupActionOutput) ToAppSecAttackGroupActionPtrOutputWithContext(ctx context.Context) AppSecAttackGroupActionPtrOutput {
	return o.ApplyT(func(v AppSecAttackGroupAction) *AppSecAttackGroupAction {
		return &v
	}).(AppSecAttackGroupActionPtrOutput)
}

type AppSecAttackGroupActionPtrOutput struct {
	*pulumi.OutputState
}

func (AppSecAttackGroupActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroupAction)(nil))
}

func (o AppSecAttackGroupActionPtrOutput) ToAppSecAttackGroupActionPtrOutput() AppSecAttackGroupActionPtrOutput {
	return o
}

func (o AppSecAttackGroupActionPtrOutput) ToAppSecAttackGroupActionPtrOutputWithContext(ctx context.Context) AppSecAttackGroupActionPtrOutput {
	return o
}

type AppSecAttackGroupActionArrayOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecAttackGroupAction)(nil))
}

func (o AppSecAttackGroupActionArrayOutput) ToAppSecAttackGroupActionArrayOutput() AppSecAttackGroupActionArrayOutput {
	return o
}

func (o AppSecAttackGroupActionArrayOutput) ToAppSecAttackGroupActionArrayOutputWithContext(ctx context.Context) AppSecAttackGroupActionArrayOutput {
	return o
}

func (o AppSecAttackGroupActionArrayOutput) Index(i pulumi.IntInput) AppSecAttackGroupActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecAttackGroupAction {
		return vs[0].([]AppSecAttackGroupAction)[vs[1].(int)]
	}).(AppSecAttackGroupActionOutput)
}

type AppSecAttackGroupActionMapOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecAttackGroupAction)(nil))
}

func (o AppSecAttackGroupActionMapOutput) ToAppSecAttackGroupActionMapOutput() AppSecAttackGroupActionMapOutput {
	return o
}

func (o AppSecAttackGroupActionMapOutput) ToAppSecAttackGroupActionMapOutputWithContext(ctx context.Context) AppSecAttackGroupActionMapOutput {
	return o
}

func (o AppSecAttackGroupActionMapOutput) MapIndex(k pulumi.StringInput) AppSecAttackGroupActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecAttackGroupAction {
		return vs[0].(map[string]AppSecAttackGroupAction)[vs[1].(string)]
	}).(AppSecAttackGroupActionOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecAttackGroupActionOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupActionPtrOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupActionArrayOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupActionMapOutput{})
}
