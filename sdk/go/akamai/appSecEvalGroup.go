// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecEvalGroup` resource to create or modify an evaluation attack group's action, conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
// __BETA__ This is Adaptive Security Engine(ASE) related data resource. Please contact your akamai representative if you want to learn more
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Security_configuration
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &GetAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.NewAppSecEvalGroup(ctx, "evalAttackGroup", &akamai.AppSecEvalGroupArgs{
// 			ConfigId:           pulumi.Int(configuration.ConfigId),
// 			SecurityPolicyId:   pulumi.Any(_var.Security_policy_id),
// 			AttackGroup:        pulumi.Any(_var.Attack_group),
// 			AttackGroupAction:  pulumi.Any(_var.Attack_group_action),
// 			ConditionException: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/condition_exception.json")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AppSecEvalGroup struct {
	pulumi.CustomResourceState

	// The eval attack group to use.
	AttackGroup pulumi.StringOutput `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringOutput `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecEvalGroup registers a new resource with the given unique name, arguments, and options.
func NewAppSecEvalGroup(ctx *pulumi.Context,
	name string, args *AppSecEvalGroupArgs, opts ...pulumi.ResourceOption) (*AppSecEvalGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackGroup == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroup'")
	}
	if args.AttackGroupAction == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroupAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource AppSecEvalGroup
	err := ctx.RegisterResource("akamai:index/appSecEvalGroup:AppSecEvalGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecEvalGroup gets an existing AppSecEvalGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecEvalGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecEvalGroupState, opts ...pulumi.ResourceOption) (*AppSecEvalGroup, error) {
	var resource AppSecEvalGroup
	err := ctx.ReadResource("akamai:index/appSecEvalGroup:AppSecEvalGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecEvalGroup resources.
type appSecEvalGroupState struct {
	// The eval attack group to use.
	AttackGroup *string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction *string `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecEvalGroupState struct {
	// The eval attack group to use.
	AttackGroup pulumi.StringPtrInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringPtrInput
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecEvalGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalGroupState)(nil)).Elem()
}

type appSecEvalGroupArgs struct {
	// The eval attack group to use.
	AttackGroup string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction string `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecEvalGroup resource.
type AppSecEvalGroupArgs struct {
	// The eval attack group to use.
	AttackGroup pulumi.StringInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringInput
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
}

func (AppSecEvalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalGroupArgs)(nil)).Elem()
}

type AppSecEvalGroupInput interface {
	pulumi.Input

	ToAppSecEvalGroupOutput() AppSecEvalGroupOutput
	ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput
}

func (*AppSecEvalGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecEvalGroup)(nil))
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupOutput() AppSecEvalGroupOutput {
	return i.ToAppSecEvalGroupOutputWithContext(context.Background())
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupOutput)
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupPtrOutput() AppSecEvalGroupPtrOutput {
	return i.ToAppSecEvalGroupPtrOutputWithContext(context.Background())
}

func (i *AppSecEvalGroup) ToAppSecEvalGroupPtrOutputWithContext(ctx context.Context) AppSecEvalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupPtrOutput)
}

type AppSecEvalGroupPtrInput interface {
	pulumi.Input

	ToAppSecEvalGroupPtrOutput() AppSecEvalGroupPtrOutput
	ToAppSecEvalGroupPtrOutputWithContext(ctx context.Context) AppSecEvalGroupPtrOutput
}

type appSecEvalGroupPtrType AppSecEvalGroupArgs

func (*appSecEvalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalGroup)(nil))
}

func (i *appSecEvalGroupPtrType) ToAppSecEvalGroupPtrOutput() AppSecEvalGroupPtrOutput {
	return i.ToAppSecEvalGroupPtrOutputWithContext(context.Background())
}

func (i *appSecEvalGroupPtrType) ToAppSecEvalGroupPtrOutputWithContext(ctx context.Context) AppSecEvalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupPtrOutput)
}

// AppSecEvalGroupArrayInput is an input type that accepts AppSecEvalGroupArray and AppSecEvalGroupArrayOutput values.
// You can construct a concrete instance of `AppSecEvalGroupArrayInput` via:
//
//          AppSecEvalGroupArray{ AppSecEvalGroupArgs{...} }
type AppSecEvalGroupArrayInput interface {
	pulumi.Input

	ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput
	ToAppSecEvalGroupArrayOutputWithContext(context.Context) AppSecEvalGroupArrayOutput
}

type AppSecEvalGroupArray []AppSecEvalGroupInput

func (AppSecEvalGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecEvalGroup)(nil)).Elem()
}

func (i AppSecEvalGroupArray) ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput {
	return i.ToAppSecEvalGroupArrayOutputWithContext(context.Background())
}

func (i AppSecEvalGroupArray) ToAppSecEvalGroupArrayOutputWithContext(ctx context.Context) AppSecEvalGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupArrayOutput)
}

// AppSecEvalGroupMapInput is an input type that accepts AppSecEvalGroupMap and AppSecEvalGroupMapOutput values.
// You can construct a concrete instance of `AppSecEvalGroupMapInput` via:
//
//          AppSecEvalGroupMap{ "key": AppSecEvalGroupArgs{...} }
type AppSecEvalGroupMapInput interface {
	pulumi.Input

	ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput
	ToAppSecEvalGroupMapOutputWithContext(context.Context) AppSecEvalGroupMapOutput
}

type AppSecEvalGroupMap map[string]AppSecEvalGroupInput

func (AppSecEvalGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecEvalGroup)(nil)).Elem()
}

func (i AppSecEvalGroupMap) ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput {
	return i.ToAppSecEvalGroupMapOutputWithContext(context.Background())
}

func (i AppSecEvalGroupMap) ToAppSecEvalGroupMapOutputWithContext(ctx context.Context) AppSecEvalGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalGroupMapOutput)
}

type AppSecEvalGroupOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecEvalGroup)(nil))
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupOutput() AppSecEvalGroupOutput {
	return o
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupOutputWithContext(ctx context.Context) AppSecEvalGroupOutput {
	return o
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupPtrOutput() AppSecEvalGroupPtrOutput {
	return o.ToAppSecEvalGroupPtrOutputWithContext(context.Background())
}

func (o AppSecEvalGroupOutput) ToAppSecEvalGroupPtrOutputWithContext(ctx context.Context) AppSecEvalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppSecEvalGroup) *AppSecEvalGroup {
		return &v
	}).(AppSecEvalGroupPtrOutput)
}

type AppSecEvalGroupPtrOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalGroup)(nil))
}

func (o AppSecEvalGroupPtrOutput) ToAppSecEvalGroupPtrOutput() AppSecEvalGroupPtrOutput {
	return o
}

func (o AppSecEvalGroupPtrOutput) ToAppSecEvalGroupPtrOutputWithContext(ctx context.Context) AppSecEvalGroupPtrOutput {
	return o
}

func (o AppSecEvalGroupPtrOutput) Elem() AppSecEvalGroupOutput {
	return o.ApplyT(func(v *AppSecEvalGroup) AppSecEvalGroup {
		if v != nil {
			return *v
		}
		var ret AppSecEvalGroup
		return ret
	}).(AppSecEvalGroupOutput)
}

type AppSecEvalGroupArrayOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecEvalGroup)(nil))
}

func (o AppSecEvalGroupArrayOutput) ToAppSecEvalGroupArrayOutput() AppSecEvalGroupArrayOutput {
	return o
}

func (o AppSecEvalGroupArrayOutput) ToAppSecEvalGroupArrayOutputWithContext(ctx context.Context) AppSecEvalGroupArrayOutput {
	return o
}

func (o AppSecEvalGroupArrayOutput) Index(i pulumi.IntInput) AppSecEvalGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecEvalGroup {
		return vs[0].([]AppSecEvalGroup)[vs[1].(int)]
	}).(AppSecEvalGroupOutput)
}

type AppSecEvalGroupMapOutput struct{ *pulumi.OutputState }

func (AppSecEvalGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecEvalGroup)(nil))
}

func (o AppSecEvalGroupMapOutput) ToAppSecEvalGroupMapOutput() AppSecEvalGroupMapOutput {
	return o
}

func (o AppSecEvalGroupMapOutput) ToAppSecEvalGroupMapOutputWithContext(ctx context.Context) AppSecEvalGroupMapOutput {
	return o
}

func (o AppSecEvalGroupMapOutput) MapIndex(k pulumi.StringInput) AppSecEvalGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecEvalGroup {
		return vs[0].(map[string]AppSecEvalGroup)[vs[1].(string)]
	}).(AppSecEvalGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupInput)(nil)).Elem(), &AppSecEvalGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupPtrInput)(nil)).Elem(), &AppSecEvalGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupArrayInput)(nil)).Elem(), AppSecEvalGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecEvalGroupMapInput)(nil)).Elem(), AppSecEvalGroupMap{})
	pulumi.RegisterOutputType(AppSecEvalGroupOutput{})
	pulumi.RegisterOutputType(AppSecEvalGroupPtrOutput{})
	pulumi.RegisterOutputType(AppSecEvalGroupArrayOutput{})
	pulumi.RegisterOutputType(AppSecEvalGroupMapOutput{})
}
