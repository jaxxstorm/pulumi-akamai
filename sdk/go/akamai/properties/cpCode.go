// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package properties

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Deprecated: akamai.properties.CpCode has been deprecated in favor of akamai.CpCode
type CpCode struct {
	pulumi.CustomResourceState

	// Deprecated: use "contract_id" attribute instead
	Contract   pulumi.StringOutput `pulumi:"contract"`
	ContractId pulumi.StringOutput `pulumi:"contractId"`
	// Deprecated: use "group_id" attribute instead
	Group   pulumi.StringOutput `pulumi:"group"`
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	Name    pulumi.StringOutput `pulumi:"name"`
	Product pulumi.StringOutput `pulumi:"product"`
}

// NewCpCode registers a new resource with the given unique name, arguments, and options.
func NewCpCode(ctx *pulumi.Context,
	name string, args *CpCodeArgs, opts ...pulumi.ResourceOption) (*CpCode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Product == nil {
		return nil, errors.New("invalid value for required argument 'Product'")
	}
	var resource CpCode
	err := ctx.RegisterResource("akamai:properties/cpCode:CpCode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCpCode gets an existing CpCode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCpCode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CpCodeState, opts ...pulumi.ResourceOption) (*CpCode, error) {
	var resource CpCode
	err := ctx.ReadResource("akamai:properties/cpCode:CpCode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CpCode resources.
type cpCodeState struct {
	// Deprecated: use "contract_id" attribute instead
	Contract   *string `pulumi:"contract"`
	ContractId *string `pulumi:"contractId"`
	// Deprecated: use "group_id" attribute instead
	Group   *string `pulumi:"group"`
	GroupId *string `pulumi:"groupId"`
	Name    *string `pulumi:"name"`
	Product *string `pulumi:"product"`
}

type CpCodeState struct {
	// Deprecated: use "contract_id" attribute instead
	Contract   pulumi.StringPtrInput
	ContractId pulumi.StringPtrInput
	// Deprecated: use "group_id" attribute instead
	Group   pulumi.StringPtrInput
	GroupId pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	Product pulumi.StringPtrInput
}

func (CpCodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cpCodeState)(nil)).Elem()
}

type cpCodeArgs struct {
	// Deprecated: use "contract_id" attribute instead
	Contract   *string `pulumi:"contract"`
	ContractId *string `pulumi:"contractId"`
	// Deprecated: use "group_id" attribute instead
	Group   *string `pulumi:"group"`
	GroupId *string `pulumi:"groupId"`
	Name    *string `pulumi:"name"`
	Product string  `pulumi:"product"`
}

// The set of arguments for constructing a CpCode resource.
type CpCodeArgs struct {
	// Deprecated: use "contract_id" attribute instead
	Contract   pulumi.StringPtrInput
	ContractId pulumi.StringPtrInput
	// Deprecated: use "group_id" attribute instead
	Group   pulumi.StringPtrInput
	GroupId pulumi.StringPtrInput
	Name    pulumi.StringPtrInput
	Product pulumi.StringInput
}

func (CpCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cpCodeArgs)(nil)).Elem()
}

type CpCodeInput interface {
	pulumi.Input

	ToCpCodeOutput() CpCodeOutput
	ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput
}

func (*CpCode) ElementType() reflect.Type {
	return reflect.TypeOf((*CpCode)(nil))
}

func (i *CpCode) ToCpCodeOutput() CpCodeOutput {
	return i.ToCpCodeOutputWithContext(context.Background())
}

func (i *CpCode) ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CpCodeOutput)
}

type CpCodeOutput struct {
	*pulumi.OutputState
}

func (CpCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CpCode)(nil))
}

func (o CpCodeOutput) ToCpCodeOutput() CpCodeOutput {
	return o
}

func (o CpCodeOutput) ToCpCodeOutputWithContext(ctx context.Context) CpCodeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CpCodeOutput{})
}
