// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Dns struct {
	AccessToken  *string `pulumi:"accessToken"`
	ClientSecret *string `pulumi:"clientSecret"`
	ClientToken  *string `pulumi:"clientToken"`
	Host         *string `pulumi:"host"`
	MaxBody      *int    `pulumi:"maxBody"`
}

// DnsInput is an input type that accepts DnsArgs and DnsOutput values.
// You can construct a concrete instance of `DnsInput` via:
//
//          DnsArgs{...}
type DnsInput interface {
	pulumi.Input

	ToDnsOutput() DnsOutput
	ToDnsOutputWithContext(context.Context) DnsOutput
}

type DnsArgs struct {
	AccessToken  pulumi.StringPtrInput `pulumi:"accessToken"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	ClientToken  pulumi.StringPtrInput `pulumi:"clientToken"`
	Host         pulumi.StringPtrInput `pulumi:"host"`
	MaxBody      pulumi.IntPtrInput    `pulumi:"maxBody"`
}

func (DnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dns)(nil)).Elem()
}

func (i DnsArgs) ToDnsOutput() DnsOutput {
	return i.ToDnsOutputWithContext(context.Background())
}

func (i DnsArgs) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsOutput)
}

// DnsArrayInput is an input type that accepts DnsArray and DnsArrayOutput values.
// You can construct a concrete instance of `DnsArrayInput` via:
//
//          DnsArray{ DnsArgs{...} }
type DnsArrayInput interface {
	pulumi.Input

	ToDnsArrayOutput() DnsArrayOutput
	ToDnsArrayOutputWithContext(context.Context) DnsArrayOutput
}

type DnsArray []DnsInput

func (DnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dns)(nil)).Elem()
}

func (i DnsArray) ToDnsArrayOutput() DnsArrayOutput {
	return i.ToDnsArrayOutputWithContext(context.Background())
}

func (i DnsArray) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsArrayOutput)
}

type DnsOutput struct{ *pulumi.OutputState }

func (DnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dns)(nil)).Elem()
}

func (o DnsOutput) ToDnsOutput() DnsOutput {
	return o
}

func (o DnsOutput) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return o
}

func (o DnsOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dns) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

func (o DnsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dns) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o DnsOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dns) *string { return v.ClientToken }).(pulumi.StringPtrOutput)
}

func (o DnsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dns) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o DnsOutput) MaxBody() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Dns) *int { return v.MaxBody }).(pulumi.IntPtrOutput)
}

type DnsArrayOutput struct{ *pulumi.OutputState }

func (DnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dns)(nil)).Elem()
}

func (o DnsArrayOutput) ToDnsArrayOutput() DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) Index(i pulumi.IntInput) DnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dns {
		return vs[0].([]Dns)[vs[1].(int)]
	}).(DnsOutput)
}

type Gtms struct {
	AccessToken  *string `pulumi:"accessToken"`
	ClientSecret *string `pulumi:"clientSecret"`
	ClientToken  *string `pulumi:"clientToken"`
	Host         *string `pulumi:"host"`
	MaxBody      *int    `pulumi:"maxBody"`
}

// GtmsInput is an input type that accepts GtmsArgs and GtmsOutput values.
// You can construct a concrete instance of `GtmsInput` via:
//
//          GtmsArgs{...}
type GtmsInput interface {
	pulumi.Input

	ToGtmsOutput() GtmsOutput
	ToGtmsOutputWithContext(context.Context) GtmsOutput
}

type GtmsArgs struct {
	AccessToken  pulumi.StringPtrInput `pulumi:"accessToken"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	ClientToken  pulumi.StringPtrInput `pulumi:"clientToken"`
	Host         pulumi.StringPtrInput `pulumi:"host"`
	MaxBody      pulumi.IntPtrInput    `pulumi:"maxBody"`
}

func (GtmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Gtms)(nil)).Elem()
}

func (i GtmsArgs) ToGtmsOutput() GtmsOutput {
	return i.ToGtmsOutputWithContext(context.Background())
}

func (i GtmsArgs) ToGtmsOutputWithContext(ctx context.Context) GtmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmsOutput)
}

// GtmsArrayInput is an input type that accepts GtmsArray and GtmsArrayOutput values.
// You can construct a concrete instance of `GtmsArrayInput` via:
//
//          GtmsArray{ GtmsArgs{...} }
type GtmsArrayInput interface {
	pulumi.Input

	ToGtmsArrayOutput() GtmsArrayOutput
	ToGtmsArrayOutputWithContext(context.Context) GtmsArrayOutput
}

type GtmsArray []GtmsInput

func (GtmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Gtms)(nil)).Elem()
}

func (i GtmsArray) ToGtmsArrayOutput() GtmsArrayOutput {
	return i.ToGtmsArrayOutputWithContext(context.Background())
}

func (i GtmsArray) ToGtmsArrayOutputWithContext(ctx context.Context) GtmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmsArrayOutput)
}

type GtmsOutput struct{ *pulumi.OutputState }

func (GtmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Gtms)(nil)).Elem()
}

func (o GtmsOutput) ToGtmsOutput() GtmsOutput {
	return o
}

func (o GtmsOutput) ToGtmsOutputWithContext(ctx context.Context) GtmsOutput {
	return o
}

func (o GtmsOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Gtms) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

func (o GtmsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Gtms) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o GtmsOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Gtms) *string { return v.ClientToken }).(pulumi.StringPtrOutput)
}

func (o GtmsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Gtms) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o GtmsOutput) MaxBody() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Gtms) *int { return v.MaxBody }).(pulumi.IntPtrOutput)
}

type GtmsArrayOutput struct{ *pulumi.OutputState }

func (GtmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Gtms)(nil)).Elem()
}

func (o GtmsArrayOutput) ToGtmsArrayOutput() GtmsArrayOutput {
	return o
}

func (o GtmsArrayOutput) ToGtmsArrayOutputWithContext(ctx context.Context) GtmsArrayOutput {
	return o
}

func (o GtmsArrayOutput) Index(i pulumi.IntInput) GtmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Gtms {
		return vs[0].([]Gtms)[vs[1].(int)]
	}).(GtmsOutput)
}

type Properties struct {
	AccessToken  *string `pulumi:"accessToken"`
	ClientSecret *string `pulumi:"clientSecret"`
	ClientToken  *string `pulumi:"clientToken"`
	Host         *string `pulumi:"host"`
	MaxBody      *int    `pulumi:"maxBody"`
}

// PropertiesInput is an input type that accepts PropertiesArgs and PropertiesOutput values.
// You can construct a concrete instance of `PropertiesInput` via:
//
//          PropertiesArgs{...}
type PropertiesInput interface {
	pulumi.Input

	ToPropertiesOutput() PropertiesOutput
	ToPropertiesOutputWithContext(context.Context) PropertiesOutput
}

type PropertiesArgs struct {
	AccessToken  pulumi.StringPtrInput `pulumi:"accessToken"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	ClientToken  pulumi.StringPtrInput `pulumi:"clientToken"`
	Host         pulumi.StringPtrInput `pulumi:"host"`
	MaxBody      pulumi.IntPtrInput    `pulumi:"maxBody"`
}

func (PropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Properties)(nil)).Elem()
}

func (i PropertiesArgs) ToPropertiesOutput() PropertiesOutput {
	return i.ToPropertiesOutputWithContext(context.Background())
}

func (i PropertiesArgs) ToPropertiesOutputWithContext(ctx context.Context) PropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertiesOutput)
}

// PropertiesArrayInput is an input type that accepts PropertiesArray and PropertiesArrayOutput values.
// You can construct a concrete instance of `PropertiesArrayInput` via:
//
//          PropertiesArray{ PropertiesArgs{...} }
type PropertiesArrayInput interface {
	pulumi.Input

	ToPropertiesArrayOutput() PropertiesArrayOutput
	ToPropertiesArrayOutputWithContext(context.Context) PropertiesArrayOutput
}

type PropertiesArray []PropertiesInput

func (PropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Properties)(nil)).Elem()
}

func (i PropertiesArray) ToPropertiesArrayOutput() PropertiesArrayOutput {
	return i.ToPropertiesArrayOutputWithContext(context.Background())
}

func (i PropertiesArray) ToPropertiesArrayOutputWithContext(ctx context.Context) PropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropertiesArrayOutput)
}

type PropertiesOutput struct{ *pulumi.OutputState }

func (PropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Properties)(nil)).Elem()
}

func (o PropertiesOutput) ToPropertiesOutput() PropertiesOutput {
	return o
}

func (o PropertiesOutput) ToPropertiesOutputWithContext(ctx context.Context) PropertiesOutput {
	return o
}

func (o PropertiesOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Properties) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

func (o PropertiesOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Properties) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o PropertiesOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Properties) *string { return v.ClientToken }).(pulumi.StringPtrOutput)
}

func (o PropertiesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Properties) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o PropertiesOutput) MaxBody() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Properties) *int { return v.MaxBody }).(pulumi.IntPtrOutput)
}

type PropertiesArrayOutput struct{ *pulumi.OutputState }

func (PropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Properties)(nil)).Elem()
}

func (o PropertiesArrayOutput) ToPropertiesArrayOutput() PropertiesArrayOutput {
	return o
}

func (o PropertiesArrayOutput) ToPropertiesArrayOutputWithContext(ctx context.Context) PropertiesArrayOutput {
	return o
}

func (o PropertiesArrayOutput) Index(i pulumi.IntInput) PropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Properties {
		return vs[0].([]Properties)[vs[1].(int)]
	}).(PropertiesOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsOutput{})
	pulumi.RegisterOutputType(DnsArrayOutput{})
	pulumi.RegisterOutputType(GtmsOutput{})
	pulumi.RegisterOutputType(GtmsArrayOutput{})
	pulumi.RegisterOutputType(PropertiesOutput{})
	pulumi.RegisterOutputType(PropertiesArrayOutput{})
}
