// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TBD
// Use the `AppSecRuleUpgrade` resource to upgrade to the most recent version of the KRS rule set. Akamai periodically updates these rules to keep protections current. However, the rules you use in your security policies do not automatically upgrade to the latest version when using mode: KRS. These rules do update automatically when you have mode set to AAG. Before you upgrade, run Get upgrade details to see which rules have changed. If you want to test how these rules would operate with live traffic before committing to the upgrade, run them in evaluation mode. This applies to KRS rules only and does not allow you to make any changes to the rules themselves. The response is the same as the mode response.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Security_configuration
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ruleUpgrade, err := akamai.NewAppSecRuleUpgrade(ctx, "ruleUpgrade", &akamai.AppSecRuleUpgradeArgs{
// 			ConfigId:         pulumi.Int(configuration.ConfigId),
// 			SecurityPolicyId: pulumi.Any(_var.Security_policy_id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("ruleUpgradeCurrentRuleset", ruleUpgrade.CurrentRuleset)
// 		ctx.Export("ruleUpgradeMode", ruleUpgrade.Mode)
// 		ctx.Export("ruleUpgradeEvalStatus", ruleUpgrade.EvalStatus)
// 		return nil
// 	})
// }
// ```
type AppSecRuleUpgrade struct {
	pulumi.CustomResourceState

	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// A string indicating the version number and release date of the current KRS rule set.
	CurrentRuleset pulumi.StringOutput `pulumi:"currentRuleset"`
	// TBD
	EvalStatus pulumi.StringOutput `pulumi:"evalStatus"`
	// A string indicating the current mode, either KRS,AAG,ASE_AUTO,ASE_MANUAL
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// __ASE Beta__. (Optional) ASE_AUTO or ASE_MANUAL.  ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more. Rule Actions and Threat Intelligence setting are read only in ASE_AUTO mode
	UpgradeMode pulumi.StringPtrOutput `pulumi:"upgradeMode"`
}

// NewAppSecRuleUpgrade registers a new resource with the given unique name, arguments, and options.
func NewAppSecRuleUpgrade(ctx *pulumi.Context,
	name string, args *AppSecRuleUpgradeArgs, opts ...pulumi.ResourceOption) (*AppSecRuleUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource AppSecRuleUpgrade
	err := ctx.RegisterResource("akamai:index/appSecRuleUpgrade:AppSecRuleUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecRuleUpgrade gets an existing AppSecRuleUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecRuleUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecRuleUpgradeState, opts ...pulumi.ResourceOption) (*AppSecRuleUpgrade, error) {
	var resource AppSecRuleUpgrade
	err := ctx.ReadResource("akamai:index/appSecRuleUpgrade:AppSecRuleUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecRuleUpgrade resources.
type appSecRuleUpgradeState struct {
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// A string indicating the version number and release date of the current KRS rule set.
	CurrentRuleset *string `pulumi:"currentRuleset"`
	// TBD
	EvalStatus *string `pulumi:"evalStatus"`
	// A string indicating the current mode, either KRS,AAG,ASE_AUTO,ASE_MANUAL
	Mode *string `pulumi:"mode"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// __ASE Beta__. (Optional) ASE_AUTO or ASE_MANUAL.  ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more. Rule Actions and Threat Intelligence setting are read only in ASE_AUTO mode
	UpgradeMode *string `pulumi:"upgradeMode"`
}

type AppSecRuleUpgradeState struct {
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// A string indicating the version number and release date of the current KRS rule set.
	CurrentRuleset pulumi.StringPtrInput
	// TBD
	EvalStatus pulumi.StringPtrInput
	// A string indicating the current mode, either KRS,AAG,ASE_AUTO,ASE_MANUAL
	Mode pulumi.StringPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
	// __ASE Beta__. (Optional) ASE_AUTO or ASE_MANUAL.  ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more. Rule Actions and Threat Intelligence setting are read only in ASE_AUTO mode
	UpgradeMode pulumi.StringPtrInput
}

func (AppSecRuleUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleUpgradeState)(nil)).Elem()
}

type appSecRuleUpgradeArgs struct {
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// __ASE Beta__. (Optional) ASE_AUTO or ASE_MANUAL.  ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more. Rule Actions and Threat Intelligence setting are read only in ASE_AUTO mode
	UpgradeMode *string `pulumi:"upgradeMode"`
}

// The set of arguments for constructing a AppSecRuleUpgrade resource.
type AppSecRuleUpgradeArgs struct {
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
	// __ASE Beta__. (Optional) ASE_AUTO or ASE_MANUAL.  ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more. Rule Actions and Threat Intelligence setting are read only in ASE_AUTO mode
	UpgradeMode pulumi.StringPtrInput
}

func (AppSecRuleUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleUpgradeArgs)(nil)).Elem()
}

type AppSecRuleUpgradeInput interface {
	pulumi.Input

	ToAppSecRuleUpgradeOutput() AppSecRuleUpgradeOutput
	ToAppSecRuleUpgradeOutputWithContext(ctx context.Context) AppSecRuleUpgradeOutput
}

func (*AppSecRuleUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRuleUpgrade)(nil))
}

func (i *AppSecRuleUpgrade) ToAppSecRuleUpgradeOutput() AppSecRuleUpgradeOutput {
	return i.ToAppSecRuleUpgradeOutputWithContext(context.Background())
}

func (i *AppSecRuleUpgrade) ToAppSecRuleUpgradeOutputWithContext(ctx context.Context) AppSecRuleUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleUpgradeOutput)
}

func (i *AppSecRuleUpgrade) ToAppSecRuleUpgradePtrOutput() AppSecRuleUpgradePtrOutput {
	return i.ToAppSecRuleUpgradePtrOutputWithContext(context.Background())
}

func (i *AppSecRuleUpgrade) ToAppSecRuleUpgradePtrOutputWithContext(ctx context.Context) AppSecRuleUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleUpgradePtrOutput)
}

type AppSecRuleUpgradePtrInput interface {
	pulumi.Input

	ToAppSecRuleUpgradePtrOutput() AppSecRuleUpgradePtrOutput
	ToAppSecRuleUpgradePtrOutputWithContext(ctx context.Context) AppSecRuleUpgradePtrOutput
}

type appSecRuleUpgradePtrType AppSecRuleUpgradeArgs

func (*appSecRuleUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRuleUpgrade)(nil))
}

func (i *appSecRuleUpgradePtrType) ToAppSecRuleUpgradePtrOutput() AppSecRuleUpgradePtrOutput {
	return i.ToAppSecRuleUpgradePtrOutputWithContext(context.Background())
}

func (i *appSecRuleUpgradePtrType) ToAppSecRuleUpgradePtrOutputWithContext(ctx context.Context) AppSecRuleUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleUpgradePtrOutput)
}

// AppSecRuleUpgradeArrayInput is an input type that accepts AppSecRuleUpgradeArray and AppSecRuleUpgradeArrayOutput values.
// You can construct a concrete instance of `AppSecRuleUpgradeArrayInput` via:
//
//          AppSecRuleUpgradeArray{ AppSecRuleUpgradeArgs{...} }
type AppSecRuleUpgradeArrayInput interface {
	pulumi.Input

	ToAppSecRuleUpgradeArrayOutput() AppSecRuleUpgradeArrayOutput
	ToAppSecRuleUpgradeArrayOutputWithContext(context.Context) AppSecRuleUpgradeArrayOutput
}

type AppSecRuleUpgradeArray []AppSecRuleUpgradeInput

func (AppSecRuleUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecRuleUpgrade)(nil))
}

func (i AppSecRuleUpgradeArray) ToAppSecRuleUpgradeArrayOutput() AppSecRuleUpgradeArrayOutput {
	return i.ToAppSecRuleUpgradeArrayOutputWithContext(context.Background())
}

func (i AppSecRuleUpgradeArray) ToAppSecRuleUpgradeArrayOutputWithContext(ctx context.Context) AppSecRuleUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleUpgradeArrayOutput)
}

// AppSecRuleUpgradeMapInput is an input type that accepts AppSecRuleUpgradeMap and AppSecRuleUpgradeMapOutput values.
// You can construct a concrete instance of `AppSecRuleUpgradeMapInput` via:
//
//          AppSecRuleUpgradeMap{ "key": AppSecRuleUpgradeArgs{...} }
type AppSecRuleUpgradeMapInput interface {
	pulumi.Input

	ToAppSecRuleUpgradeMapOutput() AppSecRuleUpgradeMapOutput
	ToAppSecRuleUpgradeMapOutputWithContext(context.Context) AppSecRuleUpgradeMapOutput
}

type AppSecRuleUpgradeMap map[string]AppSecRuleUpgradeInput

func (AppSecRuleUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecRuleUpgrade)(nil))
}

func (i AppSecRuleUpgradeMap) ToAppSecRuleUpgradeMapOutput() AppSecRuleUpgradeMapOutput {
	return i.ToAppSecRuleUpgradeMapOutputWithContext(context.Background())
}

func (i AppSecRuleUpgradeMap) ToAppSecRuleUpgradeMapOutputWithContext(ctx context.Context) AppSecRuleUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleUpgradeMapOutput)
}

type AppSecRuleUpgradeOutput struct {
	*pulumi.OutputState
}

func (AppSecRuleUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRuleUpgrade)(nil))
}

func (o AppSecRuleUpgradeOutput) ToAppSecRuleUpgradeOutput() AppSecRuleUpgradeOutput {
	return o
}

func (o AppSecRuleUpgradeOutput) ToAppSecRuleUpgradeOutputWithContext(ctx context.Context) AppSecRuleUpgradeOutput {
	return o
}

func (o AppSecRuleUpgradeOutput) ToAppSecRuleUpgradePtrOutput() AppSecRuleUpgradePtrOutput {
	return o.ToAppSecRuleUpgradePtrOutputWithContext(context.Background())
}

func (o AppSecRuleUpgradeOutput) ToAppSecRuleUpgradePtrOutputWithContext(ctx context.Context) AppSecRuleUpgradePtrOutput {
	return o.ApplyT(func(v AppSecRuleUpgrade) *AppSecRuleUpgrade {
		return &v
	}).(AppSecRuleUpgradePtrOutput)
}

type AppSecRuleUpgradePtrOutput struct {
	*pulumi.OutputState
}

func (AppSecRuleUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRuleUpgrade)(nil))
}

func (o AppSecRuleUpgradePtrOutput) ToAppSecRuleUpgradePtrOutput() AppSecRuleUpgradePtrOutput {
	return o
}

func (o AppSecRuleUpgradePtrOutput) ToAppSecRuleUpgradePtrOutputWithContext(ctx context.Context) AppSecRuleUpgradePtrOutput {
	return o
}

type AppSecRuleUpgradeArrayOutput struct{ *pulumi.OutputState }

func (AppSecRuleUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecRuleUpgrade)(nil))
}

func (o AppSecRuleUpgradeArrayOutput) ToAppSecRuleUpgradeArrayOutput() AppSecRuleUpgradeArrayOutput {
	return o
}

func (o AppSecRuleUpgradeArrayOutput) ToAppSecRuleUpgradeArrayOutputWithContext(ctx context.Context) AppSecRuleUpgradeArrayOutput {
	return o
}

func (o AppSecRuleUpgradeArrayOutput) Index(i pulumi.IntInput) AppSecRuleUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecRuleUpgrade {
		return vs[0].([]AppSecRuleUpgrade)[vs[1].(int)]
	}).(AppSecRuleUpgradeOutput)
}

type AppSecRuleUpgradeMapOutput struct{ *pulumi.OutputState }

func (AppSecRuleUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecRuleUpgrade)(nil))
}

func (o AppSecRuleUpgradeMapOutput) ToAppSecRuleUpgradeMapOutput() AppSecRuleUpgradeMapOutput {
	return o
}

func (o AppSecRuleUpgradeMapOutput) ToAppSecRuleUpgradeMapOutputWithContext(ctx context.Context) AppSecRuleUpgradeMapOutput {
	return o
}

func (o AppSecRuleUpgradeMapOutput) MapIndex(k pulumi.StringInput) AppSecRuleUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecRuleUpgrade {
		return vs[0].(map[string]AppSecRuleUpgrade)[vs[1].(string)]
	}).(AppSecRuleUpgradeOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecRuleUpgradeOutput{})
	pulumi.RegisterOutputType(AppSecRuleUpgradePtrOutput{})
	pulumi.RegisterOutputType(AppSecRuleUpgradeArrayOutput{})
	pulumi.RegisterOutputType(AppSecRuleUpgradeMapOutput{})
}
