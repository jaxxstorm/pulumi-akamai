// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "akamai:index/appSecActivations:AppSecActivations":
		r, err = NewAppSecActivations(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecConfigurationVersionClone:AppSecConfigurationVersionClone":
		r, err = NewAppSecConfigurationVersionClone(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecCustomRule:AppSecCustomRule":
		r, err = NewAppSecCustomRule(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecCustomRuleAction:AppSecCustomRuleAction":
		r, err = NewAppSecCustomRuleAction(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecMatchTarget:AppSecMatchTarget":
		r, err = NewAppSecMatchTarget(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecMatchTargetSequence:AppSecMatchTargetSequence":
		r, err = NewAppSecMatchTargetSequence(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecSecurityPolicyClone:AppSecSecurityPolicyClone":
		r, err = NewAppSecSecurityPolicyClone(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/appSecSelectedHostnames:AppSecSelectedHostnames":
		r, err = NewAppSecSelectedHostnames(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/cpCode:CpCode":
		r, err = NewCpCode(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/dnsRecord:DnsRecord":
		r, err = NewDnsRecord(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/dnsZone:DnsZone":
		r, err = NewDnsZone(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/edgeHostName:EdgeHostName":
		r, err = NewEdgeHostName(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmAsmap:GtmAsmap":
		r, err = NewGtmAsmap(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmCidrmap:GtmCidrmap":
		r, err = NewGtmCidrmap(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmDatacenter:GtmDatacenter":
		r, err = NewGtmDatacenter(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmDomain:GtmDomain":
		r, err = NewGtmDomain(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmGeomap:GtmGeomap":
		r, err = NewGtmGeomap(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmProperty:GtmProperty":
		r, err = NewGtmProperty(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/gtmResource:GtmResource":
		r, err = NewGtmResource(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/property:Property":
		r, err = NewProperty(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/propertyActivation:PropertyActivation":
		r, err = NewPropertyActivation(ctx, name, nil, pulumi.URN_(urn))
	case "akamai:index/propertyVariables:PropertyVariables":
		r, err = NewPropertyVariables(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:akamai" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecActivations",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecConfigurationVersionClone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecCustomRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecCustomRuleAction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecMatchTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecMatchTargetSequence",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecSecurityPolicyClone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/appSecSelectedHostnames",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/cpCode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/dnsRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/dnsZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/edgeHostName",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmAsmap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmCidrmap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmDatacenter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmGeomap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmProperty",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/gtmResource",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/property",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/propertyActivation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"akamai",
		"index/propertyVariables",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"akamai",
		&pkg{version},
	)
}
