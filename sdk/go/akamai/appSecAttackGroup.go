// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecAttackGroup` resource to create or modify an attack group's action, conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Security_configuration
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &GetAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.NewAppSecAttackGroup(ctx, "attackGroup", &akamai.AppSecAttackGroupArgs{
// 			ConfigId:           pulumi.Int(configuration.ConfigId),
// 			SecurityPolicyId:   pulumi.Any(_var.Security_policy_id),
// 			AttackGroup:        pulumi.Any(_var.Attack_group),
// 			AttackGroupAction:  pulumi.Any(_var.Attack_group_action),
// 			ConditionException: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/condition_exception.json")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type AppSecAttackGroup struct {
	pulumi.CustomResourceState

	// The attack group to use.
	AttackGroup pulumi.StringOutput `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringOutput `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecAttackGroup registers a new resource with the given unique name, arguments, and options.
func NewAppSecAttackGroup(ctx *pulumi.Context,
	name string, args *AppSecAttackGroupArgs, opts ...pulumi.ResourceOption) (*AppSecAttackGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackGroup == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroup'")
	}
	if args.AttackGroupAction == nil {
		return nil, errors.New("invalid value for required argument 'AttackGroupAction'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource AppSecAttackGroup
	err := ctx.RegisterResource("akamai:index/appSecAttackGroup:AppSecAttackGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecAttackGroup gets an existing AppSecAttackGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecAttackGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecAttackGroupState, opts ...pulumi.ResourceOption) (*AppSecAttackGroup, error) {
	var resource AppSecAttackGroup
	err := ctx.ReadResource("akamai:index/appSecAttackGroup:AppSecAttackGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecAttackGroup resources.
type appSecAttackGroupState struct {
	// The attack group to use.
	AttackGroup *string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction *string `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecAttackGroupState struct {
	// The attack group to use.
	AttackGroup pulumi.StringPtrInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringPtrInput
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecAttackGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupState)(nil)).Elem()
}

type appSecAttackGroupArgs struct {
	// The attack group to use.
	AttackGroup string `pulumi:"attackGroup"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction string `pulumi:"attackGroupAction"`
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecAttackGroup resource.
type AppSecAttackGroupArgs struct {
	// The attack group to use.
	AttackGroup pulumi.StringInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	AttackGroupAction pulumi.StringInput
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putattackgroupconditionexception)).
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
}

func (AppSecAttackGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecAttackGroupArgs)(nil)).Elem()
}

type AppSecAttackGroupInput interface {
	pulumi.Input

	ToAppSecAttackGroupOutput() AppSecAttackGroupOutput
	ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput
}

func (*AppSecAttackGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecAttackGroup)(nil))
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupOutput() AppSecAttackGroupOutput {
	return i.ToAppSecAttackGroupOutputWithContext(context.Background())
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupOutput)
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupPtrOutput() AppSecAttackGroupPtrOutput {
	return i.ToAppSecAttackGroupPtrOutputWithContext(context.Background())
}

func (i *AppSecAttackGroup) ToAppSecAttackGroupPtrOutputWithContext(ctx context.Context) AppSecAttackGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupPtrOutput)
}

type AppSecAttackGroupPtrInput interface {
	pulumi.Input

	ToAppSecAttackGroupPtrOutput() AppSecAttackGroupPtrOutput
	ToAppSecAttackGroupPtrOutputWithContext(ctx context.Context) AppSecAttackGroupPtrOutput
}

type appSecAttackGroupPtrType AppSecAttackGroupArgs

func (*appSecAttackGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroup)(nil))
}

func (i *appSecAttackGroupPtrType) ToAppSecAttackGroupPtrOutput() AppSecAttackGroupPtrOutput {
	return i.ToAppSecAttackGroupPtrOutputWithContext(context.Background())
}

func (i *appSecAttackGroupPtrType) ToAppSecAttackGroupPtrOutputWithContext(ctx context.Context) AppSecAttackGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupPtrOutput)
}

// AppSecAttackGroupArrayInput is an input type that accepts AppSecAttackGroupArray and AppSecAttackGroupArrayOutput values.
// You can construct a concrete instance of `AppSecAttackGroupArrayInput` via:
//
//          AppSecAttackGroupArray{ AppSecAttackGroupArgs{...} }
type AppSecAttackGroupArrayInput interface {
	pulumi.Input

	ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput
	ToAppSecAttackGroupArrayOutputWithContext(context.Context) AppSecAttackGroupArrayOutput
}

type AppSecAttackGroupArray []AppSecAttackGroupInput

func (AppSecAttackGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppSecAttackGroup)(nil)).Elem()
}

func (i AppSecAttackGroupArray) ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput {
	return i.ToAppSecAttackGroupArrayOutputWithContext(context.Background())
}

func (i AppSecAttackGroupArray) ToAppSecAttackGroupArrayOutputWithContext(ctx context.Context) AppSecAttackGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupArrayOutput)
}

// AppSecAttackGroupMapInput is an input type that accepts AppSecAttackGroupMap and AppSecAttackGroupMapOutput values.
// You can construct a concrete instance of `AppSecAttackGroupMapInput` via:
//
//          AppSecAttackGroupMap{ "key": AppSecAttackGroupArgs{...} }
type AppSecAttackGroupMapInput interface {
	pulumi.Input

	ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput
	ToAppSecAttackGroupMapOutputWithContext(context.Context) AppSecAttackGroupMapOutput
}

type AppSecAttackGroupMap map[string]AppSecAttackGroupInput

func (AppSecAttackGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppSecAttackGroup)(nil)).Elem()
}

func (i AppSecAttackGroupMap) ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput {
	return i.ToAppSecAttackGroupMapOutputWithContext(context.Background())
}

func (i AppSecAttackGroupMap) ToAppSecAttackGroupMapOutputWithContext(ctx context.Context) AppSecAttackGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecAttackGroupMapOutput)
}

type AppSecAttackGroupOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecAttackGroup)(nil))
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupOutput() AppSecAttackGroupOutput {
	return o
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupOutputWithContext(ctx context.Context) AppSecAttackGroupOutput {
	return o
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupPtrOutput() AppSecAttackGroupPtrOutput {
	return o.ToAppSecAttackGroupPtrOutputWithContext(context.Background())
}

func (o AppSecAttackGroupOutput) ToAppSecAttackGroupPtrOutputWithContext(ctx context.Context) AppSecAttackGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppSecAttackGroup) *AppSecAttackGroup {
		return &v
	}).(AppSecAttackGroupPtrOutput)
}

type AppSecAttackGroupPtrOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecAttackGroup)(nil))
}

func (o AppSecAttackGroupPtrOutput) ToAppSecAttackGroupPtrOutput() AppSecAttackGroupPtrOutput {
	return o
}

func (o AppSecAttackGroupPtrOutput) ToAppSecAttackGroupPtrOutputWithContext(ctx context.Context) AppSecAttackGroupPtrOutput {
	return o
}

func (o AppSecAttackGroupPtrOutput) Elem() AppSecAttackGroupOutput {
	return o.ApplyT(func(v *AppSecAttackGroup) AppSecAttackGroup {
		if v != nil {
			return *v
		}
		var ret AppSecAttackGroup
		return ret
	}).(AppSecAttackGroupOutput)
}

type AppSecAttackGroupArrayOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecAttackGroup)(nil))
}

func (o AppSecAttackGroupArrayOutput) ToAppSecAttackGroupArrayOutput() AppSecAttackGroupArrayOutput {
	return o
}

func (o AppSecAttackGroupArrayOutput) ToAppSecAttackGroupArrayOutputWithContext(ctx context.Context) AppSecAttackGroupArrayOutput {
	return o
}

func (o AppSecAttackGroupArrayOutput) Index(i pulumi.IntInput) AppSecAttackGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecAttackGroup {
		return vs[0].([]AppSecAttackGroup)[vs[1].(int)]
	}).(AppSecAttackGroupOutput)
}

type AppSecAttackGroupMapOutput struct{ *pulumi.OutputState }

func (AppSecAttackGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecAttackGroup)(nil))
}

func (o AppSecAttackGroupMapOutput) ToAppSecAttackGroupMapOutput() AppSecAttackGroupMapOutput {
	return o
}

func (o AppSecAttackGroupMapOutput) ToAppSecAttackGroupMapOutputWithContext(ctx context.Context) AppSecAttackGroupMapOutput {
	return o
}

func (o AppSecAttackGroupMapOutput) MapIndex(k pulumi.StringInput) AppSecAttackGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecAttackGroup {
		return vs[0].(map[string]AppSecAttackGroup)[vs[1].(string)]
	}).(AppSecAttackGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupInput)(nil)).Elem(), &AppSecAttackGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupPtrInput)(nil)).Elem(), &AppSecAttackGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupArrayInput)(nil)).Elem(), AppSecAttackGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppSecAttackGroupMapInput)(nil)).Elem(), AppSecAttackGroupMap{})
	pulumi.RegisterOutputType(AppSecAttackGroupOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupPtrOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupArrayOutput{})
	pulumi.RegisterOutputType(AppSecAttackGroupMapOutput{})
}
