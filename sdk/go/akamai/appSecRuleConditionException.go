// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecRuleConditionException` resource to update a rule's conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
type AppSecRuleConditionException struct {
	pulumi.CustomResourceState

	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringOutput `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The ID of the rule to use.
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAppSecRuleConditionException registers a new resource with the given unique name, arguments, and options.
func NewAppSecRuleConditionException(ctx *pulumi.Context,
	name string, args *AppSecRuleConditionExceptionArgs, opts ...pulumi.ResourceOption) (*AppSecRuleConditionException, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionException == nil {
		return nil, errors.New("invalid value for required argument 'ConditionException'")
	}
	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource AppSecRuleConditionException
	err := ctx.RegisterResource("akamai:index/appSecRuleConditionException:AppSecRuleConditionException", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecRuleConditionException gets an existing AppSecRuleConditionException resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecRuleConditionException(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecRuleConditionExceptionState, opts ...pulumi.ResourceOption) (*AppSecRuleConditionException, error) {
	var resource AppSecRuleConditionException
	err := ctx.ReadResource("akamai:index/appSecRuleConditionException:AppSecRuleConditionException", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecRuleConditionException resources.
type appSecRuleConditionExceptionState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The ID of the rule to use.
	RuleId *int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version *int `pulumi:"version"`
}

type AppSecRuleConditionExceptionState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The ID of the rule to use.
	RuleId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
	// The version number of the security configuration to use.
	Version pulumi.IntPtrInput
}

func (AppSecRuleConditionExceptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleConditionExceptionState)(nil)).Elem()
}

type appSecRuleConditionExceptionArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The ID of the rule to use.
	RuleId int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// The version number of the security configuration to use.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a AppSecRuleConditionException resource.
type AppSecRuleConditionExceptionArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The ID of the rule to use.
	RuleId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
	// The version number of the security configuration to use.
	Version pulumi.IntInput
}

func (AppSecRuleConditionExceptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleConditionExceptionArgs)(nil)).Elem()
}

type AppSecRuleConditionExceptionInput interface {
	pulumi.Input

	ToAppSecRuleConditionExceptionOutput() AppSecRuleConditionExceptionOutput
	ToAppSecRuleConditionExceptionOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionOutput
}

func (*AppSecRuleConditionException) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRuleConditionException)(nil))
}

func (i *AppSecRuleConditionException) ToAppSecRuleConditionExceptionOutput() AppSecRuleConditionExceptionOutput {
	return i.ToAppSecRuleConditionExceptionOutputWithContext(context.Background())
}

func (i *AppSecRuleConditionException) ToAppSecRuleConditionExceptionOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleConditionExceptionOutput)
}

func (i *AppSecRuleConditionException) ToAppSecRuleConditionExceptionPtrOutput() AppSecRuleConditionExceptionPtrOutput {
	return i.ToAppSecRuleConditionExceptionPtrOutputWithContext(context.Background())
}

func (i *AppSecRuleConditionException) ToAppSecRuleConditionExceptionPtrOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleConditionExceptionPtrOutput)
}

type AppSecRuleConditionExceptionPtrInput interface {
	pulumi.Input

	ToAppSecRuleConditionExceptionPtrOutput() AppSecRuleConditionExceptionPtrOutput
	ToAppSecRuleConditionExceptionPtrOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionPtrOutput
}

type appSecRuleConditionExceptionPtrType AppSecRuleConditionExceptionArgs

func (*appSecRuleConditionExceptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRuleConditionException)(nil))
}

func (i *appSecRuleConditionExceptionPtrType) ToAppSecRuleConditionExceptionPtrOutput() AppSecRuleConditionExceptionPtrOutput {
	return i.ToAppSecRuleConditionExceptionPtrOutputWithContext(context.Background())
}

func (i *appSecRuleConditionExceptionPtrType) ToAppSecRuleConditionExceptionPtrOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleConditionExceptionPtrOutput)
}

// AppSecRuleConditionExceptionArrayInput is an input type that accepts AppSecRuleConditionExceptionArray and AppSecRuleConditionExceptionArrayOutput values.
// You can construct a concrete instance of `AppSecRuleConditionExceptionArrayInput` via:
//
//          AppSecRuleConditionExceptionArray{ AppSecRuleConditionExceptionArgs{...} }
type AppSecRuleConditionExceptionArrayInput interface {
	pulumi.Input

	ToAppSecRuleConditionExceptionArrayOutput() AppSecRuleConditionExceptionArrayOutput
	ToAppSecRuleConditionExceptionArrayOutputWithContext(context.Context) AppSecRuleConditionExceptionArrayOutput
}

type AppSecRuleConditionExceptionArray []AppSecRuleConditionExceptionInput

func (AppSecRuleConditionExceptionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecRuleConditionException)(nil))
}

func (i AppSecRuleConditionExceptionArray) ToAppSecRuleConditionExceptionArrayOutput() AppSecRuleConditionExceptionArrayOutput {
	return i.ToAppSecRuleConditionExceptionArrayOutputWithContext(context.Background())
}

func (i AppSecRuleConditionExceptionArray) ToAppSecRuleConditionExceptionArrayOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleConditionExceptionArrayOutput)
}

// AppSecRuleConditionExceptionMapInput is an input type that accepts AppSecRuleConditionExceptionMap and AppSecRuleConditionExceptionMapOutput values.
// You can construct a concrete instance of `AppSecRuleConditionExceptionMapInput` via:
//
//          AppSecRuleConditionExceptionMap{ "key": AppSecRuleConditionExceptionArgs{...} }
type AppSecRuleConditionExceptionMapInput interface {
	pulumi.Input

	ToAppSecRuleConditionExceptionMapOutput() AppSecRuleConditionExceptionMapOutput
	ToAppSecRuleConditionExceptionMapOutputWithContext(context.Context) AppSecRuleConditionExceptionMapOutput
}

type AppSecRuleConditionExceptionMap map[string]AppSecRuleConditionExceptionInput

func (AppSecRuleConditionExceptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecRuleConditionException)(nil))
}

func (i AppSecRuleConditionExceptionMap) ToAppSecRuleConditionExceptionMapOutput() AppSecRuleConditionExceptionMapOutput {
	return i.ToAppSecRuleConditionExceptionMapOutputWithContext(context.Background())
}

func (i AppSecRuleConditionExceptionMap) ToAppSecRuleConditionExceptionMapOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleConditionExceptionMapOutput)
}

type AppSecRuleConditionExceptionOutput struct {
	*pulumi.OutputState
}

func (AppSecRuleConditionExceptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRuleConditionException)(nil))
}

func (o AppSecRuleConditionExceptionOutput) ToAppSecRuleConditionExceptionOutput() AppSecRuleConditionExceptionOutput {
	return o
}

func (o AppSecRuleConditionExceptionOutput) ToAppSecRuleConditionExceptionOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionOutput {
	return o
}

func (o AppSecRuleConditionExceptionOutput) ToAppSecRuleConditionExceptionPtrOutput() AppSecRuleConditionExceptionPtrOutput {
	return o.ToAppSecRuleConditionExceptionPtrOutputWithContext(context.Background())
}

func (o AppSecRuleConditionExceptionOutput) ToAppSecRuleConditionExceptionPtrOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionPtrOutput {
	return o.ApplyT(func(v AppSecRuleConditionException) *AppSecRuleConditionException {
		return &v
	}).(AppSecRuleConditionExceptionPtrOutput)
}

type AppSecRuleConditionExceptionPtrOutput struct {
	*pulumi.OutputState
}

func (AppSecRuleConditionExceptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRuleConditionException)(nil))
}

func (o AppSecRuleConditionExceptionPtrOutput) ToAppSecRuleConditionExceptionPtrOutput() AppSecRuleConditionExceptionPtrOutput {
	return o
}

func (o AppSecRuleConditionExceptionPtrOutput) ToAppSecRuleConditionExceptionPtrOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionPtrOutput {
	return o
}

type AppSecRuleConditionExceptionArrayOutput struct{ *pulumi.OutputState }

func (AppSecRuleConditionExceptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecRuleConditionException)(nil))
}

func (o AppSecRuleConditionExceptionArrayOutput) ToAppSecRuleConditionExceptionArrayOutput() AppSecRuleConditionExceptionArrayOutput {
	return o
}

func (o AppSecRuleConditionExceptionArrayOutput) ToAppSecRuleConditionExceptionArrayOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionArrayOutput {
	return o
}

func (o AppSecRuleConditionExceptionArrayOutput) Index(i pulumi.IntInput) AppSecRuleConditionExceptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecRuleConditionException {
		return vs[0].([]AppSecRuleConditionException)[vs[1].(int)]
	}).(AppSecRuleConditionExceptionOutput)
}

type AppSecRuleConditionExceptionMapOutput struct{ *pulumi.OutputState }

func (AppSecRuleConditionExceptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecRuleConditionException)(nil))
}

func (o AppSecRuleConditionExceptionMapOutput) ToAppSecRuleConditionExceptionMapOutput() AppSecRuleConditionExceptionMapOutput {
	return o
}

func (o AppSecRuleConditionExceptionMapOutput) ToAppSecRuleConditionExceptionMapOutputWithContext(ctx context.Context) AppSecRuleConditionExceptionMapOutput {
	return o
}

func (o AppSecRuleConditionExceptionMapOutput) MapIndex(k pulumi.StringInput) AppSecRuleConditionExceptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecRuleConditionException {
		return vs[0].(map[string]AppSecRuleConditionException)[vs[1].(string)]
	}).(AppSecRuleConditionExceptionOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecRuleConditionExceptionOutput{})
	pulumi.RegisterOutputType(AppSecRuleConditionExceptionPtrOutput{})
	pulumi.RegisterOutputType(AppSecRuleConditionExceptionArrayOutput{})
	pulumi.RegisterOutputType(AppSecRuleConditionExceptionMapOutput{})
}
