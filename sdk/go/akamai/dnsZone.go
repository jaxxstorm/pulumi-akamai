// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `DnsZone` provides the resource for configuring a DNS zone to integrate easily with your existing DNS infrastructure to provide a secure, high performance, highly available and scalable solution for DNS hosting.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewDnsZone(ctx, "demozone", &akamai.DnsZoneArgs{
// 			Comment:  pulumi.String("some comment"),
// 			Contract: pulumi.String("ctr_1-AB123"),
// 			Group:    pulumi.String("100"),
// 			Masters: pulumi.StringArray{
// 				pulumi.String("1.2.3.4"),
// 				pulumi.String("1.2.3.5"),
// 			},
// 			SignAndServe: pulumi.Bool(false),
// 			Type:         pulumi.String("secondary"),
// 			Zone:         pulumi.String("example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DnsZone struct {
	pulumi.CustomResourceState

	ActivationState pulumi.StringOutput `pulumi:"activationState"`
	AliasCount      pulumi.IntOutput    `pulumi:"aliasCount"`
	// A descriptive comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The contract ID.
	Contract      pulumi.StringOutput    `pulumi:"contract"`
	EndCustomerId pulumi.StringPtrOutput `pulumi:"endCustomerId"`
	// The currently selected group ID.
	Group pulumi.StringOutput `pulumi:"group"`
	// The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayOutput `pulumi:"masters"`
	// Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrOutput `pulumi:"signAndServe"`
	// Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrOutput `pulumi:"signAndServeAlgorithm"`
	// The name of the zone whose configuration this zone will copy.
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrOutput `pulumi:"tsigKey"`
	// Whether the zone is `primary` or `secondary`.
	Type      pulumi.StringOutput `pulumi:"type"`
	VersionId pulumi.StringOutput `pulumi:"versionId"`
	// Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contract == nil {
		return nil, errors.New("invalid value for required argument 'Contract'")
	}
	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:edgedns/dnsZone:DnsZone"),
		},
	})
	opts = append(opts, aliases)
	var resource DnsZone
	err := ctx.RegisterResource("akamai:index/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("akamai:index/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	ActivationState *string `pulumi:"activationState"`
	AliasCount      *int    `pulumi:"aliasCount"`
	// A descriptive comment.
	Comment *string `pulumi:"comment"`
	// The contract ID.
	Contract      *string `pulumi:"contract"`
	EndCustomerId *string `pulumi:"endCustomerId"`
	// The currently selected group ID.
	Group *string `pulumi:"group"`
	// The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters []string `pulumi:"masters"`
	// Whether DNSSEC Sign&Serve is enabled.
	SignAndServe *bool `pulumi:"signAndServe"`
	// Algorithm used by Sign&Serve.
	SignAndServeAlgorithm *string `pulumi:"signAndServeAlgorithm"`
	// The name of the zone whose configuration this zone will copy.
	Target *string `pulumi:"target"`
	// TSIG Key used in secure zone transfers
	TsigKey *DnsZoneTsigKey `pulumi:"tsigKey"`
	// Whether the zone is `primary` or `secondary`.
	Type      *string `pulumi:"type"`
	VersionId *string `pulumi:"versionId"`
	// Domain zone, encapsulating any nested subdomains.
	Zone *string `pulumi:"zone"`
}

type DnsZoneState struct {
	ActivationState pulumi.StringPtrInput
	AliasCount      pulumi.IntPtrInput
	// A descriptive comment.
	Comment pulumi.StringPtrInput
	// The contract ID.
	Contract      pulumi.StringPtrInput
	EndCustomerId pulumi.StringPtrInput
	// The currently selected group ID.
	Group pulumi.StringPtrInput
	// The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayInput
	// Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrInput
	// Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrInput
	// The name of the zone whose configuration this zone will copy.
	Target pulumi.StringPtrInput
	// TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrInput
	// Whether the zone is `primary` or `secondary`.
	Type      pulumi.StringPtrInput
	VersionId pulumi.StringPtrInput
	// Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// A descriptive comment.
	Comment *string `pulumi:"comment"`
	// The contract ID.
	Contract      string  `pulumi:"contract"`
	EndCustomerId *string `pulumi:"endCustomerId"`
	// The currently selected group ID.
	Group string `pulumi:"group"`
	// The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters []string `pulumi:"masters"`
	// Whether DNSSEC Sign&Serve is enabled.
	SignAndServe *bool `pulumi:"signAndServe"`
	// Algorithm used by Sign&Serve.
	SignAndServeAlgorithm *string `pulumi:"signAndServeAlgorithm"`
	// The name of the zone whose configuration this zone will copy.
	Target *string `pulumi:"target"`
	// TSIG Key used in secure zone transfers
	TsigKey *DnsZoneTsigKey `pulumi:"tsigKey"`
	// Whether the zone is `primary` or `secondary`.
	Type string `pulumi:"type"`
	// Domain zone, encapsulating any nested subdomains.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// A descriptive comment.
	Comment pulumi.StringPtrInput
	// The contract ID.
	Contract      pulumi.StringInput
	EndCustomerId pulumi.StringPtrInput
	// The currently selected group ID.
	Group pulumi.StringInput
	// The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayInput
	// Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrInput
	// Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrInput
	// The name of the zone whose configuration this zone will copy.
	Target pulumi.StringPtrInput
	// TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrInput
	// Whether the zone is `primary` or `secondary`.
	Type pulumi.StringInput
	// Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}

type DnsZoneInput interface {
	pulumi.Input

	ToDnsZoneOutput() DnsZoneOutput
	ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput
}

func (*DnsZone) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsZone)(nil))
}

func (i *DnsZone) ToDnsZoneOutput() DnsZoneOutput {
	return i.ToDnsZoneOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneOutput)
}

func (i *DnsZone) ToDnsZonePtrOutput() DnsZonePtrOutput {
	return i.ToDnsZonePtrOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZonePtrOutputWithContext(ctx context.Context) DnsZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZonePtrOutput)
}

type DnsZonePtrInput interface {
	pulumi.Input

	ToDnsZonePtrOutput() DnsZonePtrOutput
	ToDnsZonePtrOutputWithContext(ctx context.Context) DnsZonePtrOutput
}

type dnsZonePtrType DnsZoneArgs

func (*dnsZonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil))
}

func (i *dnsZonePtrType) ToDnsZonePtrOutput() DnsZonePtrOutput {
	return i.ToDnsZonePtrOutputWithContext(context.Background())
}

func (i *dnsZonePtrType) ToDnsZonePtrOutputWithContext(ctx context.Context) DnsZonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZonePtrOutput)
}

// DnsZoneArrayInput is an input type that accepts DnsZoneArray and DnsZoneArrayOutput values.
// You can construct a concrete instance of `DnsZoneArrayInput` via:
//
//          DnsZoneArray{ DnsZoneArgs{...} }
type DnsZoneArrayInput interface {
	pulumi.Input

	ToDnsZoneArrayOutput() DnsZoneArrayOutput
	ToDnsZoneArrayOutputWithContext(context.Context) DnsZoneArrayOutput
}

type DnsZoneArray []DnsZoneInput

func (DnsZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*DnsZone)(nil))
}

func (i DnsZoneArray) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return i.ToDnsZoneArrayOutputWithContext(context.Background())
}

func (i DnsZoneArray) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneArrayOutput)
}

// DnsZoneMapInput is an input type that accepts DnsZoneMap and DnsZoneMapOutput values.
// You can construct a concrete instance of `DnsZoneMapInput` via:
//
//          DnsZoneMap{ "key": DnsZoneArgs{...} }
type DnsZoneMapInput interface {
	pulumi.Input

	ToDnsZoneMapOutput() DnsZoneMapOutput
	ToDnsZoneMapOutputWithContext(context.Context) DnsZoneMapOutput
}

type DnsZoneMap map[string]DnsZoneInput

func (DnsZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*DnsZone)(nil))
}

func (i DnsZoneMap) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return i.ToDnsZoneMapOutputWithContext(context.Background())
}

func (i DnsZoneMap) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneMapOutput)
}

type DnsZoneOutput struct {
	*pulumi.OutputState
}

func (DnsZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsZone)(nil))
}

func (o DnsZoneOutput) ToDnsZoneOutput() DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZonePtrOutput() DnsZonePtrOutput {
	return o.ToDnsZonePtrOutputWithContext(context.Background())
}

func (o DnsZoneOutput) ToDnsZonePtrOutputWithContext(ctx context.Context) DnsZonePtrOutput {
	return o.ApplyT(func(v DnsZone) *DnsZone {
		return &v
	}).(DnsZonePtrOutput)
}

type DnsZonePtrOutput struct {
	*pulumi.OutputState
}

func (DnsZonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil))
}

func (o DnsZonePtrOutput) ToDnsZonePtrOutput() DnsZonePtrOutput {
	return o
}

func (o DnsZonePtrOutput) ToDnsZonePtrOutputWithContext(ctx context.Context) DnsZonePtrOutput {
	return o
}

type DnsZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsZone)(nil))
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) Index(i pulumi.IntInput) DnsZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsZone {
		return vs[0].([]DnsZone)[vs[1].(int)]
	}).(DnsZoneOutput)
}

type DnsZoneMapOutput struct{ *pulumi.OutputState }

func (DnsZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsZone)(nil))
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) MapIndex(k pulumi.StringInput) DnsZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsZone {
		return vs[0].(map[string]DnsZone)[vs[1].(string)]
	}).(DnsZoneOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsZoneOutput{})
	pulumi.RegisterOutputType(DnsZonePtrOutput{})
	pulumi.RegisterOutputType(DnsZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneMapOutput{})
}
