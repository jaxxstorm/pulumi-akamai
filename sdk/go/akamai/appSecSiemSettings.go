// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecSiemSettings` resource to mpdate the SIEM integration settings for a specific configuration.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Security_configuration
// 		configuration, err := akamai.LookupAppSecConfiguration(ctx, &akamai.LookupAppSecConfigurationArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		opt1 := _var.Siem_definition_name
// 		siemDefinition, err := akamai.GetAppSecSiemDefinitions(ctx, &akamai.GetAppSecSiemDefinitionsArgs{
// 			SiemDefinitionName: &opt1,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		securityPolicies, err := akamai.LookupAppSecSecurityPolicy(ctx, &akamai.LookupAppSecSecurityPolicyArgs{
// 			ConfigId: configuration.ConfigId,
// 			Version:  configuration.LatestVersion,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = akamai.NewAppSecSiemSettings(ctx, "siem", &akamai.AppSecSiemSettingsArgs{
// 			ConfigId:             pulumi.Int(configuration.ConfigId),
// 			Version:              pulumi.Int(configuration.LatestVersion),
// 			EnableSiem:           pulumi.Bool(true),
// 			EnableForAllPolicies: pulumi.Bool(false),
// 			EnableBotmanSiem:     pulumi.Bool(true),
// 			SiemId:               pulumi.String(siemDefinition.Id),
// 			SecurityPolicyIds:    toPulumiStringArray(securityPolicies.PolicyLists),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// func toPulumiStringArray(arr []string) pulumi.StringArray {
// 	var pulumiArr pulumi.StringArray
// 	for _, v := range arr {
// 		pulumiArr = append(pulumiArr, pulumi.String(v))
// 	}
// 	return pulumiArr
// }
// ```
type AppSecSiemSettings struct {
	pulumi.CustomResourceState

	// The configuration ID to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// Whether you enabled SIEM for the Bot Manager events.
	EnableBotmanSiem pulumi.BoolPtrOutput `pulumi:"enableBotmanSiem"`
	// Whether you enabled SIEM for all the security policies in the configuration version.
	EnableForAllPolicies pulumi.BoolOutput `pulumi:"enableForAllPolicies"`
	// Whether you enabled SIEM in a security configuration version.
	EnableSiem pulumi.BoolOutput `pulumi:"enableSiem"`
	// A tabular display showing the updated SIEM integration settings.
	OutputText pulumi.StringOutput `pulumi:"outputText"`
	// The list of security policy identifiers for which to enable the SIEM integration.
	SecurityPolicyIds pulumi.StringArrayOutput `pulumi:"securityPolicyIds"`
	// An integer that uniquely identifies the SIEM settings.
	SiemId pulumi.IntOutput `pulumi:"siemId"`
	// The version number of the configuration to use.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAppSecSiemSettings registers a new resource with the given unique name, arguments, and options.
func NewAppSecSiemSettings(ctx *pulumi.Context,
	name string, args *AppSecSiemSettingsArgs, opts ...pulumi.ResourceOption) (*AppSecSiemSettings, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.EnableForAllPolicies == nil {
		return nil, errors.New("invalid value for required argument 'EnableForAllPolicies'")
	}
	if args.EnableSiem == nil {
		return nil, errors.New("invalid value for required argument 'EnableSiem'")
	}
	if args.SecurityPolicyIds == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyIds'")
	}
	if args.SiemId == nil {
		return nil, errors.New("invalid value for required argument 'SiemId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource AppSecSiemSettings
	err := ctx.RegisterResource("akamai:index/appSecSiemSettings:AppSecSiemSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecSiemSettings gets an existing AppSecSiemSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecSiemSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecSiemSettingsState, opts ...pulumi.ResourceOption) (*AppSecSiemSettings, error) {
	var resource AppSecSiemSettings
	err := ctx.ReadResource("akamai:index/appSecSiemSettings:AppSecSiemSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecSiemSettings resources.
type appSecSiemSettingsState struct {
	// The configuration ID to use.
	ConfigId *int `pulumi:"configId"`
	// Whether you enabled SIEM for the Bot Manager events.
	EnableBotmanSiem *bool `pulumi:"enableBotmanSiem"`
	// Whether you enabled SIEM for all the security policies in the configuration version.
	EnableForAllPolicies *bool `pulumi:"enableForAllPolicies"`
	// Whether you enabled SIEM in a security configuration version.
	EnableSiem *bool `pulumi:"enableSiem"`
	// A tabular display showing the updated SIEM integration settings.
	OutputText *string `pulumi:"outputText"`
	// The list of security policy identifiers for which to enable the SIEM integration.
	SecurityPolicyIds []string `pulumi:"securityPolicyIds"`
	// An integer that uniquely identifies the SIEM settings.
	SiemId *int `pulumi:"siemId"`
	// The version number of the configuration to use.
	Version *int `pulumi:"version"`
}

type AppSecSiemSettingsState struct {
	// The configuration ID to use.
	ConfigId pulumi.IntPtrInput
	// Whether you enabled SIEM for the Bot Manager events.
	EnableBotmanSiem pulumi.BoolPtrInput
	// Whether you enabled SIEM for all the security policies in the configuration version.
	EnableForAllPolicies pulumi.BoolPtrInput
	// Whether you enabled SIEM in a security configuration version.
	EnableSiem pulumi.BoolPtrInput
	// A tabular display showing the updated SIEM integration settings.
	OutputText pulumi.StringPtrInput
	// The list of security policy identifiers for which to enable the SIEM integration.
	SecurityPolicyIds pulumi.StringArrayInput
	// An integer that uniquely identifies the SIEM settings.
	SiemId pulumi.IntPtrInput
	// The version number of the configuration to use.
	Version pulumi.IntPtrInput
}

func (AppSecSiemSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecSiemSettingsState)(nil)).Elem()
}

type appSecSiemSettingsArgs struct {
	// The configuration ID to use.
	ConfigId int `pulumi:"configId"`
	// Whether you enabled SIEM for the Bot Manager events.
	EnableBotmanSiem *bool `pulumi:"enableBotmanSiem"`
	// Whether you enabled SIEM for all the security policies in the configuration version.
	EnableForAllPolicies bool `pulumi:"enableForAllPolicies"`
	// Whether you enabled SIEM in a security configuration version.
	EnableSiem bool `pulumi:"enableSiem"`
	// The list of security policy identifiers for which to enable the SIEM integration.
	SecurityPolicyIds []string `pulumi:"securityPolicyIds"`
	// An integer that uniquely identifies the SIEM settings.
	SiemId int `pulumi:"siemId"`
	// The version number of the configuration to use.
	Version int `pulumi:"version"`
}

// The set of arguments for constructing a AppSecSiemSettings resource.
type AppSecSiemSettingsArgs struct {
	// The configuration ID to use.
	ConfigId pulumi.IntInput
	// Whether you enabled SIEM for the Bot Manager events.
	EnableBotmanSiem pulumi.BoolPtrInput
	// Whether you enabled SIEM for all the security policies in the configuration version.
	EnableForAllPolicies pulumi.BoolInput
	// Whether you enabled SIEM in a security configuration version.
	EnableSiem pulumi.BoolInput
	// The list of security policy identifiers for which to enable the SIEM integration.
	SecurityPolicyIds pulumi.StringArrayInput
	// An integer that uniquely identifies the SIEM settings.
	SiemId pulumi.IntInput
	// The version number of the configuration to use.
	Version pulumi.IntInput
}

func (AppSecSiemSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecSiemSettingsArgs)(nil)).Elem()
}

type AppSecSiemSettingsInput interface {
	pulumi.Input

	ToAppSecSiemSettingsOutput() AppSecSiemSettingsOutput
	ToAppSecSiemSettingsOutputWithContext(ctx context.Context) AppSecSiemSettingsOutput
}

func (*AppSecSiemSettings) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecSiemSettings)(nil))
}

func (i *AppSecSiemSettings) ToAppSecSiemSettingsOutput() AppSecSiemSettingsOutput {
	return i.ToAppSecSiemSettingsOutputWithContext(context.Background())
}

func (i *AppSecSiemSettings) ToAppSecSiemSettingsOutputWithContext(ctx context.Context) AppSecSiemSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecSiemSettingsOutput)
}

func (i *AppSecSiemSettings) ToAppSecSiemSettingsPtrOutput() AppSecSiemSettingsPtrOutput {
	return i.ToAppSecSiemSettingsPtrOutputWithContext(context.Background())
}

func (i *AppSecSiemSettings) ToAppSecSiemSettingsPtrOutputWithContext(ctx context.Context) AppSecSiemSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecSiemSettingsPtrOutput)
}

type AppSecSiemSettingsPtrInput interface {
	pulumi.Input

	ToAppSecSiemSettingsPtrOutput() AppSecSiemSettingsPtrOutput
	ToAppSecSiemSettingsPtrOutputWithContext(ctx context.Context) AppSecSiemSettingsPtrOutput
}

type appSecSiemSettingsPtrType AppSecSiemSettingsArgs

func (*appSecSiemSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecSiemSettings)(nil))
}

func (i *appSecSiemSettingsPtrType) ToAppSecSiemSettingsPtrOutput() AppSecSiemSettingsPtrOutput {
	return i.ToAppSecSiemSettingsPtrOutputWithContext(context.Background())
}

func (i *appSecSiemSettingsPtrType) ToAppSecSiemSettingsPtrOutputWithContext(ctx context.Context) AppSecSiemSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecSiemSettingsPtrOutput)
}

// AppSecSiemSettingsArrayInput is an input type that accepts AppSecSiemSettingsArray and AppSecSiemSettingsArrayOutput values.
// You can construct a concrete instance of `AppSecSiemSettingsArrayInput` via:
//
//          AppSecSiemSettingsArray{ AppSecSiemSettingsArgs{...} }
type AppSecSiemSettingsArrayInput interface {
	pulumi.Input

	ToAppSecSiemSettingsArrayOutput() AppSecSiemSettingsArrayOutput
	ToAppSecSiemSettingsArrayOutputWithContext(context.Context) AppSecSiemSettingsArrayOutput
}

type AppSecSiemSettingsArray []AppSecSiemSettingsInput

func (AppSecSiemSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecSiemSettings)(nil))
}

func (i AppSecSiemSettingsArray) ToAppSecSiemSettingsArrayOutput() AppSecSiemSettingsArrayOutput {
	return i.ToAppSecSiemSettingsArrayOutputWithContext(context.Background())
}

func (i AppSecSiemSettingsArray) ToAppSecSiemSettingsArrayOutputWithContext(ctx context.Context) AppSecSiemSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecSiemSettingsArrayOutput)
}

// AppSecSiemSettingsMapInput is an input type that accepts AppSecSiemSettingsMap and AppSecSiemSettingsMapOutput values.
// You can construct a concrete instance of `AppSecSiemSettingsMapInput` via:
//
//          AppSecSiemSettingsMap{ "key": AppSecSiemSettingsArgs{...} }
type AppSecSiemSettingsMapInput interface {
	pulumi.Input

	ToAppSecSiemSettingsMapOutput() AppSecSiemSettingsMapOutput
	ToAppSecSiemSettingsMapOutputWithContext(context.Context) AppSecSiemSettingsMapOutput
}

type AppSecSiemSettingsMap map[string]AppSecSiemSettingsInput

func (AppSecSiemSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecSiemSettings)(nil))
}

func (i AppSecSiemSettingsMap) ToAppSecSiemSettingsMapOutput() AppSecSiemSettingsMapOutput {
	return i.ToAppSecSiemSettingsMapOutputWithContext(context.Background())
}

func (i AppSecSiemSettingsMap) ToAppSecSiemSettingsMapOutputWithContext(ctx context.Context) AppSecSiemSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecSiemSettingsMapOutput)
}

type AppSecSiemSettingsOutput struct {
	*pulumi.OutputState
}

func (AppSecSiemSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecSiemSettings)(nil))
}

func (o AppSecSiemSettingsOutput) ToAppSecSiemSettingsOutput() AppSecSiemSettingsOutput {
	return o
}

func (o AppSecSiemSettingsOutput) ToAppSecSiemSettingsOutputWithContext(ctx context.Context) AppSecSiemSettingsOutput {
	return o
}

func (o AppSecSiemSettingsOutput) ToAppSecSiemSettingsPtrOutput() AppSecSiemSettingsPtrOutput {
	return o.ToAppSecSiemSettingsPtrOutputWithContext(context.Background())
}

func (o AppSecSiemSettingsOutput) ToAppSecSiemSettingsPtrOutputWithContext(ctx context.Context) AppSecSiemSettingsPtrOutput {
	return o.ApplyT(func(v AppSecSiemSettings) *AppSecSiemSettings {
		return &v
	}).(AppSecSiemSettingsPtrOutput)
}

type AppSecSiemSettingsPtrOutput struct {
	*pulumi.OutputState
}

func (AppSecSiemSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecSiemSettings)(nil))
}

func (o AppSecSiemSettingsPtrOutput) ToAppSecSiemSettingsPtrOutput() AppSecSiemSettingsPtrOutput {
	return o
}

func (o AppSecSiemSettingsPtrOutput) ToAppSecSiemSettingsPtrOutputWithContext(ctx context.Context) AppSecSiemSettingsPtrOutput {
	return o
}

type AppSecSiemSettingsArrayOutput struct{ *pulumi.OutputState }

func (AppSecSiemSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecSiemSettings)(nil))
}

func (o AppSecSiemSettingsArrayOutput) ToAppSecSiemSettingsArrayOutput() AppSecSiemSettingsArrayOutput {
	return o
}

func (o AppSecSiemSettingsArrayOutput) ToAppSecSiemSettingsArrayOutputWithContext(ctx context.Context) AppSecSiemSettingsArrayOutput {
	return o
}

func (o AppSecSiemSettingsArrayOutput) Index(i pulumi.IntInput) AppSecSiemSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecSiemSettings {
		return vs[0].([]AppSecSiemSettings)[vs[1].(int)]
	}).(AppSecSiemSettingsOutput)
}

type AppSecSiemSettingsMapOutput struct{ *pulumi.OutputState }

func (AppSecSiemSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecSiemSettings)(nil))
}

func (o AppSecSiemSettingsMapOutput) ToAppSecSiemSettingsMapOutput() AppSecSiemSettingsMapOutput {
	return o
}

func (o AppSecSiemSettingsMapOutput) ToAppSecSiemSettingsMapOutputWithContext(ctx context.Context) AppSecSiemSettingsMapOutput {
	return o
}

func (o AppSecSiemSettingsMapOutput) MapIndex(k pulumi.StringInput) AppSecSiemSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecSiemSettings {
		return vs[0].(map[string]AppSecSiemSettings)[vs[1].(string)]
	}).(AppSecSiemSettingsOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecSiemSettingsOutput{})
	pulumi.RegisterOutputType(AppSecSiemSettingsPtrOutput{})
	pulumi.RegisterOutputType(AppSecSiemSettingsArrayOutput{})
	pulumi.RegisterOutputType(AppSecSiemSettingsMapOutput{})
}
