// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `GtmGeomap` resource to create, configure, and import a GTM Geographic map. Geographic mapping lets you configure a property that returns a CNAME based on the geographic location of the request.
//
// You can reuse maps for multiple properties or create new ones. To configure a property for geographic mapping, you need to define at least one geographic map for your domain. Each map needs at least two definitions. For example, you can have one definition that maps a set of countries to a specific data center, and a second definition that routes all other traffic.
//
// > **Note** Import requires an ID with this format: `existingDomainName`:`existingMapName`.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewGtmGeomap(ctx, "demoGeomap", &akamai.GtmGeomapArgs{
// 			DefaultDatacenter: &GtmGeomapDefaultDatacenterArgs{
// 				DatacenterId: pulumi.Int(5400),
// 				Nickname:     pulumi.String("All Others"),
// 			},
// 			Domain: pulumi.String("demo_domain.akadns.net"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Argument reference
//
// This resource supports these arguments:
//
// * `domain` - (Required) GTM Domain name for the Geographic Map.
// * `name` - (Required) A descriptive label for the Geographic map.
// * `defaultDatacenter` - (Required) A placeholder for all other geographic zones. Requires these additional arguments:
//   * `datacenterId` - (Required) For each property, an identifier for all other geographic zones.
//   * `nickname` - (Required) A descriptive label for all other geographic zones.
// * `waitOnComplete` - (Optional) A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
// * `assignment` - (Optional) Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
//   * `datacenterId` - (Required) A unique identifier for an existing data center in the domain.
//   * `nickname` - (Optional) A descriptive label for the group.
//   * `countries` - (Optional) Specifies an array of two-letter ISO 3166 country codes, or for finer subdivisions, the two-letter country code and the two-letter stateOrProvince code separated by a forward slash.
//
// ## Schema reference
//
// You can download the GTM Geographic Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#geographicmap) page.
type GtmGeomap struct {
	pulumi.CustomResourceState

	Assignments       GtmGeomapAssignmentArrayOutput   `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenterOutput `pulumi:"defaultDatacenter"`
	Domain            pulumi.StringOutput              `pulumi:"domain"`
	Name              pulumi.StringOutput              `pulumi:"name"`
	WaitOnComplete    pulumi.BoolPtrOutput             `pulumi:"waitOnComplete"`
}

// NewGtmGeomap registers a new resource with the given unique name, arguments, and options.
func NewGtmGeomap(ctx *pulumi.Context,
	name string, args *GtmGeomapArgs, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultDatacenter == nil {
		return nil, errors.New("invalid value for required argument 'DefaultDatacenter'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmGeomap:GtmGeomap"),
		},
	})
	opts = append(opts, aliases)
	var resource GtmGeomap
	err := ctx.RegisterResource("akamai:index/gtmGeomap:GtmGeomap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmGeomap gets an existing GtmGeomap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmGeomap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmGeomapState, opts ...pulumi.ResourceOption) (*GtmGeomap, error) {
	var resource GtmGeomap
	err := ctx.ReadResource("akamai:index/gtmGeomap:GtmGeomap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmGeomap resources.
type gtmGeomapState struct {
	Assignments       []GtmGeomapAssignment       `pulumi:"assignments"`
	DefaultDatacenter *GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            *string                     `pulumi:"domain"`
	Name              *string                     `pulumi:"name"`
	WaitOnComplete    *bool                       `pulumi:"waitOnComplete"`
}

type GtmGeomapState struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterPtrInput
	Domain            pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapState)(nil)).Elem()
}

type gtmGeomapArgs struct {
	Assignments       []GtmGeomapAssignment      `pulumi:"assignments"`
	DefaultDatacenter GtmGeomapDefaultDatacenter `pulumi:"defaultDatacenter"`
	Domain            string                     `pulumi:"domain"`
	Name              *string                    `pulumi:"name"`
	WaitOnComplete    *bool                      `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmGeomap resource.
type GtmGeomapArgs struct {
	Assignments       GtmGeomapAssignmentArrayInput
	DefaultDatacenter GtmGeomapDefaultDatacenterInput
	Domain            pulumi.StringInput
	Name              pulumi.StringPtrInput
	WaitOnComplete    pulumi.BoolPtrInput
}

func (GtmGeomapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmGeomapArgs)(nil)).Elem()
}

type GtmGeomapInput interface {
	pulumi.Input

	ToGtmGeomapOutput() GtmGeomapOutput
	ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput
}

func (*GtmGeomap) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmGeomap)(nil))
}

func (i *GtmGeomap) ToGtmGeomapOutput() GtmGeomapOutput {
	return i.ToGtmGeomapOutputWithContext(context.Background())
}

func (i *GtmGeomap) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapOutput)
}

func (i *GtmGeomap) ToGtmGeomapPtrOutput() GtmGeomapPtrOutput {
	return i.ToGtmGeomapPtrOutputWithContext(context.Background())
}

func (i *GtmGeomap) ToGtmGeomapPtrOutputWithContext(ctx context.Context) GtmGeomapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapPtrOutput)
}

type GtmGeomapPtrInput interface {
	pulumi.Input

	ToGtmGeomapPtrOutput() GtmGeomapPtrOutput
	ToGtmGeomapPtrOutputWithContext(ctx context.Context) GtmGeomapPtrOutput
}

type gtmGeomapPtrType GtmGeomapArgs

func (*gtmGeomapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmGeomap)(nil))
}

func (i *gtmGeomapPtrType) ToGtmGeomapPtrOutput() GtmGeomapPtrOutput {
	return i.ToGtmGeomapPtrOutputWithContext(context.Background())
}

func (i *gtmGeomapPtrType) ToGtmGeomapPtrOutputWithContext(ctx context.Context) GtmGeomapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapPtrOutput)
}

// GtmGeomapArrayInput is an input type that accepts GtmGeomapArray and GtmGeomapArrayOutput values.
// You can construct a concrete instance of `GtmGeomapArrayInput` via:
//
//          GtmGeomapArray{ GtmGeomapArgs{...} }
type GtmGeomapArrayInput interface {
	pulumi.Input

	ToGtmGeomapArrayOutput() GtmGeomapArrayOutput
	ToGtmGeomapArrayOutputWithContext(context.Context) GtmGeomapArrayOutput
}

type GtmGeomapArray []GtmGeomapInput

func (GtmGeomapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GtmGeomap)(nil)).Elem()
}

func (i GtmGeomapArray) ToGtmGeomapArrayOutput() GtmGeomapArrayOutput {
	return i.ToGtmGeomapArrayOutputWithContext(context.Background())
}

func (i GtmGeomapArray) ToGtmGeomapArrayOutputWithContext(ctx context.Context) GtmGeomapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapArrayOutput)
}

// GtmGeomapMapInput is an input type that accepts GtmGeomapMap and GtmGeomapMapOutput values.
// You can construct a concrete instance of `GtmGeomapMapInput` via:
//
//          GtmGeomapMap{ "key": GtmGeomapArgs{...} }
type GtmGeomapMapInput interface {
	pulumi.Input

	ToGtmGeomapMapOutput() GtmGeomapMapOutput
	ToGtmGeomapMapOutputWithContext(context.Context) GtmGeomapMapOutput
}

type GtmGeomapMap map[string]GtmGeomapInput

func (GtmGeomapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GtmGeomap)(nil)).Elem()
}

func (i GtmGeomapMap) ToGtmGeomapMapOutput() GtmGeomapMapOutput {
	return i.ToGtmGeomapMapOutputWithContext(context.Background())
}

func (i GtmGeomapMap) ToGtmGeomapMapOutputWithContext(ctx context.Context) GtmGeomapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmGeomapMapOutput)
}

type GtmGeomapOutput struct{ *pulumi.OutputState }

func (GtmGeomapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmGeomap)(nil))
}

func (o GtmGeomapOutput) ToGtmGeomapOutput() GtmGeomapOutput {
	return o
}

func (o GtmGeomapOutput) ToGtmGeomapOutputWithContext(ctx context.Context) GtmGeomapOutput {
	return o
}

func (o GtmGeomapOutput) ToGtmGeomapPtrOutput() GtmGeomapPtrOutput {
	return o.ToGtmGeomapPtrOutputWithContext(context.Background())
}

func (o GtmGeomapOutput) ToGtmGeomapPtrOutputWithContext(ctx context.Context) GtmGeomapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GtmGeomap) *GtmGeomap {
		return &v
	}).(GtmGeomapPtrOutput)
}

type GtmGeomapPtrOutput struct{ *pulumi.OutputState }

func (GtmGeomapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmGeomap)(nil))
}

func (o GtmGeomapPtrOutput) ToGtmGeomapPtrOutput() GtmGeomapPtrOutput {
	return o
}

func (o GtmGeomapPtrOutput) ToGtmGeomapPtrOutputWithContext(ctx context.Context) GtmGeomapPtrOutput {
	return o
}

func (o GtmGeomapPtrOutput) Elem() GtmGeomapOutput {
	return o.ApplyT(func(v *GtmGeomap) GtmGeomap {
		if v != nil {
			return *v
		}
		var ret GtmGeomap
		return ret
	}).(GtmGeomapOutput)
}

type GtmGeomapArrayOutput struct{ *pulumi.OutputState }

func (GtmGeomapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GtmGeomap)(nil))
}

func (o GtmGeomapArrayOutput) ToGtmGeomapArrayOutput() GtmGeomapArrayOutput {
	return o
}

func (o GtmGeomapArrayOutput) ToGtmGeomapArrayOutputWithContext(ctx context.Context) GtmGeomapArrayOutput {
	return o
}

func (o GtmGeomapArrayOutput) Index(i pulumi.IntInput) GtmGeomapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GtmGeomap {
		return vs[0].([]GtmGeomap)[vs[1].(int)]
	}).(GtmGeomapOutput)
}

type GtmGeomapMapOutput struct{ *pulumi.OutputState }

func (GtmGeomapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GtmGeomap)(nil))
}

func (o GtmGeomapMapOutput) ToGtmGeomapMapOutput() GtmGeomapMapOutput {
	return o
}

func (o GtmGeomapMapOutput) ToGtmGeomapMapOutputWithContext(ctx context.Context) GtmGeomapMapOutput {
	return o
}

func (o GtmGeomapMapOutput) MapIndex(k pulumi.StringInput) GtmGeomapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GtmGeomap {
		return vs[0].(map[string]GtmGeomap)[vs[1].(string)]
	}).(GtmGeomapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapInput)(nil)).Elem(), &GtmGeomap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapPtrInput)(nil)).Elem(), &GtmGeomap{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapArrayInput)(nil)).Elem(), GtmGeomapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GtmGeomapMapInput)(nil)).Elem(), GtmGeomapMap{})
	pulumi.RegisterOutputType(GtmGeomapOutput{})
	pulumi.RegisterOutputType(GtmGeomapPtrOutput{})
	pulumi.RegisterOutputType(GtmGeomapArrayOutput{})
	pulumi.RegisterOutputType(GtmGeomapMapOutput{})
}
