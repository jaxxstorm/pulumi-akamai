// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecEvalRule` resource to create or modify an eval rule's action, conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
type AppSecEvalRule struct {
	pulumi.CustomResourceState

	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevalconditionsexceptions))
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	RuleAction pulumi.StringOutput `pulumi:"ruleAction"`
	// The ID of the eval rule to use.
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecEvalRule registers a new resource with the given unique name, arguments, and options.
func NewAppSecEvalRule(ctx *pulumi.Context,
	name string, args *AppSecEvalRuleArgs, opts ...pulumi.ResourceOption) (*AppSecEvalRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.RuleAction == nil {
		return nil, errors.New("invalid value for required argument 'RuleAction'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource AppSecEvalRule
	err := ctx.RegisterResource("akamai:index/appSecEvalRule:AppSecEvalRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecEvalRule gets an existing AppSecEvalRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecEvalRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecEvalRuleState, opts ...pulumi.ResourceOption) (*AppSecEvalRule, error) {
	var resource AppSecEvalRule
	err := ctx.ReadResource("akamai:index/appSecEvalRule:AppSecEvalRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecEvalRule resources.
type appSecEvalRuleState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevalconditionsexceptions))
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	RuleAction *string `pulumi:"ruleAction"`
	// The ID of the eval rule to use.
	RuleId *int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecEvalRuleState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevalconditionsexceptions))
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	RuleAction pulumi.StringPtrInput
	// The ID of the eval rule to use.
	RuleId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecEvalRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalRuleState)(nil)).Elem()
}

type appSecEvalRuleArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevalconditionsexceptions))
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	RuleAction string `pulumi:"ruleAction"`
	// The ID of the eval rule to use.
	RuleId int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecEvalRule resource.
type AppSecEvalRuleArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putevalconditionsexceptions))
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action.
	RuleAction pulumi.StringInput
	// The ID of the eval rule to use.
	RuleId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
}

func (AppSecEvalRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecEvalRuleArgs)(nil)).Elem()
}

type AppSecEvalRuleInput interface {
	pulumi.Input

	ToAppSecEvalRuleOutput() AppSecEvalRuleOutput
	ToAppSecEvalRuleOutputWithContext(ctx context.Context) AppSecEvalRuleOutput
}

func (*AppSecEvalRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecEvalRule)(nil))
}

func (i *AppSecEvalRule) ToAppSecEvalRuleOutput() AppSecEvalRuleOutput {
	return i.ToAppSecEvalRuleOutputWithContext(context.Background())
}

func (i *AppSecEvalRule) ToAppSecEvalRuleOutputWithContext(ctx context.Context) AppSecEvalRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalRuleOutput)
}

func (i *AppSecEvalRule) ToAppSecEvalRulePtrOutput() AppSecEvalRulePtrOutput {
	return i.ToAppSecEvalRulePtrOutputWithContext(context.Background())
}

func (i *AppSecEvalRule) ToAppSecEvalRulePtrOutputWithContext(ctx context.Context) AppSecEvalRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalRulePtrOutput)
}

type AppSecEvalRulePtrInput interface {
	pulumi.Input

	ToAppSecEvalRulePtrOutput() AppSecEvalRulePtrOutput
	ToAppSecEvalRulePtrOutputWithContext(ctx context.Context) AppSecEvalRulePtrOutput
}

type appSecEvalRulePtrType AppSecEvalRuleArgs

func (*appSecEvalRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalRule)(nil))
}

func (i *appSecEvalRulePtrType) ToAppSecEvalRulePtrOutput() AppSecEvalRulePtrOutput {
	return i.ToAppSecEvalRulePtrOutputWithContext(context.Background())
}

func (i *appSecEvalRulePtrType) ToAppSecEvalRulePtrOutputWithContext(ctx context.Context) AppSecEvalRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalRulePtrOutput)
}

// AppSecEvalRuleArrayInput is an input type that accepts AppSecEvalRuleArray and AppSecEvalRuleArrayOutput values.
// You can construct a concrete instance of `AppSecEvalRuleArrayInput` via:
//
//          AppSecEvalRuleArray{ AppSecEvalRuleArgs{...} }
type AppSecEvalRuleArrayInput interface {
	pulumi.Input

	ToAppSecEvalRuleArrayOutput() AppSecEvalRuleArrayOutput
	ToAppSecEvalRuleArrayOutputWithContext(context.Context) AppSecEvalRuleArrayOutput
}

type AppSecEvalRuleArray []AppSecEvalRuleInput

func (AppSecEvalRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecEvalRule)(nil))
}

func (i AppSecEvalRuleArray) ToAppSecEvalRuleArrayOutput() AppSecEvalRuleArrayOutput {
	return i.ToAppSecEvalRuleArrayOutputWithContext(context.Background())
}

func (i AppSecEvalRuleArray) ToAppSecEvalRuleArrayOutputWithContext(ctx context.Context) AppSecEvalRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalRuleArrayOutput)
}

// AppSecEvalRuleMapInput is an input type that accepts AppSecEvalRuleMap and AppSecEvalRuleMapOutput values.
// You can construct a concrete instance of `AppSecEvalRuleMapInput` via:
//
//          AppSecEvalRuleMap{ "key": AppSecEvalRuleArgs{...} }
type AppSecEvalRuleMapInput interface {
	pulumi.Input

	ToAppSecEvalRuleMapOutput() AppSecEvalRuleMapOutput
	ToAppSecEvalRuleMapOutputWithContext(context.Context) AppSecEvalRuleMapOutput
}

type AppSecEvalRuleMap map[string]AppSecEvalRuleInput

func (AppSecEvalRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecEvalRule)(nil))
}

func (i AppSecEvalRuleMap) ToAppSecEvalRuleMapOutput() AppSecEvalRuleMapOutput {
	return i.ToAppSecEvalRuleMapOutputWithContext(context.Background())
}

func (i AppSecEvalRuleMap) ToAppSecEvalRuleMapOutputWithContext(ctx context.Context) AppSecEvalRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecEvalRuleMapOutput)
}

type AppSecEvalRuleOutput struct {
	*pulumi.OutputState
}

func (AppSecEvalRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecEvalRule)(nil))
}

func (o AppSecEvalRuleOutput) ToAppSecEvalRuleOutput() AppSecEvalRuleOutput {
	return o
}

func (o AppSecEvalRuleOutput) ToAppSecEvalRuleOutputWithContext(ctx context.Context) AppSecEvalRuleOutput {
	return o
}

func (o AppSecEvalRuleOutput) ToAppSecEvalRulePtrOutput() AppSecEvalRulePtrOutput {
	return o.ToAppSecEvalRulePtrOutputWithContext(context.Background())
}

func (o AppSecEvalRuleOutput) ToAppSecEvalRulePtrOutputWithContext(ctx context.Context) AppSecEvalRulePtrOutput {
	return o.ApplyT(func(v AppSecEvalRule) *AppSecEvalRule {
		return &v
	}).(AppSecEvalRulePtrOutput)
}

type AppSecEvalRulePtrOutput struct {
	*pulumi.OutputState
}

func (AppSecEvalRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecEvalRule)(nil))
}

func (o AppSecEvalRulePtrOutput) ToAppSecEvalRulePtrOutput() AppSecEvalRulePtrOutput {
	return o
}

func (o AppSecEvalRulePtrOutput) ToAppSecEvalRulePtrOutputWithContext(ctx context.Context) AppSecEvalRulePtrOutput {
	return o
}

type AppSecEvalRuleArrayOutput struct{ *pulumi.OutputState }

func (AppSecEvalRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecEvalRule)(nil))
}

func (o AppSecEvalRuleArrayOutput) ToAppSecEvalRuleArrayOutput() AppSecEvalRuleArrayOutput {
	return o
}

func (o AppSecEvalRuleArrayOutput) ToAppSecEvalRuleArrayOutputWithContext(ctx context.Context) AppSecEvalRuleArrayOutput {
	return o
}

func (o AppSecEvalRuleArrayOutput) Index(i pulumi.IntInput) AppSecEvalRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecEvalRule {
		return vs[0].([]AppSecEvalRule)[vs[1].(int)]
	}).(AppSecEvalRuleOutput)
}

type AppSecEvalRuleMapOutput struct{ *pulumi.OutputState }

func (AppSecEvalRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecEvalRule)(nil))
}

func (o AppSecEvalRuleMapOutput) ToAppSecEvalRuleMapOutput() AppSecEvalRuleMapOutput {
	return o
}

func (o AppSecEvalRuleMapOutput) ToAppSecEvalRuleMapOutputWithContext(ctx context.Context) AppSecEvalRuleMapOutput {
	return o
}

func (o AppSecEvalRuleMapOutput) MapIndex(k pulumi.StringInput) AppSecEvalRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecEvalRule {
		return vs[0].(map[string]AppSecEvalRule)[vs[1].(string)]
	}).(AppSecEvalRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecEvalRuleOutput{})
	pulumi.RegisterOutputType(AppSecEvalRulePtrOutput{})
	pulumi.RegisterOutputType(AppSecEvalRuleArrayOutput{})
	pulumi.RegisterOutputType(AppSecEvalRuleMapOutput{})
}
