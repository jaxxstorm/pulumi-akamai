// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `GtmResource` provides the resource for creating, configuring and importing a gtm resource to integrate easily with your existing GTM infrastructure to provide a secure, high performance, highly available and scalable solution for Global Traffic Management. Note: Import requires an ID of the format: `existingDomainName`:`existingResourceName`
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/v2/go/akamai"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := akamai.NewGtmResource(ctx, "demoResource", &akamai.GtmResourceArgs{
// 			AggregationType: pulumi.String("latest"),
// 			Domain:          pulumi.String("demo_domain.akadns.net"),
// 			Type:            pulumi.String("XML load object via HTTP"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type GtmResource struct {
	pulumi.CustomResourceState

	AggregationType     pulumi.StringOutput     `pulumi:"aggregationType"`
	ConstrainedProperty pulumi.StringPtrOutput  `pulumi:"constrainedProperty"`
	DecayRate           pulumi.Float64PtrOutput `pulumi:"decayRate"`
	Description         pulumi.StringPtrOutput  `pulumi:"description"`
	// Domain name
	Domain                      pulumi.StringOutput     `pulumi:"domain"`
	HostHeader                  pulumi.StringPtrOutput  `pulumi:"hostHeader"`
	LeaderString                pulumi.StringPtrOutput  `pulumi:"leaderString"`
	LeastSquaresDecay           pulumi.Float64PtrOutput `pulumi:"leastSquaresDecay"`
	LoadImbalancePercentage     pulumi.Float64PtrOutput `pulumi:"loadImbalancePercentage"`
	MaxUMultiplicativeIncrement pulumi.Float64PtrOutput `pulumi:"maxUMultiplicativeIncrement"`
	// Resource name
	// * `aggregationType`
	Name pulumi.StringOutput `pulumi:"name"`
	// * `datacenterId`
	// * `loadObject`
	// * `loadObjectPort`
	ResourceInstances GtmResourceResourceInstanceArrayOutput `pulumi:"resourceInstances"`
	// Resource type
	Type       pulumi.StringOutput `pulumi:"type"`
	UpperBound pulumi.IntPtrOutput `pulumi:"upperBound"`
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrOutput `pulumi:"waitOnComplete"`
}

// NewGtmResource registers a new resource with the given unique name, arguments, and options.
func NewGtmResource(ctx *pulumi.Context,
	name string, args *GtmResourceArgs, opts ...pulumi.ResourceOption) (*GtmResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AggregationType == nil {
		return nil, errors.New("invalid value for required argument 'AggregationType'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("akamai:trafficmanagement/gtmResource:GtmResource"),
		},
	})
	opts = append(opts, aliases)
	var resource GtmResource
	err := ctx.RegisterResource("akamai:index/gtmResource:GtmResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGtmResource gets an existing GtmResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGtmResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GtmResourceState, opts ...pulumi.ResourceOption) (*GtmResource, error) {
	var resource GtmResource
	err := ctx.ReadResource("akamai:index/gtmResource:GtmResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GtmResource resources.
type gtmResourceState struct {
	AggregationType     *string  `pulumi:"aggregationType"`
	ConstrainedProperty *string  `pulumi:"constrainedProperty"`
	DecayRate           *float64 `pulumi:"decayRate"`
	Description         *string  `pulumi:"description"`
	// Domain name
	Domain                      *string  `pulumi:"domain"`
	HostHeader                  *string  `pulumi:"hostHeader"`
	LeaderString                *string  `pulumi:"leaderString"`
	LeastSquaresDecay           *float64 `pulumi:"leastSquaresDecay"`
	LoadImbalancePercentage     *float64 `pulumi:"loadImbalancePercentage"`
	MaxUMultiplicativeIncrement *float64 `pulumi:"maxUMultiplicativeIncrement"`
	// Resource name
	// * `aggregationType`
	Name *string `pulumi:"name"`
	// * `datacenterId`
	// * `loadObject`
	// * `loadObjectPort`
	ResourceInstances []GtmResourceResourceInstance `pulumi:"resourceInstances"`
	// Resource type
	Type       *string `pulumi:"type"`
	UpperBound *int    `pulumi:"upperBound"`
	// Wait for transaction to complete
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

type GtmResourceState struct {
	AggregationType     pulumi.StringPtrInput
	ConstrainedProperty pulumi.StringPtrInput
	DecayRate           pulumi.Float64PtrInput
	Description         pulumi.StringPtrInput
	// Domain name
	Domain                      pulumi.StringPtrInput
	HostHeader                  pulumi.StringPtrInput
	LeaderString                pulumi.StringPtrInput
	LeastSquaresDecay           pulumi.Float64PtrInput
	LoadImbalancePercentage     pulumi.Float64PtrInput
	MaxUMultiplicativeIncrement pulumi.Float64PtrInput
	// Resource name
	// * `aggregationType`
	Name pulumi.StringPtrInput
	// * `datacenterId`
	// * `loadObject`
	// * `loadObjectPort`
	ResourceInstances GtmResourceResourceInstanceArrayInput
	// Resource type
	Type       pulumi.StringPtrInput
	UpperBound pulumi.IntPtrInput
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmResourceState)(nil)).Elem()
}

type gtmResourceArgs struct {
	AggregationType     string   `pulumi:"aggregationType"`
	ConstrainedProperty *string  `pulumi:"constrainedProperty"`
	DecayRate           *float64 `pulumi:"decayRate"`
	Description         *string  `pulumi:"description"`
	// Domain name
	Domain                      string   `pulumi:"domain"`
	HostHeader                  *string  `pulumi:"hostHeader"`
	LeaderString                *string  `pulumi:"leaderString"`
	LeastSquaresDecay           *float64 `pulumi:"leastSquaresDecay"`
	LoadImbalancePercentage     *float64 `pulumi:"loadImbalancePercentage"`
	MaxUMultiplicativeIncrement *float64 `pulumi:"maxUMultiplicativeIncrement"`
	// Resource name
	// * `aggregationType`
	Name *string `pulumi:"name"`
	// * `datacenterId`
	// * `loadObject`
	// * `loadObjectPort`
	ResourceInstances []GtmResourceResourceInstance `pulumi:"resourceInstances"`
	// Resource type
	Type       string `pulumi:"type"`
	UpperBound *int   `pulumi:"upperBound"`
	// Wait for transaction to complete
	WaitOnComplete *bool `pulumi:"waitOnComplete"`
}

// The set of arguments for constructing a GtmResource resource.
type GtmResourceArgs struct {
	AggregationType     pulumi.StringInput
	ConstrainedProperty pulumi.StringPtrInput
	DecayRate           pulumi.Float64PtrInput
	Description         pulumi.StringPtrInput
	// Domain name
	Domain                      pulumi.StringInput
	HostHeader                  pulumi.StringPtrInput
	LeaderString                pulumi.StringPtrInput
	LeastSquaresDecay           pulumi.Float64PtrInput
	LoadImbalancePercentage     pulumi.Float64PtrInput
	MaxUMultiplicativeIncrement pulumi.Float64PtrInput
	// Resource name
	// * `aggregationType`
	Name pulumi.StringPtrInput
	// * `datacenterId`
	// * `loadObject`
	// * `loadObjectPort`
	ResourceInstances GtmResourceResourceInstanceArrayInput
	// Resource type
	Type       pulumi.StringInput
	UpperBound pulumi.IntPtrInput
	// Wait for transaction to complete
	WaitOnComplete pulumi.BoolPtrInput
}

func (GtmResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gtmResourceArgs)(nil)).Elem()
}

type GtmResourceInput interface {
	pulumi.Input

	ToGtmResourceOutput() GtmResourceOutput
	ToGtmResourceOutputWithContext(ctx context.Context) GtmResourceOutput
}

func (*GtmResource) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmResource)(nil))
}

func (i *GtmResource) ToGtmResourceOutput() GtmResourceOutput {
	return i.ToGtmResourceOutputWithContext(context.Background())
}

func (i *GtmResource) ToGtmResourceOutputWithContext(ctx context.Context) GtmResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmResourceOutput)
}

func (i *GtmResource) ToGtmResourcePtrOutput() GtmResourcePtrOutput {
	return i.ToGtmResourcePtrOutputWithContext(context.Background())
}

func (i *GtmResource) ToGtmResourcePtrOutputWithContext(ctx context.Context) GtmResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmResourcePtrOutput)
}

type GtmResourcePtrInput interface {
	pulumi.Input

	ToGtmResourcePtrOutput() GtmResourcePtrOutput
	ToGtmResourcePtrOutputWithContext(ctx context.Context) GtmResourcePtrOutput
}

type gtmResourcePtrType GtmResourceArgs

func (*gtmResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmResource)(nil))
}

func (i *gtmResourcePtrType) ToGtmResourcePtrOutput() GtmResourcePtrOutput {
	return i.ToGtmResourcePtrOutputWithContext(context.Background())
}

func (i *gtmResourcePtrType) ToGtmResourcePtrOutputWithContext(ctx context.Context) GtmResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmResourcePtrOutput)
}

// GtmResourceArrayInput is an input type that accepts GtmResourceArray and GtmResourceArrayOutput values.
// You can construct a concrete instance of `GtmResourceArrayInput` via:
//
//          GtmResourceArray{ GtmResourceArgs{...} }
type GtmResourceArrayInput interface {
	pulumi.Input

	ToGtmResourceArrayOutput() GtmResourceArrayOutput
	ToGtmResourceArrayOutputWithContext(context.Context) GtmResourceArrayOutput
}

type GtmResourceArray []GtmResourceInput

func (GtmResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*GtmResource)(nil))
}

func (i GtmResourceArray) ToGtmResourceArrayOutput() GtmResourceArrayOutput {
	return i.ToGtmResourceArrayOutputWithContext(context.Background())
}

func (i GtmResourceArray) ToGtmResourceArrayOutputWithContext(ctx context.Context) GtmResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmResourceArrayOutput)
}

// GtmResourceMapInput is an input type that accepts GtmResourceMap and GtmResourceMapOutput values.
// You can construct a concrete instance of `GtmResourceMapInput` via:
//
//          GtmResourceMap{ "key": GtmResourceArgs{...} }
type GtmResourceMapInput interface {
	pulumi.Input

	ToGtmResourceMapOutput() GtmResourceMapOutput
	ToGtmResourceMapOutputWithContext(context.Context) GtmResourceMapOutput
}

type GtmResourceMap map[string]GtmResourceInput

func (GtmResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*GtmResource)(nil))
}

func (i GtmResourceMap) ToGtmResourceMapOutput() GtmResourceMapOutput {
	return i.ToGtmResourceMapOutputWithContext(context.Background())
}

func (i GtmResourceMap) ToGtmResourceMapOutputWithContext(ctx context.Context) GtmResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GtmResourceMapOutput)
}

type GtmResourceOutput struct {
	*pulumi.OutputState
}

func (GtmResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GtmResource)(nil))
}

func (o GtmResourceOutput) ToGtmResourceOutput() GtmResourceOutput {
	return o
}

func (o GtmResourceOutput) ToGtmResourceOutputWithContext(ctx context.Context) GtmResourceOutput {
	return o
}

func (o GtmResourceOutput) ToGtmResourcePtrOutput() GtmResourcePtrOutput {
	return o.ToGtmResourcePtrOutputWithContext(context.Background())
}

func (o GtmResourceOutput) ToGtmResourcePtrOutputWithContext(ctx context.Context) GtmResourcePtrOutput {
	return o.ApplyT(func(v GtmResource) *GtmResource {
		return &v
	}).(GtmResourcePtrOutput)
}

type GtmResourcePtrOutput struct {
	*pulumi.OutputState
}

func (GtmResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GtmResource)(nil))
}

func (o GtmResourcePtrOutput) ToGtmResourcePtrOutput() GtmResourcePtrOutput {
	return o
}

func (o GtmResourcePtrOutput) ToGtmResourcePtrOutputWithContext(ctx context.Context) GtmResourcePtrOutput {
	return o
}

type GtmResourceArrayOutput struct{ *pulumi.OutputState }

func (GtmResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GtmResource)(nil))
}

func (o GtmResourceArrayOutput) ToGtmResourceArrayOutput() GtmResourceArrayOutput {
	return o
}

func (o GtmResourceArrayOutput) ToGtmResourceArrayOutputWithContext(ctx context.Context) GtmResourceArrayOutput {
	return o
}

func (o GtmResourceArrayOutput) Index(i pulumi.IntInput) GtmResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GtmResource {
		return vs[0].([]GtmResource)[vs[1].(int)]
	}).(GtmResourceOutput)
}

type GtmResourceMapOutput struct{ *pulumi.OutputState }

func (GtmResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GtmResource)(nil))
}

func (o GtmResourceMapOutput) ToGtmResourceMapOutput() GtmResourceMapOutput {
	return o
}

func (o GtmResourceMapOutput) ToGtmResourceMapOutputWithContext(ctx context.Context) GtmResourceMapOutput {
	return o
}

func (o GtmResourceMapOutput) MapIndex(k pulumi.StringInput) GtmResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GtmResource {
		return vs[0].(map[string]GtmResource)[vs[1].(string)]
	}).(GtmResourceOutput)
}

func init() {
	pulumi.RegisterOutputType(GtmResourceOutput{})
	pulumi.RegisterOutputType(GtmResourcePtrOutput{})
	pulumi.RegisterOutputType(GtmResourceArrayOutput{})
	pulumi.RegisterOutputType(GtmResourceMapOutput{})
}
