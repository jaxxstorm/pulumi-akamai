// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package edgedns

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The `EdgeDNS.DnsZone` provides the resource for configuring a dns zone to integrate easily with your existing DNS infrastructure to provide a secure, high performance, highly available and scalable solution for DNS hosting.
//
// ## Example Usage
// ### Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-akamai/sdk/go/akamai/EdgeDNS"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := EdgeDNS.NewDnsZone(ctx, "demozone", &EdgeDNS.DnsZoneArgs{
// 			Comment:  pulumi.String("some comment"),
// 			Contract: pulumi.String("ctr_XXX"),
// 			Group:    pulumi.String("100"),
// 			Masters: pulumi.StringArray{
// 				pulumi.String("1.2.3.4"),
// 				pulumi.String("1.2.3.5"),
// 			},
// 			SignAndServe: pulumi.Bool(false),
// 			Type:         pulumi.String("secondary"),
// 			Zone:         pulumi.String("example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DnsZone struct {
	pulumi.CustomResourceState

	ActivationState pulumi.StringOutput `pulumi:"activationState"`
	AliasCount      pulumi.IntOutput    `pulumi:"aliasCount"`
	// — (Required) A descriptive comment.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// — (Required) The contract ID.
	Contract pulumi.StringOutput `pulumi:"contract"`
	// — (Optional)
	EndCustomerId pulumi.StringPtrOutput `pulumi:"endCustomerId"`
	// — (Required) The currently selected group ID.
	Group pulumi.StringOutput `pulumi:"group"`
	// — (Required for Secondary) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayOutput `pulumi:"masters"`
	// — (Optional) Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrOutput `pulumi:"signAndServe"`
	// — (Optional) Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrOutput `pulumi:"signAndServeAlgorithm"`
	// — (Required for Alias)
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// — (Optional) TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrOutput `pulumi:"tsigKey"`
	// — (Required) Whether the zone is primary or secondary.
	Type      pulumi.StringOutput `pulumi:"type"`
	VersionId pulumi.StringOutput `pulumi:"versionId"`
	// — (Required) Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil || args.Contract == nil {
		return nil, errors.New("missing required argument 'Contract'")
	}
	if args == nil || args.Group == nil {
		return nil, errors.New("missing required argument 'Group'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Zone == nil {
		return nil, errors.New("missing required argument 'Zone'")
	}
	if args == nil {
		args = &DnsZoneArgs{}
	}
	var resource DnsZone
	err := ctx.RegisterResource("akamai:EdgeDNS/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("akamai:EdgeDNS/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	ActivationState *string `pulumi:"activationState"`
	AliasCount      *int    `pulumi:"aliasCount"`
	// — (Required) A descriptive comment.
	Comment *string `pulumi:"comment"`
	// — (Required) The contract ID.
	Contract *string `pulumi:"contract"`
	// — (Optional)
	EndCustomerId *string `pulumi:"endCustomerId"`
	// — (Required) The currently selected group ID.
	Group *string `pulumi:"group"`
	// — (Required for Secondary) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters []string `pulumi:"masters"`
	// — (Optional) Whether DNSSEC Sign&Serve is enabled.
	SignAndServe *bool `pulumi:"signAndServe"`
	// — (Optional) Algorithm used by Sign&Serve.
	SignAndServeAlgorithm *string `pulumi:"signAndServeAlgorithm"`
	// — (Required for Alias)
	Target *string `pulumi:"target"`
	// — (Optional) TSIG Key used in secure zone transfers
	TsigKey *DnsZoneTsigKey `pulumi:"tsigKey"`
	// — (Required) Whether the zone is primary or secondary.
	Type      *string `pulumi:"type"`
	VersionId *string `pulumi:"versionId"`
	// — (Required) Domain zone, encapsulating any nested subdomains.
	Zone *string `pulumi:"zone"`
}

type DnsZoneState struct {
	ActivationState pulumi.StringPtrInput
	AliasCount      pulumi.IntPtrInput
	// — (Required) A descriptive comment.
	Comment pulumi.StringPtrInput
	// — (Required) The contract ID.
	Contract pulumi.StringPtrInput
	// — (Optional)
	EndCustomerId pulumi.StringPtrInput
	// — (Required) The currently selected group ID.
	Group pulumi.StringPtrInput
	// — (Required for Secondary) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayInput
	// — (Optional) Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrInput
	// — (Optional) Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrInput
	// — (Required for Alias)
	Target pulumi.StringPtrInput
	// — (Optional) TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrInput
	// — (Required) Whether the zone is primary or secondary.
	Type      pulumi.StringPtrInput
	VersionId pulumi.StringPtrInput
	// — (Required) Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// — (Required) A descriptive comment.
	Comment *string `pulumi:"comment"`
	// — (Required) The contract ID.
	Contract string `pulumi:"contract"`
	// — (Optional)
	EndCustomerId *string `pulumi:"endCustomerId"`
	// — (Required) The currently selected group ID.
	Group string `pulumi:"group"`
	// — (Required for Secondary) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters []string `pulumi:"masters"`
	// — (Optional) Whether DNSSEC Sign&Serve is enabled.
	SignAndServe *bool `pulumi:"signAndServe"`
	// — (Optional) Algorithm used by Sign&Serve.
	SignAndServeAlgorithm *string `pulumi:"signAndServeAlgorithm"`
	// — (Required for Alias)
	Target *string `pulumi:"target"`
	// — (Optional) TSIG Key used in secure zone transfers
	TsigKey *DnsZoneTsigKey `pulumi:"tsigKey"`
	// — (Required) Whether the zone is primary or secondary.
	Type string `pulumi:"type"`
	// — (Required) Domain zone, encapsulating any nested subdomains.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// — (Required) A descriptive comment.
	Comment pulumi.StringPtrInput
	// — (Required) The contract ID.
	Contract pulumi.StringInput
	// — (Optional)
	EndCustomerId pulumi.StringPtrInput
	// — (Required) The currently selected group ID.
	Group pulumi.StringInput
	// — (Required for Secondary) The names or addresses of the customer’s nameservers from which the zone data should be retrieved.
	Masters pulumi.StringArrayInput
	// — (Optional) Whether DNSSEC Sign&Serve is enabled.
	SignAndServe pulumi.BoolPtrInput
	// — (Optional) Algorithm used by Sign&Serve.
	SignAndServeAlgorithm pulumi.StringPtrInput
	// — (Required for Alias)
	Target pulumi.StringPtrInput
	// — (Optional) TSIG Key used in secure zone transfers
	TsigKey DnsZoneTsigKeyPtrInput
	// — (Required) Whether the zone is primary or secondary.
	Type pulumi.StringInput
	// — (Required) Domain zone, encapsulating any nested subdomains.
	Zone pulumi.StringInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}
