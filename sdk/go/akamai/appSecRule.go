// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package akamai

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the `AppSecRule` resource to create or modify a rule's action, conditions and exceptions. When the conditions are met, the ruleâ€™s actions are ignored and not applied to that specific traffic.
type AppSecRule struct {
	pulumi.CustomResourceState

	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringPtrOutput `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId pulumi.IntOutput `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action. __ASE Beta__. if policy is in ASE_AUTO mode, only conditionException can be modified, "ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more.
	RuleAction pulumi.StringPtrOutput `pulumi:"ruleAction"`
	// The ID of the rule to use.
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
}

// NewAppSecRule registers a new resource with the given unique name, arguments, and options.
func NewAppSecRule(ctx *pulumi.Context,
	name string, args *AppSecRuleArgs, opts ...pulumi.ResourceOption) (*AppSecRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.SecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityPolicyId'")
	}
	var resource AppSecRule
	err := ctx.RegisterResource("akamai:index/appSecRule:AppSecRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppSecRule gets an existing AppSecRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppSecRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppSecRuleState, opts ...pulumi.ResourceOption) (*AppSecRule, error) {
	var resource AppSecRule
	err := ctx.ReadResource("akamai:index/appSecRule:AppSecRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppSecRule resources.
type appSecRuleState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId *int `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action. __ASE Beta__. if policy is in ASE_AUTO mode, only conditionException can be modified, "ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more.
	RuleAction *string `pulumi:"ruleAction"`
	// The ID of the rule to use.
	RuleId *int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
}

type AppSecRuleState struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntPtrInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action. __ASE Beta__. if policy is in ASE_AUTO mode, only conditionException can be modified, "ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more.
	RuleAction pulumi.StringPtrInput
	// The ID of the rule to use.
	RuleId pulumi.IntPtrInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringPtrInput
}

func (AppSecRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleState)(nil)).Elem()
}

type appSecRuleArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException *string `pulumi:"conditionException"`
	// The ID of the security configuration to use.
	ConfigId int `pulumi:"configId"`
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action. __ASE Beta__. if policy is in ASE_AUTO mode, only conditionException can be modified, "ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more.
	RuleAction *string `pulumi:"ruleAction"`
	// The ID of the rule to use.
	RuleId int `pulumi:"ruleId"`
	// The ID of the security policy to use.
	SecurityPolicyId string `pulumi:"securityPolicyId"`
}

// The set of arguments for constructing a AppSecRule resource.
type AppSecRuleArgs struct {
	// The name of a file containing a JSON-formatted description of the conditions and exceptions to use ([format](https://developer.akamai.com/api/cloud_security/application_security/v1.html#putconditionexception))
	ConditionException pulumi.StringPtrInput
	// The ID of the security configuration to use.
	ConfigId pulumi.IntInput
	// The action to be taken: `alert` to record the trigger of the event, `deny` to block the request, `deny_custom_{custom_deny_id}` to execute a custom deny action, or `none` to take no action. __ASE Beta__. if policy is in ASE_AUTO mode, only conditionException can be modified, "ASE (Adaptive Security Engine) is currently in beta. Please contact your Akamai representative to learn more.
	RuleAction pulumi.StringPtrInput
	// The ID of the rule to use.
	RuleId pulumi.IntInput
	// The ID of the security policy to use.
	SecurityPolicyId pulumi.StringInput
}

func (AppSecRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appSecRuleArgs)(nil)).Elem()
}

type AppSecRuleInput interface {
	pulumi.Input

	ToAppSecRuleOutput() AppSecRuleOutput
	ToAppSecRuleOutputWithContext(ctx context.Context) AppSecRuleOutput
}

func (*AppSecRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRule)(nil))
}

func (i *AppSecRule) ToAppSecRuleOutput() AppSecRuleOutput {
	return i.ToAppSecRuleOutputWithContext(context.Background())
}

func (i *AppSecRule) ToAppSecRuleOutputWithContext(ctx context.Context) AppSecRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleOutput)
}

func (i *AppSecRule) ToAppSecRulePtrOutput() AppSecRulePtrOutput {
	return i.ToAppSecRulePtrOutputWithContext(context.Background())
}

func (i *AppSecRule) ToAppSecRulePtrOutputWithContext(ctx context.Context) AppSecRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRulePtrOutput)
}

type AppSecRulePtrInput interface {
	pulumi.Input

	ToAppSecRulePtrOutput() AppSecRulePtrOutput
	ToAppSecRulePtrOutputWithContext(ctx context.Context) AppSecRulePtrOutput
}

type appSecRulePtrType AppSecRuleArgs

func (*appSecRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRule)(nil))
}

func (i *appSecRulePtrType) ToAppSecRulePtrOutput() AppSecRulePtrOutput {
	return i.ToAppSecRulePtrOutputWithContext(context.Background())
}

func (i *appSecRulePtrType) ToAppSecRulePtrOutputWithContext(ctx context.Context) AppSecRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRulePtrOutput)
}

// AppSecRuleArrayInput is an input type that accepts AppSecRuleArray and AppSecRuleArrayOutput values.
// You can construct a concrete instance of `AppSecRuleArrayInput` via:
//
//          AppSecRuleArray{ AppSecRuleArgs{...} }
type AppSecRuleArrayInput interface {
	pulumi.Input

	ToAppSecRuleArrayOutput() AppSecRuleArrayOutput
	ToAppSecRuleArrayOutputWithContext(context.Context) AppSecRuleArrayOutput
}

type AppSecRuleArray []AppSecRuleInput

func (AppSecRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppSecRule)(nil))
}

func (i AppSecRuleArray) ToAppSecRuleArrayOutput() AppSecRuleArrayOutput {
	return i.ToAppSecRuleArrayOutputWithContext(context.Background())
}

func (i AppSecRuleArray) ToAppSecRuleArrayOutputWithContext(ctx context.Context) AppSecRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleArrayOutput)
}

// AppSecRuleMapInput is an input type that accepts AppSecRuleMap and AppSecRuleMapOutput values.
// You can construct a concrete instance of `AppSecRuleMapInput` via:
//
//          AppSecRuleMap{ "key": AppSecRuleArgs{...} }
type AppSecRuleMapInput interface {
	pulumi.Input

	ToAppSecRuleMapOutput() AppSecRuleMapOutput
	ToAppSecRuleMapOutputWithContext(context.Context) AppSecRuleMapOutput
}

type AppSecRuleMap map[string]AppSecRuleInput

func (AppSecRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppSecRule)(nil))
}

func (i AppSecRuleMap) ToAppSecRuleMapOutput() AppSecRuleMapOutput {
	return i.ToAppSecRuleMapOutputWithContext(context.Background())
}

func (i AppSecRuleMap) ToAppSecRuleMapOutputWithContext(ctx context.Context) AppSecRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppSecRuleMapOutput)
}

type AppSecRuleOutput struct {
	*pulumi.OutputState
}

func (AppSecRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppSecRule)(nil))
}

func (o AppSecRuleOutput) ToAppSecRuleOutput() AppSecRuleOutput {
	return o
}

func (o AppSecRuleOutput) ToAppSecRuleOutputWithContext(ctx context.Context) AppSecRuleOutput {
	return o
}

func (o AppSecRuleOutput) ToAppSecRulePtrOutput() AppSecRulePtrOutput {
	return o.ToAppSecRulePtrOutputWithContext(context.Background())
}

func (o AppSecRuleOutput) ToAppSecRulePtrOutputWithContext(ctx context.Context) AppSecRulePtrOutput {
	return o.ApplyT(func(v AppSecRule) *AppSecRule {
		return &v
	}).(AppSecRulePtrOutput)
}

type AppSecRulePtrOutput struct {
	*pulumi.OutputState
}

func (AppSecRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppSecRule)(nil))
}

func (o AppSecRulePtrOutput) ToAppSecRulePtrOutput() AppSecRulePtrOutput {
	return o
}

func (o AppSecRulePtrOutput) ToAppSecRulePtrOutputWithContext(ctx context.Context) AppSecRulePtrOutput {
	return o
}

type AppSecRuleArrayOutput struct{ *pulumi.OutputState }

func (AppSecRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppSecRule)(nil))
}

func (o AppSecRuleArrayOutput) ToAppSecRuleArrayOutput() AppSecRuleArrayOutput {
	return o
}

func (o AppSecRuleArrayOutput) ToAppSecRuleArrayOutputWithContext(ctx context.Context) AppSecRuleArrayOutput {
	return o
}

func (o AppSecRuleArrayOutput) Index(i pulumi.IntInput) AppSecRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppSecRule {
		return vs[0].([]AppSecRule)[vs[1].(int)]
	}).(AppSecRuleOutput)
}

type AppSecRuleMapOutput struct{ *pulumi.OutputState }

func (AppSecRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppSecRule)(nil))
}

func (o AppSecRuleMapOutput) ToAppSecRuleMapOutput() AppSecRuleMapOutput {
	return o
}

func (o AppSecRuleMapOutput) ToAppSecRuleMapOutputWithContext(ctx context.Context) AppSecRuleMapOutput {
	return o
}

func (o AppSecRuleMapOutput) MapIndex(k pulumi.StringInput) AppSecRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppSecRule {
		return vs[0].(map[string]AppSecRule)[vs[1].(string)]
	}).(AppSecRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(AppSecRuleOutput{})
	pulumi.RegisterOutputType(AppSecRulePtrOutput{})
	pulumi.RegisterOutputType(AppSecRuleArrayOutput{})
	pulumi.RegisterOutputType(AppSecRuleMapOutput{})
}
