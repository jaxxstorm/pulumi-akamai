// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// The `resource_akamai_appsec_advanced_settings_prefetch` resource allows you to enable inspection of internal requests (those between your origin and Akamaiâ€™s servers) for file types that you specify. You can also apply rate controls to prefetch requests. This operation applies at the configuration level.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
    ///         {
    ///             Name = @var.Security_configuration,
    ///         }));
    ///         var prefetch = new Akamai.AppSecAdvancedSettingsPrefetch("prefetch", new Akamai.AppSecAdvancedSettingsPrefetchArgs
    ///         {
    ///             ConfigId = configuration.Apply(configuration =&gt; configuration.ConfigId),
    ///             EnableAppLayer = false,
    ///             AllExtensions = true,
    ///             EnableRateControls = false,
    ///             Extensions = @var.Extensions,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch")]
    public partial class AppSecAdvancedSettingsPrefetch : Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable prefetch requests for all extensions.
        /// </summary>
        [Output("allExtensions")]
        public Output<bool> AllExtensions { get; private set; } = null!;

        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests.
        /// </summary>
        [Output("enableAppLayer")]
        public Output<bool> EnableAppLayer { get; private set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests for rate controls.
        /// </summary>
        [Output("enableRateControls")]
        public Output<bool> EnableRateControls { get; private set; } = null!;

        /// <summary>
        /// The specific extensions for which to enable prefetch requests. If `all_extensions` is True, `extensions` must be an empty list.
        /// </summary>
        [Output("extensions")]
        public Output<ImmutableArray<string>> Extensions { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecAdvancedSettingsPrefetch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecAdvancedSettingsPrefetch(string name, AppSecAdvancedSettingsPrefetchArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch", name, args ?? new AppSecAdvancedSettingsPrefetchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecAdvancedSettingsPrefetch(string name, Input<string> id, AppSecAdvancedSettingsPrefetchState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecAdvancedSettingsPrefetch:AppSecAdvancedSettingsPrefetch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecAdvancedSettingsPrefetch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecAdvancedSettingsPrefetch Get(string name, Input<string> id, AppSecAdvancedSettingsPrefetchState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecAdvancedSettingsPrefetch(name, id, state, options);
        }
    }

    public sealed class AppSecAdvancedSettingsPrefetchArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable prefetch requests for all extensions.
        /// </summary>
        [Input("allExtensions", required: true)]
        public Input<bool> AllExtensions { get; set; } = null!;

        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests.
        /// </summary>
        [Input("enableAppLayer", required: true)]
        public Input<bool> EnableAppLayer { get; set; } = null!;

        /// <summary>
        /// Whether to enable prefetch requests for rate controls.
        /// </summary>
        [Input("enableRateControls", required: true)]
        public Input<bool> EnableRateControls { get; set; } = null!;

        [Input("extensions", required: true)]
        private InputList<string>? _extensions;

        /// <summary>
        /// The specific extensions for which to enable prefetch requests. If `all_extensions` is True, `extensions` must be an empty list.
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        public AppSecAdvancedSettingsPrefetchArgs()
        {
        }
    }

    public sealed class AppSecAdvancedSettingsPrefetchState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable prefetch requests for all extensions.
        /// </summary>
        [Input("allExtensions")]
        public Input<bool>? AllExtensions { get; set; }

        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        /// <summary>
        /// Whether to enable prefetch requests.
        /// </summary>
        [Input("enableAppLayer")]
        public Input<bool>? EnableAppLayer { get; set; }

        /// <summary>
        /// Whether to enable prefetch requests for rate controls.
        /// </summary>
        [Input("enableRateControls")]
        public Input<bool>? EnableRateControls { get; set; }

        [Input("extensions")]
        private InputList<string>? _extensions;

        /// <summary>
        /// The specific extensions for which to enable prefetch requests. If `all_extensions` is True, `extensions` must be an empty list.
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        public AppSecAdvancedSettingsPrefetchState()
        {
        }
    }
}
