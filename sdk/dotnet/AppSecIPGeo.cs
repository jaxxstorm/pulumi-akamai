// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// Use the `akamai.AppSecIPGeo` resource to update the method and which network lists to use for IP/Geo firewall blocking.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
    ///         {
    ///             Name = @var.Security_configuration,
    ///         }));
    ///         // USE CASE: user wants to update the IP/GEO firewall mode to "block specific IPs/Subnets and Geos" and update the IP list, GEO list &amp; Exception list
    ///         var ipGeoBlock = new Akamai.AppSecIPGeo("ipGeoBlock", new Akamai.AppSecIPGeoArgs
    ///         {
    ///             ConfigId = configuration.Apply(configuration =&gt; configuration.ConfigId),
    ///             SecurityPolicyId = @var.Security_policy_id1,
    ///             Mode = @var.Block,
    ///             GeoNetworkLists = @var.Geo_network_lists,
    ///             IpNetworkLists = @var.Ip_network_lists,
    ///             ExceptionIpNetworkLists = @var.Exception_ip_network_lists,
    ///         });
    ///         // USE CASE: user wants to update the IP/GEO firewall mode to "block all traffic except IPs/Subnets in block exceptions" and update the Exception list
    ///         var ipGeoAllow = new Akamai.AppSecIPGeo("ipGeoAllow", new Akamai.AppSecIPGeoArgs
    ///         {
    ///             ConfigId = configuration.Apply(configuration =&gt; configuration.ConfigId),
    ///             SecurityPolicyId = @var.Security_policy_id2,
    ///             Mode = @var.Allow,
    ///             ExceptionIpNetworkLists = @var.Exception_ip_network_lists,
    ///         });
    ///         this.IpGeoModeBlock = ipGeoBlock.Mode;
    ///         this.BlockGeoNetworkLists = ipGeoBlock.GeoNetworkLists;
    ///         this.BlockIpNetworkLists = ipGeoBlock.IpNetworkLists;
    ///         this.BlockExceptionIpNetworkLists = ipGeoBlock.ExceptionIpNetworkLists;
    ///         this.IpGeoModeAllow = ipGeoAllow.Mode;
    ///         this.AllowExceptionIpNetworkLists = ipGeoAllow.ExceptionIpNetworkLists;
    ///     }
    /// 
    ///     [Output("ipGeoModeBlock")]
    ///     public Output&lt;string&gt; IpGeoModeBlock { get; set; }
    ///     [Output("blockGeoNetworkLists")]
    ///     public Output&lt;string&gt; BlockGeoNetworkLists { get; set; }
    ///     [Output("blockIpNetworkLists")]
    ///     public Output&lt;string&gt; BlockIpNetworkLists { get; set; }
    ///     [Output("blockExceptionIpNetworkLists")]
    ///     public Output&lt;string&gt; BlockExceptionIpNetworkLists { get; set; }
    ///     [Output("ipGeoModeAllow")]
    ///     public Output&lt;string&gt; IpGeoModeAllow { get; set; }
    ///     [Output("allowExceptionIpNetworkLists")]
    ///     public Output&lt;string&gt; AllowExceptionIpNetworkLists { get; set; }
    /// }
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/appSecIPGeo:AppSecIPGeo")]
    public partial class AppSecIPGeo : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The network lists to be allowed regardless of `mode`, `geo_network_lists`, and `ip_network_lists` parameters.
        /// </summary>
        [Output("exceptionIpNetworkLists")]
        public Output<ImmutableArray<string>> ExceptionIpNetworkLists { get; private set; } = null!;

        /// <summary>
        /// The network lists to be blocked or allowed geographically.
        /// </summary>
        [Output("geoNetworkLists")]
        public Output<ImmutableArray<string>> GeoNetworkLists { get; private set; } = null!;

        /// <summary>
        /// The network lists to be blocked or allowd by IP address.
        /// </summary>
        [Output("ipNetworkLists")]
        public Output<ImmutableArray<string>> IpNetworkLists { get; private set; } = null!;

        /// <summary>
        /// The mode to use for IP/Geo firewall blocking: `block` to block specific IPs, geographies or network lists, or `allow` to allow specific IPs or geographies to be let through while blocking the rest.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The ID of the security policy to use.
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecIPGeo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecIPGeo(string name, AppSecIPGeoArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecIPGeo:AppSecIPGeo", name, args ?? new AppSecIPGeoArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecIPGeo(string name, Input<string> id, AppSecIPGeoState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecIPGeo:AppSecIPGeo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecIPGeo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecIPGeo Get(string name, Input<string> id, AppSecIPGeoState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecIPGeo(name, id, state, options);
        }
    }

    public sealed class AppSecIPGeoArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        [Input("exceptionIpNetworkLists")]
        private InputList<string>? _exceptionIpNetworkLists;

        /// <summary>
        /// The network lists to be allowed regardless of `mode`, `geo_network_lists`, and `ip_network_lists` parameters.
        /// </summary>
        public InputList<string> ExceptionIpNetworkLists
        {
            get => _exceptionIpNetworkLists ?? (_exceptionIpNetworkLists = new InputList<string>());
            set => _exceptionIpNetworkLists = value;
        }

        [Input("geoNetworkLists")]
        private InputList<string>? _geoNetworkLists;

        /// <summary>
        /// The network lists to be blocked or allowed geographically.
        /// </summary>
        public InputList<string> GeoNetworkLists
        {
            get => _geoNetworkLists ?? (_geoNetworkLists = new InputList<string>());
            set => _geoNetworkLists = value;
        }

        [Input("ipNetworkLists")]
        private InputList<string>? _ipNetworkLists;

        /// <summary>
        /// The network lists to be blocked or allowd by IP address.
        /// </summary>
        public InputList<string> IpNetworkLists
        {
            get => _ipNetworkLists ?? (_ipNetworkLists = new InputList<string>());
            set => _ipNetworkLists = value;
        }

        /// <summary>
        /// The mode to use for IP/Geo firewall blocking: `block` to block specific IPs, geographies or network lists, or `allow` to allow specific IPs or geographies to be let through while blocking the rest.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// The ID of the security policy to use.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public Input<string> SecurityPolicyId { get; set; } = null!;

        public AppSecIPGeoArgs()
        {
        }
    }

    public sealed class AppSecIPGeoState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        [Input("exceptionIpNetworkLists")]
        private InputList<string>? _exceptionIpNetworkLists;

        /// <summary>
        /// The network lists to be allowed regardless of `mode`, `geo_network_lists`, and `ip_network_lists` parameters.
        /// </summary>
        public InputList<string> ExceptionIpNetworkLists
        {
            get => _exceptionIpNetworkLists ?? (_exceptionIpNetworkLists = new InputList<string>());
            set => _exceptionIpNetworkLists = value;
        }

        [Input("geoNetworkLists")]
        private InputList<string>? _geoNetworkLists;

        /// <summary>
        /// The network lists to be blocked or allowed geographically.
        /// </summary>
        public InputList<string> GeoNetworkLists
        {
            get => _geoNetworkLists ?? (_geoNetworkLists = new InputList<string>());
            set => _geoNetworkLists = value;
        }

        [Input("ipNetworkLists")]
        private InputList<string>? _ipNetworkLists;

        /// <summary>
        /// The network lists to be blocked or allowd by IP address.
        /// </summary>
        public InputList<string> IpNetworkLists
        {
            get => _ipNetworkLists ?? (_ipNetworkLists = new InputList<string>());
            set => _ipNetworkLists = value;
        }

        /// <summary>
        /// The mode to use for IP/Geo firewall blocking: `block` to block specific IPs, geographies or network lists, or `allow` to allow specific IPs or geographies to be let through while blocking the rest.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The ID of the security policy to use.
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        public AppSecIPGeoState()
        {
        }
    }
}
