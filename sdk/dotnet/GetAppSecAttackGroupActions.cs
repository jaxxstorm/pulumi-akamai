// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    public static class GetAppSecAttackGroupActions
    {
        /// <summary>
        /// Use the `akamai.getAppSecAttackGroupActions` data source to retrieve a list of attack groups and actions associated with a security policy or a specific attack group and action associated with a security policy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
        ///         {
        ///             Name = @var.Security_configuration,
        ///         }));
        ///         var attackGroupActions = Output.Tuple(configuration, configuration).Apply(values =&gt;
        ///         {
        ///             var configuration = values.Item1;
        ///             var configuration1 = values.Item2;
        ///             return Output.Create(Akamai.GetAppSecAttackGroupActions.InvokeAsync(new Akamai.GetAppSecAttackGroupActionsArgs
        ///             {
        ///                 ConfigId = configuration.ConfigId,
        ///                 Version = configuration1.LatestVersion,
        ///                 SecurityPolicyId = @var.Security_policy_id,
        ///             }));
        ///         });
        ///         this.AttackGroupActionsText = attackGroupActions.Apply(attackGroupActions =&gt; attackGroupActions.OutputText);
        ///         this.AttackGroupActionsJson = attackGroupActions.Apply(attackGroupActions =&gt; attackGroupActions.Json);
        ///         var attackGroupActionAppSecAttackGroupActions = Output.Tuple(configuration, configuration).Apply(values =&gt;
        ///         {
        ///             var configuration = values.Item1;
        ///             var configuration1 = values.Item2;
        ///             return Output.Create(Akamai.GetAppSecAttackGroupActions.InvokeAsync(new Akamai.GetAppSecAttackGroupActionsArgs
        ///             {
        ///                 ConfigId = configuration.ConfigId,
        ///                 Version = configuration1.LatestVersion,
        ///                 SecurityPolicyId = @var.Security_policy_id,
        ///                 AttackGroup = @var.Attack_group,
        ///             }));
        ///         });
        ///         this.AttackGroupAction = attackGroupActionAppSecAttackGroupActions.Apply(attackGroupActionAppSecAttackGroupActions =&gt; attackGroupActionAppSecAttackGroupActions.Action);
        ///     }
        /// 
        ///     [Output("attackGroupActionsText")]
        ///     public Output&lt;string&gt; AttackGroupActionsText { get; set; }
        ///     [Output("attackGroupActionsJson")]
        ///     public Output&lt;string&gt; AttackGroupActionsJson { get; set; }
        ///     [Output("attackGroupAction")]
        ///     public Output&lt;string&gt; AttackGroupAction { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAppSecAttackGroupActionsResult> InvokeAsync(GetAppSecAttackGroupActionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppSecAttackGroupActionsResult>("akamai:index/getAppSecAttackGroupActions:getAppSecAttackGroupActions", args ?? new GetAppSecAttackGroupActionsArgs(), options.WithVersion());
    }


    public sealed class GetAppSecAttackGroupActionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The attack group to use. If not supplied, information about all attack groups will be returned.
        /// </summary>
        [Input("attackGroup")]
        public string? AttackGroup { get; set; }

        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public int ConfigId { get; set; }

        /// <summary>
        /// The ID of the security policy to use.
        /// </summary>
        [Input("securityPolicyId", required: true)]
        public string SecurityPolicyId { get; set; } = null!;

        /// <summary>
        /// The version number of the security configuration to use.
        /// </summary>
        [Input("version", required: true)]
        public int Version { get; set; }

        public GetAppSecAttackGroupActionsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAppSecAttackGroupActionsResult
    {
        /// <summary>
        /// The attack group action for the attack group if one was specified: `alert`, `deny`, or `none`. If the action is none, the attack group is inactive in the security policy.
        /// </summary>
        public readonly string Action;
        public readonly string? AttackGroup;
        public readonly int ConfigId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The attack group information in JSON format.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// A tabular display showing the `action` and `group` name for each attack group.
        /// </summary>
        public readonly string OutputText;
        public readonly string SecurityPolicyId;
        public readonly int Version;

        [OutputConstructor]
        private GetAppSecAttackGroupActionsResult(
            string action,

            string? attackGroup,

            int configId,

            string id,

            string json,

            string outputText,

            string securityPolicyId,

            int version)
        {
            Action = action;
            AttackGroup = attackGroup;
            ConfigId = configId;
            Id = id;
            Json = json;
            OutputText = outputText;
            SecurityPolicyId = securityPolicyId;
            Version = version;
        }
    }
}
