// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai.Properties
{
    /// <summary>
    /// The `akamai.Properties.PropertyVariables` allows you to implement dynamic functionality. You can perform conditional logic based on the variableâ€™s value, and catch any unforeseen errors that execute on the edge at runtime.
    /// 
    /// Typical uses for variables include:
    /// 
    /// * Simplify configurations by reducing the number of rules and behaviors.
    /// * Improve self serviceability by replacing or extending advanced metadata.
    /// * Automate redirects, forward path rewrites, HTTP header and cookie manipulation.
    /// * Move origin functionality to the edge.
    /// 
    /// ## Example Usage
    /// ### Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var origin = new Akamai.Properties.PropertyVariables("origin", new Akamai.Properties.PropertyVariablesArgs
    ///         {
    ///             Variables = 
    ///             {
    ///                 new Akamai.Properties.Inputs.PropertyVariablesVariableArgs
    ///                 {
    ///                     Variables = 
    ///                     {
    ///                         new Akamai.Properties.Inputs.PropertyVariablesVariableVariableArgs
    ///                         {
    ///                             Description = "Origin Hostname",
    ///                             Hidden = true,
    ///                             Name = "PMUSER_ORIGIN",
    ///                             Sensitive = true,
    ///                             Value = "origin.example.org",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class PropertyVariables : Pulumi.CustomResource
    {
        /// <summary>
        /// JSON variables representation
        /// </summary>
        [Output("json")]
        public Output<string> Json { get; private set; } = null!;

        [Output("variables")]
        public Output<ImmutableArray<Outputs.PropertyVariablesVariable>> Variables { get; private set; } = null!;


        /// <summary>
        /// Create a PropertyVariables resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PropertyVariables(string name, PropertyVariablesArgs? args = null, CustomResourceOptions? options = null)
            : base("akamai:Properties/propertyVariables:PropertyVariables", name, args ?? new PropertyVariablesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PropertyVariables(string name, Input<string> id, PropertyVariablesState? state = null, CustomResourceOptions? options = null)
            : base("akamai:Properties/propertyVariables:PropertyVariables", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PropertyVariables resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PropertyVariables Get(string name, Input<string> id, PropertyVariablesState? state = null, CustomResourceOptions? options = null)
        {
            return new PropertyVariables(name, id, state, options);
        }
    }

    public sealed class PropertyVariablesArgs : Pulumi.ResourceArgs
    {
        [Input("variables")]
        private InputList<Inputs.PropertyVariablesVariableArgs>? _variables;
        public InputList<Inputs.PropertyVariablesVariableArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.PropertyVariablesVariableArgs>());
            set => _variables = value;
        }

        public PropertyVariablesArgs()
        {
        }
    }

    public sealed class PropertyVariablesState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// JSON variables representation
        /// </summary>
        [Input("json")]
        public Input<string>? Json { get; set; }

        [Input("variables")]
        private InputList<Inputs.PropertyVariablesVariableGetArgs>? _variables;
        public InputList<Inputs.PropertyVariablesVariableGetArgs> Variables
        {
            get => _variables ?? (_variables = new InputList<Inputs.PropertyVariablesVariableGetArgs>());
            set => _variables = value;
        }

        public PropertyVariablesState()
        {
        }
    }
}
