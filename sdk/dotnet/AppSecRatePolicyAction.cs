// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// The `resource_akamai_appsec_rate_policy_action` resource allows you to create, modify or delete the actions in a rate policy.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
    ///         {
    ///             Name = @var.Security_configuration,
    ///         }));
    ///         var appsecRatePolicy = new Akamai.AppSecRatePolicy("appsecRatePolicy", new Akamai.AppSecRatePolicyArgs
    ///         {
    ///             ConfigId = configuration.Apply(configuration =&gt; configuration.ConfigId),
    ///             RatePolicy = File.ReadAllText($"{path.Module}/rate_policy.json"),
    ///         });
    ///         var appsecRatePolicyAction = new Akamai.AppSecRatePolicyAction("appsecRatePolicyAction", new Akamai.AppSecRatePolicyActionArgs
    ///         {
    ///             ConfigId = configuration.Apply(configuration =&gt; configuration.ConfigId),
    ///             SecurityPolicyId = @var.Security_policy_id,
    ///             RatePolicyId = appsecRatePolicy.RatePolicyId,
    ///             Ipv4Action = "deny",
    ///             Ipv6Action = "deny",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AkamaiResourceType("akamai:index/appSecRatePolicyAction:AppSecRatePolicyAction")]
    public partial class AppSecRatePolicyAction : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Output("configId")]
        public Output<int> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The ipv4 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Output("ipv4Action")]
        public Output<string> Ipv4Action { get; private set; } = null!;

        /// <summary>
        /// The ipv6 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Output("ipv6Action")]
        public Output<string> Ipv6Action { get; private set; } = null!;

        /// <summary>
        /// The ID of the rate policy to use.
        /// </summary>
        [Output("ratePolicyId")]
        public Output<int> RatePolicyId { get; private set; } = null!;

        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;


        /// <summary>
        /// Create a AppSecRatePolicyAction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppSecRatePolicyAction(string name, AppSecRatePolicyActionArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/appSecRatePolicyAction:AppSecRatePolicyAction", name, args ?? new AppSecRatePolicyActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppSecRatePolicyAction(string name, Input<string> id, AppSecRatePolicyActionState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/appSecRatePolicyAction:AppSecRatePolicyAction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppSecRatePolicyAction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppSecRatePolicyAction Get(string name, Input<string> id, AppSecRatePolicyActionState? state = null, CustomResourceOptions? options = null)
        {
            return new AppSecRatePolicyAction(name, id, state, options);
        }
    }

    public sealed class AppSecRatePolicyActionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// The ipv4 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Input("ipv4Action", required: true)]
        public Input<string> Ipv4Action { get; set; } = null!;

        /// <summary>
        /// The ipv6 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Input("ipv6Action", required: true)]
        public Input<string> Ipv6Action { get; set; } = null!;

        /// <summary>
        /// The ID of the rate policy to use.
        /// </summary>
        [Input("ratePolicyId", required: true)]
        public Input<int> RatePolicyId { get; set; } = null!;

        [Input("securityPolicyId", required: true)]
        public Input<string> SecurityPolicyId { get; set; } = null!;

        public AppSecRatePolicyActionArgs()
        {
        }
    }

    public sealed class AppSecRatePolicyActionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId")]
        public Input<int>? ConfigId { get; set; }

        /// <summary>
        /// The ipv4 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Input("ipv4Action")]
        public Input<string>? Ipv4Action { get; set; }

        /// <summary>
        /// The ipv6 action to assign to this rate policy, either `alert`, `deny`, `deny_custom_{custom_deny_id}`, or `none`. If the action is none, the rate policy is inactive in the policy.
        /// </summary>
        [Input("ipv6Action")]
        public Input<string>? Ipv6Action { get; set; }

        /// <summary>
        /// The ID of the rate policy to use.
        /// </summary>
        [Input("ratePolicyId")]
        public Input<int>? RatePolicyId { get; set; }

        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        public AppSecRatePolicyActionState()
        {
        }
    }
}
