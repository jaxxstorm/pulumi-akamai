// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Akamai
{
    public static class GetAppSecSecurityPolicy
    {
        /// <summary>
        /// Use the `akamai.AppSecSecurityPolicy` data source to retrieve information about the security policies associated with a specific security configuration, or about a specific security policy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
        ///         {
        ///             Name = "Akamai Tools",
        ///         }));
        ///         var securityPolicies = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecSecurityPolicy.InvokeAsync(new Akamai.GetAppSecSecurityPolicyArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///         })));
        ///         this.SecurityPoliciesList = securityPolicies.Apply(securityPolicies =&gt; securityPolicies.SecurityPolicyIdLists);
        ///         this.SecurityPoliciesText = securityPolicies.Apply(securityPolicies =&gt; securityPolicies.OutputText);
        ///         var specificSecurityPolicy = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecSecurityPolicy.InvokeAsync(new Akamai.GetAppSecSecurityPolicyArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyName = "APIs",
        ///         })));
        ///         this.SpecificSecurityPolicyId = specificSecurityPolicy.Apply(specificSecurityPolicy =&gt; specificSecurityPolicy.SecurityPolicyId);
        ///     }
        /// 
        ///     [Output("securityPoliciesList")]
        ///     public Output&lt;string&gt; SecurityPoliciesList { get; set; }
        ///     [Output("securityPoliciesText")]
        ///     public Output&lt;string&gt; SecurityPoliciesText { get; set; }
        ///     [Output("specificSecurityPolicyId")]
        ///     public Output&lt;string&gt; SpecificSecurityPolicyId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAppSecSecurityPolicyResult> InvokeAsync(GetAppSecSecurityPolicyArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAppSecSecurityPolicyResult>("akamai:index/getAppSecSecurityPolicy:getAppSecSecurityPolicy", args ?? new GetAppSecSecurityPolicyArgs(), options.WithVersion());

        /// <summary>
        /// Use the `akamai.AppSecSecurityPolicy` data source to retrieve information about the security policies associated with a specific security configuration, or about a specific security policy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Akamai = Pulumi.Akamai;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var configuration = Output.Create(Akamai.GetAppSecConfiguration.InvokeAsync(new Akamai.GetAppSecConfigurationArgs
        ///         {
        ///             Name = "Akamai Tools",
        ///         }));
        ///         var securityPolicies = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecSecurityPolicy.InvokeAsync(new Akamai.GetAppSecSecurityPolicyArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///         })));
        ///         this.SecurityPoliciesList = securityPolicies.Apply(securityPolicies =&gt; securityPolicies.SecurityPolicyIdLists);
        ///         this.SecurityPoliciesText = securityPolicies.Apply(securityPolicies =&gt; securityPolicies.OutputText);
        ///         var specificSecurityPolicy = configuration.Apply(configuration =&gt; Output.Create(Akamai.GetAppSecSecurityPolicy.InvokeAsync(new Akamai.GetAppSecSecurityPolicyArgs
        ///         {
        ///             ConfigId = configuration.ConfigId,
        ///             SecurityPolicyName = "APIs",
        ///         })));
        ///         this.SpecificSecurityPolicyId = specificSecurityPolicy.Apply(specificSecurityPolicy =&gt; specificSecurityPolicy.SecurityPolicyId);
        ///     }
        /// 
        ///     [Output("securityPoliciesList")]
        ///     public Output&lt;string&gt; SecurityPoliciesList { get; set; }
        ///     [Output("securityPoliciesText")]
        ///     public Output&lt;string&gt; SecurityPoliciesText { get; set; }
        ///     [Output("specificSecurityPolicyId")]
        ///     public Output&lt;string&gt; SpecificSecurityPolicyId { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAppSecSecurityPolicyResult> Invoke(GetAppSecSecurityPolicyInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAppSecSecurityPolicyResult>("akamai:index/getAppSecSecurityPolicy:getAppSecSecurityPolicy", args ?? new GetAppSecSecurityPolicyInvokeArgs(), options.WithVersion());
    }


    public sealed class GetAppSecSecurityPolicyArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public int ConfigId { get; set; }

        /// <summary>
        /// The name of the security policy to use. If not supplied, information about all security policies is returned.
        /// </summary>
        [Input("securityPolicyName")]
        public string? SecurityPolicyName { get; set; }

        public GetAppSecSecurityPolicyArgs()
        {
        }
    }

    public sealed class GetAppSecSecurityPolicyInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the security configuration to use.
        /// </summary>
        [Input("configId", required: true)]
        public Input<int> ConfigId { get; set; } = null!;

        /// <summary>
        /// The name of the security policy to use. If not supplied, information about all security policies is returned.
        /// </summary>
        [Input("securityPolicyName")]
        public Input<string>? SecurityPolicyName { get; set; }

        public GetAppSecSecurityPolicyInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAppSecSecurityPolicyResult
    {
        public readonly int ConfigId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A tabular display showing the ID and name of all security policies.
        /// </summary>
        public readonly string OutputText;
        /// <summary>
        /// The ID of the security policy. Included only if `security_policy_name` was specified.
        /// </summary>
        public readonly string SecurityPolicyId;
        /// <summary>
        /// A list of the IDs of all security policies.
        /// </summary>
        public readonly ImmutableArray<string> SecurityPolicyIdLists;
        public readonly string? SecurityPolicyName;

        [OutputConstructor]
        private GetAppSecSecurityPolicyResult(
            int configId,

            string id,

            string outputText,

            string securityPolicyId,

            ImmutableArray<string> securityPolicyIdLists,

            string? securityPolicyName)
        {
            ConfigId = configId;
            Id = id;
            OutputText = outputText;
            SecurityPolicyId = securityPolicyId;
            SecurityPolicyIdLists = securityPolicyIdLists;
            SecurityPolicyName = securityPolicyName;
        }
    }
}
