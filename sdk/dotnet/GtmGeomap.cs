// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Akamai
{
    /// <summary>
    /// Use the `akamai.GtmGeomap` resource to create, configure, and import a GTM Geographic map. Geographic mapping lets you configure a property that returns a CNAME based on the geographic location of the request.
    /// 
    /// You can reuse maps for multiple properties or create new ones. To configure a property for geographic mapping, you need to define at least one geographic map for your domain. Each map needs at least two definitions. For example, you can have one definition that maps a set of countries to a specific data center, and a second definition that routes all other traffic.
    /// 
    /// &gt; **Note** Import requires an ID with this format: `existing_domain_name`:`existing_map_name`.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Akamai = Pulumi.Akamai;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demoGeomap = new Akamai.GtmGeomap("demoGeomap", new Akamai.GtmGeomapArgs
    ///         {
    ///             DefaultDatacenter = new Akamai.Inputs.GtmGeomapDefaultDatacenterArgs
    ///             {
    ///                 DatacenterId = 5400,
    ///                 Nickname = "All Others",
    ///             },
    ///             Domain = "demo_domain.akadns.net",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Argument reference
    /// 
    /// This resource supports these arguments:
    /// 
    /// * `domain` - (Required) GTM Domain name for the Geographic Map.
    /// * `name` - (Required) A descriptive label for the Geographic map.
    /// * `default_datacenter` - (Required) A placeholder for all other geographic zones. Requires these additional arguments:
    ///   * `datacenter_id` - (Required) For each property, an identifier for all other geographic zones.
    ///   * `nickname` - (Required) A descriptive label for all other geographic zones.
    /// * `wait_on_complete` - (Optional) A boolean indicating whether to wait for transaction to complete. Set to `true` by default.
    /// * `assignment` - (Optional) Contains information about the geographic zone groupings of countries. You can have multiple `assignment` arguments. If used, requires these additional arguments:
    ///   * `datacenter_id` - (Required) A unique identifier for an existing data center in the domain.
    ///   * `nickname` - (Optional) A descriptive label for the group.
    ///   * `countries` - (Optional) Specifies an array of two-letter ISO 3166 country codes, or for finer subdivisions, the two-letter country code and the two-letter stateOrProvince code separated by a forward slash.
    /// 
    /// ## Schema reference
    /// 
    /// You can download the GTM Geographic Map backing schema from the [Global Traffic Management API](https://developer.akamai.com/api/web_performance/global_traffic_management/v1.html#geographicmap) page.
    /// </summary>
    [AkamaiResourceType("akamai:index/gtmGeomap:GtmGeomap")]
    public partial class GtmGeomap : Pulumi.CustomResource
    {
        [Output("assignments")]
        public Output<ImmutableArray<Outputs.GtmGeomapAssignment>> Assignments { get; private set; } = null!;

        [Output("defaultDatacenter")]
        public Output<Outputs.GtmGeomapDefaultDatacenter> DefaultDatacenter { get; private set; } = null!;

        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("waitOnComplete")]
        public Output<bool?> WaitOnComplete { get; private set; } = null!;


        /// <summary>
        /// Create a GtmGeomap resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GtmGeomap(string name, GtmGeomapArgs args, CustomResourceOptions? options = null)
            : base("akamai:index/gtmGeomap:GtmGeomap", name, args ?? new GtmGeomapArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GtmGeomap(string name, Input<string> id, GtmGeomapState? state = null, CustomResourceOptions? options = null)
            : base("akamai:index/gtmGeomap:GtmGeomap", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "akamai:trafficmanagement/gtmGeomap:GtmGeomap"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GtmGeomap resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GtmGeomap Get(string name, Input<string> id, GtmGeomapState? state = null, CustomResourceOptions? options = null)
        {
            return new GtmGeomap(name, id, state, options);
        }
    }

    public sealed class GtmGeomapArgs : Pulumi.ResourceArgs
    {
        [Input("assignments")]
        private InputList<Inputs.GtmGeomapAssignmentArgs>? _assignments;
        public InputList<Inputs.GtmGeomapAssignmentArgs> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<Inputs.GtmGeomapAssignmentArgs>());
            set => _assignments = value;
        }

        [Input("defaultDatacenter", required: true)]
        public Input<Inputs.GtmGeomapDefaultDatacenterArgs> DefaultDatacenter { get; set; } = null!;

        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("waitOnComplete")]
        public Input<bool>? WaitOnComplete { get; set; }

        public GtmGeomapArgs()
        {
        }
    }

    public sealed class GtmGeomapState : Pulumi.ResourceArgs
    {
        [Input("assignments")]
        private InputList<Inputs.GtmGeomapAssignmentGetArgs>? _assignments;
        public InputList<Inputs.GtmGeomapAssignmentGetArgs> Assignments
        {
            get => _assignments ?? (_assignments = new InputList<Inputs.GtmGeomapAssignmentGetArgs>());
            set => _assignments = value;
        }

        [Input("defaultDatacenter")]
        public Input<Inputs.GtmGeomapDefaultDatacenterGetArgs>? DefaultDatacenter { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("waitOnComplete")]
        public Input<bool>? WaitOnComplete { get; set; }

        public GtmGeomapState()
        {
        }
    }
}
